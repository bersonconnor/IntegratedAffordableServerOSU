{
  "_from": "react-file-viewer",
  "_id": "react-file-viewer@1.1.0",
  "_inBundle": false,
  "_integrity": "sha512-jyIhoAdUZ7DCaC8++erAykfwIlQQr/HfbqnJW+zlBsjFKslWMDDE8tuUVOwtbsOFJDhOhELIYQclILxWlrYauQ==",
  "_location": "/react-file-viewer",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-file-viewer",
    "fetchSpec": "latest",
    "name": "react-file-viewer",
    "raw": "react-file-viewer",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-file-viewer/-/react-file-viewer-1.1.0.tgz",
  "_shasum": "327505e8170f13371edfecf7d46641456a991817",
  "_spec": "react-file-viewer",
  "_where": "/Users/chasetiberi/Clone-AFFORDABLE/affordablegettysburg",
  "author": {
    "email": "opensource@plangrid.com",
    "name": "PlanGrid"
  },
  "bugs": {
    "url": "https://github.com/plangrid/react-file-viewer/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Alexei Schiopu",
      "email": "alexxschiopu@gmail.com",
      "url": "http://schiopu.me"
    },
    {
      "name": "Aaron Norby",
      "email": "aaron.norby@gmail.com"
    },
    {
      "name": "Viktoriya Savkina",
      "email": "viktoriya.savkina@gmail.com"
    }
  ],
  "dependencies": {
    "comma-separated-values": "^3.6.4",
    "mammoth": "1.3.6",
    "pdfjs-dist": "1.8.357",
    "prop-types": "^15.5.10",
    "react-data-grid": "^5.0.5",
    "react-visibility-sensor": "^5.0.2",
    "three": "0.85.2",
    "xlsx": "^0.10.1"
  },
  "deprecated": false,
  "description": "Extendable file viewer for web",
  "devDependencies": {
    "autoprefixer": "^7.1.0",
    "babel-core": "^6.24.1",
    "babel-jest": "^20.0.3",
    "babel-loader": "^7.0.0",
    "babel-plugin-transform-class-properties": "^6.19.0",
    "babel-plugin-transform-es2015-classes": "^6.18.0",
    "babel-plugin-transform-es2015-object-super": "^6.6.5",
    "babel-plugin-transform-runtime": "6.23.0",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-0": "6.5.0",
    "babel-runtime": "^6.20.0",
    "chalk": "^1.1.3",
    "css-loader": "^0.28.1",
    "enzyme": "^3.8.0",
    "enzyme-adapter-react-16": "^1.7.1",
    "eslint": "^3.19.0",
    "eslint-config-airbnb": "^15.0.1",
    "eslint-import-resolver-webpack": "^0.8.1",
    "eslint-loader": "^1.7.1",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-jsx-a11y": "^5.0.3",
    "eslint-plugin-react": "^7.0.1",
    "file-loader": "^0.11.1",
    "html-webpack-plugin": "^2.28.0",
    "inquirer": "^3.0.6",
    "jest": "^23.6.0",
    "node-sass": "^4.5.3",
    "postcss-loader": "^2.0.5",
    "react": "^16.6.3",
    "react-dom": "^16.6.3",
    "react-test-renderer": "^16.6.3",
    "sass-loader": "^6.0.5",
    "style-loader": "^0.17.0",
    "url-loader": "^0.5.8",
    "webpack": "^2.5.1",
    "webpack-dev-server": "^2.4.5"
  },
  "eslintConfig": {
    "extends": "airbnb",
    "plugins": [
      "import"
    ],
    "settings": {
      "import/resolver": {
        "webpack": "webpack.config.js"
      }
    }
  },
  "homepage": "https://github.com/plangrid/react-file-viewer#readme",
  "jest": {
    "moduleDirectories": [
      "node_modules",
      "src"
    ],
    "setupTestFrameworkScriptFile": "<rootDir>/tests/setupTests.js",
    "testEnvironment": "node",
    "testPathIgnorePatterns": [
      "<rootDir>[/\\\\](build|node_modules|scripts|example_files)[/\\\\]"
    ],
    "transform": {
      "^(?!.*\\.(js|jsx|css|json)$)": "<rootDir>/config/jest/fileTransform.js",
      "^.+\\.(css|scss)$": "<rootDir>/config/jest/cssTransform.js",
      "^.+\\.(js|jsx)$": "<rootDir>/node_modules/babel-jest"
    },
    "transformIgnorePatterns": [
      "[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"
    ]
  },
  "license": "MIT",
  "main": "dist/index.js",
  "module": "dist/index.js",
  "name": "react-file-viewer",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^16.6.3",
    "react-dom": "^16.6.3"
  },
  "readme": "\n# react-file-viewer\n\nExtendable file viewer for web\n\n## Supported file formats:\n\n - Images: png, jpeg, gif, bmp, including 360-degree images\n - pdf\n - csv\n - xslx\n - docx\n - Video: mp4, webm\n - Audio: mp3\n\n\n## Usage\n\nNote this module works best with react 16+.  If you are using React < 16 you will likely need to use version 0.5. `npm install react-file-viewer@0.5.0`.\n\nThere is one main React component, `FileViewer`, that takes the following props:\n\n`fileType` string: type of resource to be shown (one of the supported file\nformats, eg `'png'`). Passing in an unsupported file type will result in displaying\nan `unsupported file type` message (or a custom component).\n\n`filePath` string: the url of the resource to be shown by the FileViewer.\n\n`onError` function [optional]: function that will be called when there is an error in the file\nviewer fetching or rendering the requested resource. This is a place where you can\npass a callback for a logging utility.\n\n`errorComponent` react element [optional]: A component to render in case of error\ninstead of the default error component that comes packaged with react-file-viewer.\n\n`unsupportedComponent` react element [optional]: A component to render in case\nthe file format is not supported.\n\nTo use a custom error component, you might do the following:\n\n```\n// MyApp.js\nimport React, { Component } from 'react';\nimport logger from 'logging-library';\nimport FileViewer from 'react-file-viewer';\nimport { CustomErrorComponent } from 'custom-error';\n\nconst file = 'http://example.com/image.png'\nconst type = 'png'\n\nclass MyComponent extends Component {\n  render() {\n    return (\n      <FileViewer\n        fileType={type}\n        filePath={file}\n        errorComponent={CustomErrorComponent}\n        onError={this.onError}/>\n    );\n  }\n\n  onError(e) {\n    logger.logError(e, 'error in file-viewer');\n  }\n}\n```\n\n## Development\n\nThere is a demo app built into this library that can be used for development\npurposes. It is by default served via webpack-dev-server.\n\n### To start demo app\n\n`make start` will start the demo app served by webpack-dev-server\n\n### Testing\n\nTests use Jest and Enzyme.\n\nRun tests with:\n\n```\nmake test\n```\n\nThis starts Jest in watch mode. To run a particular test file, while in watch mode\nhit `p` and then type the path or name of the file.\n\nSome tests use snapshots. If intended changes to a component cause snapshot tests\nto fail, snapshot files need to be updated (stored in `__snapshots__` directories).\nTo do this run:\n\n```\nnpm run jest --updateSnapshot\n```\n\n### To run the linter\n\n`make lint`\n\n### Extending the file viewer\n\nAdding supported file types is easy (and pull requests are welcome!). Say, for\nexample, you want to add support for `.rtf` files. First, you need to create a\n\"driver\" for that file type. A driver is just a component that is capable of\nrendering that file type. (See what exists now in `src/components/drivers`.) After\nyou've created the driver component and added it to `src/components/drivers`, you\nsimply need to import the component into `file-vewer.jsx` and add a switch clause\nfor `rtf` to the `getDriver` method. Ie:\n\n```\ncase 'rtf':\n  return RtfViewer;\n```\n\n## Roadmap\n\n- Remove ignored linting rules and fix them\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/plangrid/react-file-viewer.git"
  },
  "scripts": {
    "build": "webpack -p --progress",
    "dev": "webpack -d --watch",
    "jest": "jest --env=jsdom",
    "lint": "eslint ./src/**/*.jsx",
    "start": "node ./scripts/start.js",
    "tag-and-publish": "node ./scripts/publish.js",
    "test": "jest --env=jsdom --watch"
  },
  "version": "1.1.0"
}
