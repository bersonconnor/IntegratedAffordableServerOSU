{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Connor/Demo_OSU_Filemanager/app/src/pages/AuthPages/ForgotCredentials/index.js\";\nimport React, { Component } from \"react\";\nimport sha256 from \"fast-sha256\";\nimport { AffordableClient, AffordableHttpError } from \"affordable-client\";\nimport swal from \"sweetalert\";\n\nvar randomstring = require(\"randomstring\"); // There is currently code temporarily commented out in this file for the COVID-19 Release\n\n\nclass ForgotCredentials extends Component {\n  constructor() {\n    super();\n\n    this.showAlertOnRetreiveStatus = () => {\n      //const x = document.getElementById(\"username\");\n      var y = document.getElementById(\"email\");\n      /*\n      if (\n        typeof y !== \"undefined\" &&\n        y.value === \"\" &&\n        !(typeof x !== \"undefined\" && x.value === \"\")\n      ) {\n        // for username and no email\n        if (window.confirm(\"Verify username: \" + x.value + \"?\")) {\n          const data = new FormData();\n          data.append(\"username\", x.value);\n          fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/authentication/forgot-account/username\", {\n            method: \"POST\",\n            body: data\n          })\n            .then(response => {\n              if (response.ok) return response.json();\n            })\n            .then(resData => {\n              this.showAlertSucc2(resData);\n            });\n        }\n      } else */\n\n      if (\n      /*\n      typeof x !== \"undefined\" &&\n      x.value === \"\" &&*/\n      !(typeof y !== \"undefined\" && y.value === \"\")) {\n        // for email and no username\n        var affordableClient = new AffordableClient();\n        affordableClient.forgotUserNameOrPassword(y.value);\n        swal(\"Email Sent\", \"An email should arrive in your inbox shortly\", \"success\");\n        /*\n        if (window.confirm(\"Verify email: \" + y.value + \"?\")) {\n          const data = new FormData();\n          data.append(\"email\", y.value);\n          fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/authentication/forgot-account/email\", {\n            method: \"POST\",\n            body: data\n          })\n            .then(response => {\n              if (response.ok) return response.json();\n            })\n            .then(resData => {\n              this.showAlertSucc2(resData);\n            });\n        }\n        */\n      }\n      /* else if (\n       !(typeof x !== \"undefined\" && x.value === \"\") &&\n       !(typeof y !== \"undefined\" && y.value === \"\")\n      ) {\n       // for username and email\n       if (window.confirm(\"Verify email: \" + y.value + \"?\")) {\n         const data = new FormData();\n         data.append(\"email\", y.value);\n         fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/authentication/forgot-account/email\", {\n           method: \"POST\",\n           body: data\n         })\n           .then(response => {\n             if (response.ok) return response.json();\n           })\n           .then(resData => {\n             this.showAlertSucc2(resData);\n           });\n       }\n      }*/\n      else {\n          // for no username and no email\n          swal(\"Enter your email\", \"Enter a valid email to continue\", \"error\");\n        }\n    };\n\n    this.state = {\n      found: false,\n      showlinktologin: false,\n      QRState: false,\n      QRsuccess: false,\n      QSState: false,\n      QSnumber: -1,\n      QScontent: null,\n      QSanswer: null,\n      QSsuccess: false,\n      checkboxStateGoogleAuth: false,\n      checkboxStateRawAuth: false,\n      email: null\n    };\n  }\n  /*\n    // function: Toogle the Google Auth Checkbox\n    toggleFuncGoogleAuthCheckbox = () => {\n      this.setState({\n        checkboxStateGoogleAuth: !this.state.checkboxStateGoogleAuth\n      });\n    };\n  \n    // function: Toogle the Raw Code Checkbox\n    toggleFuncRawCodeCheckbox = () => {\n      this.setState({\n        checkboxStateRawAuth: !this.state.checkboxStateRawAuth\n      });\n    };\n  \n    // function: Verify the answers to the security qs from backend\n    handleSecurityQsAnswers = () => {\n      const answer = sha256(\n        document.getElementById(\"securityqs\").value\n      ).toString();\n      if (answer === this.state.QSanswer) {\n        this.setState({ QSsuccess: true });\n        //if(this.state.QSsuccess){\n        const data = new FormData();\n        data.append(\"email\", this.state.email);\n        fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/authentication/email/recover\", {\n          method: \"POST\",\n          body: data\n        })\n          .then(response => response.json())\n          .then(() =>\n            alert(\n              \"Recovery Information has been sent to the email address on file. Please Check Your email for resetting your password.\"\n            )\n          );\n        // }\n      } else {\n        this.showAlertFail(\"\");\n      }\n    };\n  \n    // function: Verify the Code with the one that is in the database from backend\n    handleValidateCode = ev => {\n      ev.preventDefault();\n      const data = new FormData();\n  \n      //find username or email\n      const x = document.getElementById(\"username\");\n      const y = document.getElementById(\"email\");\n  \n      if (\n        typeof y !== \"undefined\" &&\n        y.value === \"\" &&\n        !(typeof x !== \"undefined\" && x.value === \"\")\n      ) {\n        // for username and no email\n        console.log(\"for username and no email\");\n        const name = x.value;\n        const token = document.getElementById(\"token\").value;\n        data.append(\"token\", token);\n        data.append(\"username\", name);\n  \n        if (this.state.checkboxStateGoogleAuth) {\n          data.append(\"GoogleAuth\", this.state.checkboxStateGoogleAuth);\n        } else {\n          data.append(\"GoogleAuth\", this.state.checkboxStateGoogleAuth);\n        }\n        fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/authentication/two-factor/username\", {\n          method: \"POST\",\n          body: data\n        })\n          .then(response => response.json())\n          .then(response => {\n            if (response.verified) {\n              this.setState({ QRsuccess: true });\n              const data = new FormData();\n              data.append(\"email\", response.email);\n              data.append(\"username\", response.username);\n              data.append(\"randomString\", randomstring.generate());\n              data.append(\"timestamp\", Date.now());\n  \n              fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/authentication/email/recover\", {\n                method: \"POST\",\n                body: data\n              })\n                .then(response => response.json())\n                .then(() =>\n                  alert(\n                    \"Recovery Information has been sent to the email address on file. Please Check Your email for resetting your password.\"\n                  )\n                );\n            }\n          })\n          .catch(error => this.showAlertFail(error));\n      } else if (\n        typeof x !== \"undefined\" &&\n        x.value === \"\" &&\n        !(typeof y !== \"undefined\" && y.value === \"\")\n      ) {\n        // for email and no username\n        console.log(\"for email and no username\");\n  \n        const name = y.value;\n        const token = document.getElementById(\"token\").value;\n        data.append(\"token\", token);\n        data.append(\"email\", name);\n        if (this.state.checkboxStateGoogleAuth) {\n          data.append(\"GoogleAuth\", this.state.checkboxStateGoogleAuth);\n        } else {\n          data.append(\"GoogleAuth\", this.state.checkboxStateGoogleAuth);\n        }\n        fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/authentication/two-factor/email\", {\n          method: \"POST\",\n          body: data\n        })\n          .then(response => response.json())\n          .then(response => {\n            if (response.verified) {\n              this.setState({ QRsuccess: true });\n              const data = new FormData();\n              data.append(\"email\", response.email);\n              data.append(\"username\", response.username);\n              data.append(\"randomString\", randomstring.generate());\n              data.append(\"timestamp\", Date.now());\n              fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/authentication/email/recover\", {\n                method: \"POST\",\n                body: data\n              })\n                .then(response => response.json())\n                .then(() =>\n                  alert(\n                    \"Recovery Information has been sent to the email address on file. Please Check Your email for resetting your password.\"\n                  )\n                );\n            }\n          })\n          .catch(error => this.showAlertFail(error));\n      }\n    };\n  \n    showAlertFail = () => {\n      alert(\"Please Try Again\");\n    };\n  */\n  // main function which fetch from backend the retrieve status\n\n\n  //show success/failure message on retrieve status\n  showAlertSucc2(message) {\n    if (message.success === \"Username Found\" || message.success === \"Email Found\") {\n      alert(message.success);\n      this.setState({\n        email: message.email\n      });\n      this.setState({\n        found: true\n      });\n\n      if (message.twofactor === \"true\") {\n        this.setState({\n          QRState: true\n        });\n      } else if (message.twofactor === \"false\") {\n        this.setState({\n          QSState: true,\n          QSnumber: Math.floor(Math.random() * Math.floor(100)) % 3\n        });\n\n        if (this.state.QSnumber === 0) {\n          this.setState({\n            QScontent: message.Question1,\n            QSanswer: message.Answer1\n          });\n        } else if (this.state.QSnumber === 1) {\n          this.setState({\n            QScontent: message.Question2,\n            QSanswer: message.Answer2\n          });\n        } else if (this.state.QSnumber === 2) {\n          this.setState({\n            QScontent: message.Question3,\n            QSanswer: message.Answer3\n          });\n        }\n      }\n    } else {\n      alert(message.success);\n    }\n  } //MAIN\n\n\n  render() {\n    {\n      /*\n      const content3 = (\n       <div className=\"row\">\n         <div className=\"col\">\n           <div className=\"row mt-5\">\n             <div className=\"col text-center\">\n               <p>\n                 Enter the QR passcode and select the proper Authentication\n                 option!\n               </p>\n             </div>\n           </div>\n            <div className=\"row mt-1\">\n             <div className=\"col text-center\">\n               <input type=\"text\" id=\"token\" className=\"App-login-input\" />\n             </div>\n           </div>\n            <div className=\"row justify-content-center mt-1\">\n             <div className=\"col-1 text-right\">\n               <input\n                 type=\"checkbox\"\n                 id=\"GoogleAuthenticatorPass\"\n                 onClick={this.toggleFuncGoogleAuthCheckbox}\n               />\n             </div>\n             <div className=\"col-3\">\n               <p>Google Authenticator Password</p>\n             </div>\n           </div>\n            <div className=\"row justify-content-center mt-1\">\n             <div className=\"col-1 text-right\">\n               <input\n                 type=\"checkbox\"\n                 id=\"RawPass\"\n                 onClick={this.toggleFuncRawCodeCheckbox}\n               />\n             </div>\n             <div className=\"col-3\">\n               <p>Raw Secret Key</p>\n             </div>\n           </div>\n            <div className=\"row mt-1\">\n             <div className=\"col text-center\">\n               <button\n                 onClick={this.handleValidateCode}\n                 id=\"authenticate\"\n                 className=\"App-login-button2\"\n               >\n                 Authenticate\n               </button>\n             </div>\n           </div>\n         </div>\n       </div>\n      );\n      */\n    }\n    {\n      /*\n      let content4 = null;\n      if (this.state.QSState) {\n       content4 = (\n         <div className=\"row\">\n           <div className=\"col\">\n             <div className=\"row mt-5\">\n               <div className=\"col text-center\">\n                 <p>{this.state.QScontent}</p>\n               </div>\n             </div>\n              <div className=\"row mt-1\">\n               <div className=\"col text-center\">\n                 <input\n                   type=\"text\"\n                   id=\"securityqs\"\n                   className=\"App-login-input\"\n                 />\n               </div>\n             </div>\n              <div className=\"row mt-1\">\n               <div className=\"col text-center\">\n                 <button\n                   onClick={this.handleSecurityQsAnswers}\n                   id=\"ValidateAnswer\"\n                   className=\"App-login-button2\"\n                 >\n                   Validate Answer\n                 </button>\n               </div>\n             </div>\n           </div>\n         </div>\n       );\n      }\n      */\n    }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 15\n      }\n    }, \"Forgot Username or Password\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"App-login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"email\",\n      id: \"email\",\n      className: \"App-login-input\",\n      placeholder: \"Email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.showAlertOnRetreiveStatus,\n      className: \"App-login-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 15\n      }\n    }, \"Retrieve\")))));\n  }\n\n}\n\nexport default ForgotCredentials;","map":{"version":3,"sources":["/home/ubuntu/Connor/Demo_OSU_Filemanager/app/src/pages/AuthPages/ForgotCredentials/index.js"],"names":["React","Component","sha256","AffordableClient","AffordableHttpError","swal","randomstring","require","ForgotCredentials","constructor","showAlertOnRetreiveStatus","y","document","getElementById","value","affordableClient","forgotUserNameOrPassword","state","found","showlinktologin","QRState","QRsuccess","QSState","QSnumber","QScontent","QSanswer","QSsuccess","checkboxStateGoogleAuth","checkboxStateRawAuth","email","showAlertSucc2","message","success","alert","setState","twofactor","Math","floor","random","Question1","Answer1","Question2","Answer2","Question3","Answer3","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport sha256 from \"fast-sha256\";\nimport { AffordableClient, AffordableHttpError } from \"affordable-client\";\nimport swal from \"sweetalert\";\n\nconst randomstring = require(\"randomstring\");\n\n// There is currently code temporarily commented out in this file for the COVID-19 Release\n\nclass ForgotCredentials extends Component {\n  constructor() {\n    super();\n    this.state = {\n      found: false,\n      showlinktologin: false,\n      QRState: false,\n      QRsuccess: false,\n      QSState: false,\n      QSnumber: -1,\n      QScontent: null,\n      QSanswer: null,\n      QSsuccess: false,\n      checkboxStateGoogleAuth: false,\n      checkboxStateRawAuth: false,\n      email: null\n    };\n  }\n/*\n  // function: Toogle the Google Auth Checkbox\n  toggleFuncGoogleAuthCheckbox = () => {\n    this.setState({\n      checkboxStateGoogleAuth: !this.state.checkboxStateGoogleAuth\n    });\n  };\n\n  // function: Toogle the Raw Code Checkbox\n  toggleFuncRawCodeCheckbox = () => {\n    this.setState({\n      checkboxStateRawAuth: !this.state.checkboxStateRawAuth\n    });\n  };\n\n  // function: Verify the answers to the security qs from backend\n  handleSecurityQsAnswers = () => {\n    const answer = sha256(\n      document.getElementById(\"securityqs\").value\n    ).toString();\n    if (answer === this.state.QSanswer) {\n      this.setState({ QSsuccess: true });\n      //if(this.state.QSsuccess){\n      const data = new FormData();\n      data.append(\"email\", this.state.email);\n      fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/authentication/email/recover\", {\n        method: \"POST\",\n        body: data\n      })\n        .then(response => response.json())\n        .then(() =>\n          alert(\n            \"Recovery Information has been sent to the email address on file. Please Check Your email for resetting your password.\"\n          )\n        );\n      // }\n    } else {\n      this.showAlertFail(\"\");\n    }\n  };\n\n  // function: Verify the Code with the one that is in the database from backend\n  handleValidateCode = ev => {\n    ev.preventDefault();\n    const data = new FormData();\n\n    //find username or email\n    const x = document.getElementById(\"username\");\n    const y = document.getElementById(\"email\");\n\n    if (\n      typeof y !== \"undefined\" &&\n      y.value === \"\" &&\n      !(typeof x !== \"undefined\" && x.value === \"\")\n    ) {\n      // for username and no email\n      console.log(\"for username and no email\");\n      const name = x.value;\n      const token = document.getElementById(\"token\").value;\n      data.append(\"token\", token);\n      data.append(\"username\", name);\n\n      if (this.state.checkboxStateGoogleAuth) {\n        data.append(\"GoogleAuth\", this.state.checkboxStateGoogleAuth);\n      } else {\n        data.append(\"GoogleAuth\", this.state.checkboxStateGoogleAuth);\n      }\n      fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/authentication/two-factor/username\", {\n        method: \"POST\",\n        body: data\n      })\n        .then(response => response.json())\n        .then(response => {\n          if (response.verified) {\n            this.setState({ QRsuccess: true });\n            const data = new FormData();\n            data.append(\"email\", response.email);\n            data.append(\"username\", response.username);\n            data.append(\"randomString\", randomstring.generate());\n            data.append(\"timestamp\", Date.now());\n\n            fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/authentication/email/recover\", {\n              method: \"POST\",\n              body: data\n            })\n              .then(response => response.json())\n              .then(() =>\n                alert(\n                  \"Recovery Information has been sent to the email address on file. Please Check Your email for resetting your password.\"\n                )\n              );\n          }\n        })\n        .catch(error => this.showAlertFail(error));\n    } else if (\n      typeof x !== \"undefined\" &&\n      x.value === \"\" &&\n      !(typeof y !== \"undefined\" && y.value === \"\")\n    ) {\n      // for email and no username\n      console.log(\"for email and no username\");\n\n      const name = y.value;\n      const token = document.getElementById(\"token\").value;\n      data.append(\"token\", token);\n      data.append(\"email\", name);\n      if (this.state.checkboxStateGoogleAuth) {\n        data.append(\"GoogleAuth\", this.state.checkboxStateGoogleAuth);\n      } else {\n        data.append(\"GoogleAuth\", this.state.checkboxStateGoogleAuth);\n      }\n      fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/authentication/two-factor/email\", {\n        method: \"POST\",\n        body: data\n      })\n        .then(response => response.json())\n        .then(response => {\n          if (response.verified) {\n            this.setState({ QRsuccess: true });\n            const data = new FormData();\n            data.append(\"email\", response.email);\n            data.append(\"username\", response.username);\n            data.append(\"randomString\", randomstring.generate());\n            data.append(\"timestamp\", Date.now());\n            fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/authentication/email/recover\", {\n              method: \"POST\",\n              body: data\n            })\n              .then(response => response.json())\n              .then(() =>\n                alert(\n                  \"Recovery Information has been sent to the email address on file. Please Check Your email for resetting your password.\"\n                )\n              );\n          }\n        })\n        .catch(error => this.showAlertFail(error));\n    }\n  };\n\n  showAlertFail = () => {\n    alert(\"Please Try Again\");\n  };\n*/\n  // main function which fetch from backend the retrieve status\n  showAlertOnRetreiveStatus = () => {\n    //const x = document.getElementById(\"username\");\n    const y = document.getElementById(\"email\");\n\n    /*\n    if (\n      typeof y !== \"undefined\" &&\n      y.value === \"\" &&\n      !(typeof x !== \"undefined\" && x.value === \"\")\n    ) {\n      // for username and no email\n      if (window.confirm(\"Verify username: \" + x.value + \"?\")) {\n        const data = new FormData();\n        data.append(\"username\", x.value);\n        fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/authentication/forgot-account/username\", {\n          method: \"POST\",\n          body: data\n        })\n          .then(response => {\n            if (response.ok) return response.json();\n          })\n          .then(resData => {\n            this.showAlertSucc2(resData);\n          });\n      }\n    } else */if (/*\n      typeof x !== \"undefined\" &&\n      x.value === \"\" &&*/\n      !(typeof y !== \"undefined\" && y.value === \"\")\n    ) {\n      // for email and no username\n\n      const affordableClient = new AffordableClient();\n      affordableClient.forgotUserNameOrPassword(y.value);\n\n      swal(\n        \"Email Sent\",\n        \"An email should arrive in your inbox shortly\",\n        \"success\"\n      );\n\n      /*\n      if (window.confirm(\"Verify email: \" + y.value + \"?\")) {\n        const data = new FormData();\n        data.append(\"email\", y.value);\n        fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/authentication/forgot-account/email\", {\n          method: \"POST\",\n          body: data\n        })\n          .then(response => {\n            if (response.ok) return response.json();\n          })\n          .then(resData => {\n            this.showAlertSucc2(resData);\n          });\n      }\n      */\n    }/* else if (\n      !(typeof x !== \"undefined\" && x.value === \"\") &&\n      !(typeof y !== \"undefined\" && y.value === \"\")\n    ) {\n      // for username and email\n      if (window.confirm(\"Verify email: \" + y.value + \"?\")) {\n        const data = new FormData();\n        data.append(\"email\", y.value);\n        fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/authentication/forgot-account/email\", {\n          method: \"POST\",\n          body: data\n        })\n          .then(response => {\n            if (response.ok) return response.json();\n          })\n          .then(resData => {\n            this.showAlertSucc2(resData);\n          });\n      }\n    }*/ else {\n      // for no username and no email\n      swal(\n        \"Enter your email\",\n        \"Enter a valid email to continue\",\n        \"error\"\n      );\n    }\n  };\n\n  //show success/failure message on retrieve status\n  showAlertSucc2(message) {\n    if (\n      message.success === \"Username Found\" ||\n      message.success === \"Email Found\"\n    ) {\n      alert(message.success);\n      this.setState({ email: message.email });\n      this.setState({ found: true });\n      if (message.twofactor === \"true\") {\n        this.setState({ QRState: true });\n      } else if (message.twofactor === \"false\") {\n        this.setState({\n          QSState: true,\n          QSnumber: Math.floor(Math.random() * Math.floor(100)) % 3\n        });\n        if (this.state.QSnumber === 0) {\n          this.setState({\n            QScontent: message.Question1,\n            QSanswer: message.Answer1\n          });\n        } else if (this.state.QSnumber === 1) {\n          this.setState({\n            QScontent: message.Question2,\n            QSanswer: message.Answer2\n          });\n        } else if (this.state.QSnumber === 2) {\n          this.setState({\n            QScontent: message.Question3,\n            QSanswer: message.Answer3\n          });\n        }\n      }\n    } else {\n      alert(message.success);\n    }\n  }\n\n  //MAIN\n  render() {\n    {/*\n    const content3 = (\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"row mt-5\">\n            <div className=\"col text-center\">\n              <p>\n                Enter the QR passcode and select the proper Authentication\n                option!\n              </p>\n            </div>\n          </div>\n\n          <div className=\"row mt-1\">\n            <div className=\"col text-center\">\n              <input type=\"text\" id=\"token\" className=\"App-login-input\" />\n            </div>\n          </div>\n\n          <div className=\"row justify-content-center mt-1\">\n            <div className=\"col-1 text-right\">\n              <input\n                type=\"checkbox\"\n                id=\"GoogleAuthenticatorPass\"\n                onClick={this.toggleFuncGoogleAuthCheckbox}\n              />\n            </div>\n            <div className=\"col-3\">\n              <p>Google Authenticator Password</p>\n            </div>\n          </div>\n\n          <div className=\"row justify-content-center mt-1\">\n            <div className=\"col-1 text-right\">\n              <input\n                type=\"checkbox\"\n                id=\"RawPass\"\n                onClick={this.toggleFuncRawCodeCheckbox}\n              />\n            </div>\n            <div className=\"col-3\">\n              <p>Raw Secret Key</p>\n            </div>\n          </div>\n\n          <div className=\"row mt-1\">\n            <div className=\"col text-center\">\n              <button\n                onClick={this.handleValidateCode}\n                id=\"authenticate\"\n                className=\"App-login-button2\"\n              >\n                Authenticate\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n    */}\n\n    {/*\n    let content4 = null;\n    if (this.state.QSState) {\n      content4 = (\n        <div className=\"row\">\n          <div className=\"col\">\n            <div className=\"row mt-5\">\n              <div className=\"col text-center\">\n                <p>{this.state.QScontent}</p>\n              </div>\n            </div>\n\n            <div className=\"row mt-1\">\n              <div className=\"col text-center\">\n                <input\n                  type=\"text\"\n                  id=\"securityqs\"\n                  className=\"App-login-input\"\n                />\n              </div>\n            </div>\n\n            <div className=\"row mt-1\">\n              <div className=\"col text-center\">\n                <button\n                  onClick={this.handleSecurityQsAnswers}\n                  id=\"ValidateAnswer\"\n                  className=\"App-login-button2\"\n                >\n                  Validate Answer\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  */}\n\n    return (\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"row mt-5\">\n            <div className=\"col text-center\">\n              <h2>Forgot Username or Password</h2>\n            </div>\n          </div>\n          \n          <div className=\"row\">\n            <div className=\"col text-center\">\n              <form className=\"App-login\">\n               {/* <input\n                  type=\"text\"\n                  id=\"username\"\n                  className=\"App-login-input\"\n                  placeholder=\"Username\"\n                />\n                <p>or</p> */}\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  className=\"App-login-input\"\n                  placeholder=\"Email\"\n                />\n              </form>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col text-center\">\n              <button\n                onClick={this.showAlertOnRetreiveStatus}\n                className=\"App-login-button\"\n              >\n                Retrieve\n              </button>\n            </div>\n          </div>\n\n          {/*content4*/}\n          {/*content3*/}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ForgotCredentials;\n"]},"metadata":{},"sourceType":"module"}