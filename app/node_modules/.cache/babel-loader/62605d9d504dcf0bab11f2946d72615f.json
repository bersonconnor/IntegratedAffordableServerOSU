{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AffordableAdminClient = void 0;\n\nvar AffordableClient_1 = require(\"./AffordableClient\");\n\nvar ADMIN_ROUTE = \"/admin\";\n\nclass AffordableAdminClient extends AffordableClient_1.AffordableClient {\n  constructor() {\n    super();\n  }\n\n  getAdmins(admin) {\n    return this.doGet(this.getBaseURL() + ADMIN_ROUTE + \"/getAdmins\", admin);\n  }\n\n  getAdminRegistrationRequests() {\n    return this.doGet(this.getBaseURL() + ADMIN_ROUTE + \"/registrationRequests\");\n  }\n\n  acceptAdminRegistration(adminRequest) {\n    return this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/acceptRequest\", adminRequest);\n  }\n\n  rejectAdminRegistration(adminRequest) {\n    return this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/rejectRequest\", adminRequest);\n  }\n\n  revokeAdminAccess(request) {\n    return this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/revokeAccess\", request);\n  }\n\n  getPrivileges(admin) {\n    return this.doGet(this.getBaseURL() + ADMIN_ROUTE + \"/getPrivileges\", admin);\n  }\n\n  getAllAdminPrivileges() {\n    return this.doGet(this.getBaseURL() + ADMIN_ROUTE + \"/getAllPrivileges\");\n  }\n\n  setPrivileges(adminId, privileges) {\n    var updateRequest = {\n      adminId: adminId,\n      privileges: privileges\n    };\n    return this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/setPrivileges\", updateRequest);\n  }\n\n  resetAuthInfoNonAdmin(user) {\n    this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/resetAuthNonAdmin\", user);\n  }\n\n  resetAuthInfoAdmin(admin) {\n    this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/resetAuthNonAdmin\", admin);\n  }\n\n  verifyEmailAddressForUser(userInfo) {\n    return this.doGet(this.getBaseURL() + ADMIN_ROUTE + \"/verifyEmail\", {\n      username: userInfo.username\n    });\n  }\n\n  checkPrivilege(adminId, privilege) {\n    return new Promise(resolve => {\n      resolve(true); // this.getUserInfo(adminId).then((res: UserInfo) => {\n      //     if (res.userType == \"admin\") {\n      //         this.getPrivileges({ userId: adminId }).then((res: AdminPrivileges) => {\n      //             let canView: boolean = res[privilege];\n      //             console.log(\"can view: \", canView);\n      //             resolve(canView);\n      //         });\n      //     } else {\n      //         resolve(true);\n      //     }\n      // });\n    });\n  }\n\n  getAllUsers(admin) {\n    console.log(\"admin: \", admin);\n    return this.doGet(this.getBaseURL() + ADMIN_ROUTE + \"/allUsers\", admin);\n  }\n\n  recordAuditTrails(username, action) {\n    return this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/recordTrail\", {\n      username: username,\n      action: action\n    });\n  }\n\n  getAllAuditTrails(admin) {\n    return this.doGet(this.getBaseURL() + ADMIN_ROUTE + \"/allTrails\", admin);\n  }\n\n  sendUserEmail(emailRequest) {\n    return this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/sendEmail\", emailRequest);\n  }\n\n  activateDeactivateUser(userRequest) {\n    return this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/activateDeactivateUser\", userRequest);\n  }\n\n}\n\nexports.AffordableAdminClient = AffordableAdminClient;","map":{"version":3,"sources":["/home/ubuntu/Connor/SandBoxOSU/client/dist/AffordableAdminClient.js"],"names":["Object","defineProperty","exports","value","AffordableAdminClient","AffordableClient_1","require","ADMIN_ROUTE","AffordableClient","constructor","getAdmins","admin","doGet","getBaseURL","getAdminRegistrationRequests","acceptAdminRegistration","adminRequest","doPost","rejectAdminRegistration","revokeAdminAccess","request","getPrivileges","getAllAdminPrivileges","setPrivileges","adminId","privileges","updateRequest","resetAuthInfoNonAdmin","user","resetAuthInfoAdmin","verifyEmailAddressForUser","userInfo","username","checkPrivilege","privilege","Promise","resolve","getAllUsers","console","log","recordAuditTrails","action","getAllAuditTrails","sendUserEmail","emailRequest","activateDeactivateUser","userRequest"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AffordableAdminClient = void 0;\nconst AffordableClient_1 = require(\"./AffordableClient\");\nconst ADMIN_ROUTE = \"/admin\";\nclass AffordableAdminClient extends AffordableClient_1.AffordableClient {\n    constructor() {\n        super();\n    }\n    getAdmins(admin) {\n        return this.doGet(this.getBaseURL() + ADMIN_ROUTE + \"/getAdmins\", admin);\n    }\n    getAdminRegistrationRequests() {\n        return this.doGet(this.getBaseURL() + ADMIN_ROUTE + \"/registrationRequests\");\n    }\n    acceptAdminRegistration(adminRequest) {\n        return this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/acceptRequest\", adminRequest);\n    }\n    rejectAdminRegistration(adminRequest) {\n        return this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/rejectRequest\", adminRequest);\n    }\n    revokeAdminAccess(request) {\n        return this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/revokeAccess\", request);\n    }\n    getPrivileges(admin) {\n        return this.doGet(this.getBaseURL() + ADMIN_ROUTE + \"/getPrivileges\", admin);\n    }\n    getAllAdminPrivileges() {\n        return this.doGet(this.getBaseURL() + ADMIN_ROUTE + \"/getAllPrivileges\");\n    }\n    setPrivileges(adminId, privileges) {\n        let updateRequest = {\n            adminId: adminId,\n            privileges: privileges\n        };\n        return this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/setPrivileges\", updateRequest);\n    }\n    resetAuthInfoNonAdmin(user) {\n        this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/resetAuthNonAdmin\", user);\n    }\n    resetAuthInfoAdmin(admin) {\n        this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/resetAuthNonAdmin\", admin);\n    }\n    verifyEmailAddressForUser(userInfo) {\n        return this.doGet(this.getBaseURL() + ADMIN_ROUTE + \"/verifyEmail\", { username: userInfo.username });\n    }\n    checkPrivilege(adminId, privilege) {\n        return new Promise((resolve) => {\n            resolve(true);\n            // this.getUserInfo(adminId).then((res: UserInfo) => {\n            //     if (res.userType == \"admin\") {\n            //         this.getPrivileges({ userId: adminId }).then((res: AdminPrivileges) => {\n            //             let canView: boolean = res[privilege];\n            //             console.log(\"can view: \", canView);\n            //             resolve(canView);\n            //         });\n            //     } else {\n            //         resolve(true);\n            //     }\n            // });\n        });\n    }\n    getAllUsers(admin) {\n        console.log(\"admin: \", admin);\n        return this.doGet(this.getBaseURL() + ADMIN_ROUTE + \"/allUsers\", admin);\n    }\n    recordAuditTrails(username, action) {\n        return this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/recordTrail\", { username: username, action: action });\n    }\n    getAllAuditTrails(admin) {\n        return this.doGet(this.getBaseURL() + ADMIN_ROUTE + \"/allTrails\", admin);\n    }\n    sendUserEmail(emailRequest) {\n        return this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/sendEmail\", emailRequest);\n    }\n    activateDeactivateUser(userRequest) {\n        return this.doPost(this.getBaseURL() + ADMIN_ROUTE + \"/activateDeactivateUser\", userRequest);\n    }\n}\nexports.AffordableAdminClient = AffordableAdminClient;\n"]},"metadata":{},"sourceType":"script"}