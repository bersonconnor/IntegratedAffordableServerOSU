{"ast":null,"code":"import _regeneratorRuntime from \"/home/ubuntu/Connor/SandBoxOSU/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ubuntu/Connor/SandBoxOSU/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/ubuntu/Connor/SandBoxOSU/app/src/components/Modal/DepositButton.js\";\nimport React, { Component } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { Button } from \"react-bootstrap\";\nimport SubmitModal from \"./SubmitModal\";\nimport \"./scss/modal.scss\";\nimport \"../../styles/buttons.css\";\nimport { config } from \"dotenv\";\nimport { AffordableClient } from \"affordable-client\";\nconfig(); // const dotenv_1 = require(\"dotenv\");\n// dotenv_1.config();\n\nclass DepositButton extends Component {\n  constructor(props) {\n    super(props);\n    this.client = new AffordableClient();\n    this.state = {\n      open: false,\n      paymentType: \"--\",\n      selectedPaymentMethod: \"--\",\n      paymentMethodList: [],\n      beforeTax: 0,\n      tax: 0,\n      afterTax: 0,\n      stripeTax: 0,\n      affordableTax: 0,\n      showAmountError: false,\n      showPaymentMethodError: false,\n      showPaymentTypeError: false,\n      paymentMethodDisabled: true,\n      fieldColor: '#FFFFFF',\n      buttonStyle: props.buttonStyle,\n      buttonText: props.buttonText\n    };\n    this.handleChangePaymentType = this.handleChangePaymentType.bind(this);\n    this.handleChangePaymentMethod = this.handleChangePaymentMethod.bind(this);\n    this.handleChangeAmount = this.handleChangeAmount.bind(this);\n    this.handleAmountErrorMessage = this.handleAmountErrorMessage.bind(this);\n    this.handlePaymentMethodErrorMessage = this.handlePaymentMethodErrorMessage.bind(this);\n    this.handlePaymentTypeErrorMessage = this.handlePaymentTypeErrorMessage.bind(this);\n    this.handleHideErrorMessage = this.handleHideErrorMessage.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.closeModalSuccess = this.closeModalSuccess.bind(this);\n  }\n\n  openModal() {\n    this.setState({\n      open: true,\n      paymentType: \"--\",\n      paymentMethod: \"\",\n      beforeTax: 0,\n      fieldColor: \"#FFFFFF\",\n      showAmountError: false,\n      showPaymentMethodError: false,\n      showPaymentTypeError: false,\n      paymentMethodDisabled: true\n    });\n    console.log(\"Deposit Modal Open\");\n  }\n\n  closeModalSuccess() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                open: false\n              });\n\n              console.log(\"Deposit Modal Close\");\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n\n  closeModal() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this2.setState({\n                open: false\n              });\n\n              console.log(\"Deposit Modal Cancel\"); // if(this.state.afterTax > 0){\n              //     const data = new FormData();\n              //     data.append(\"username\", JSON.parse(sessionStorage.getItem('userInfo')).username);\n              //     data.append(\"paymentType\",this.state.paymentType);\n              //     data.append(\"paymentMethod\",this.state.selectedPaymentMethod);\n              //     data.append(\"amount\",this.state.afterTax);\n              //     console.log(\"amount is \"+this.state.afterTax)\n              //     try {\n              //         const response = await fetch(\"http://localhost:4000/stripe/deposit\", {\n              //             method: \"POST\",\n              //             body: data\n              //         });\n              //         if (!response.ok) {\n              //             throw Error(response.statusText);\n              //         }\n              //         const json = await response.json();\n              //         const cardList=json.cardList;\n              //         var  method=[];\n              //         for(var i=0; i<cardList.length;i++){\n              //             method.push(cardList[i].cardName);\n              //         }\n              //          this.setState({\n              //             paymentMethodList: method,\n              //             paymentMethodDisabled: false\n              //         })\n              //         console.log(method)\n              //     } catch (error) {\n              //       console.log(error);\n              //     }\n              // }\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n\n  handleChangePaymentType(e) {\n    var _this3 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var data, username, json, cardList, method, i;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _this3.setState({\n                paymentType: e.target.value,\n                paymentMethodList: []\n              });\n\n              data = new FormData();\n              data.append(\"username\", JSON.parse(sessionStorage.getItem('userInfo')).username);\n              data.append(\"paymentType\", e.target.value);\n              username = JSON.parse(sessionStorage.getItem('userInfo')).username;\n              _context3.next = 7;\n              return _this3.client.stripeGetSavedPaymentMethod(username, e.target.value);\n\n            case 7:\n              json = _context3.sent;\n              cardList = json.cardList;\n              method = [];\n\n              for (i = 0; i < cardList.length; i++) {\n                method.push(cardList[i].cardName);\n              }\n\n              _this3.setState({\n                paymentMethodList: method,\n                paymentMethodDisabled: false\n              });\n\n              console.log(method); // console.log(process.env.REACT_APP_AF_BACKEND_URL);\n              // try {\n              //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/stripe/getSavedPaymentMethod\", {\n              //         method: \"POST\",\n              //         body: data\n              //     });\n              //     if (!response.ok) {\n              //         throw Error(response.statusText);\n              //     }\n              //     const json = await response.json();\n              //     const cardList=json.cardList;\n              //     var  method=[];\n              //     for(var i=0; i<cardList.length;i++){\n              //         method.push(cardList[i].cardName);\n              //     }\n              //      this.setState({\n              //         paymentMethodList: method,\n              //         paymentMethodDisabled: false\n              //     })\n              //     console.log(method)\n              // } catch (error) {\n              //   console.log(error);\n              // }\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  }\n\n  handleChangePaymentMethod(e) {\n    console.log(e.target.value);\n    this.setState({\n      selectedPaymentMethod: e.target.value,\n      paymentMethod: e.target.value\n    });\n  }\n\n  handleChangeAmount(e) {\n    var amountStr = typeof e.target.value === \"number\" ? e.target.value.toString() : e.target.value;\n\n    if (amountStr.match(\"^[0-9]+([.][0-9]{0,2})?$\") != null && parseFloat(amountStr) > 1 && parseFloat(amountStr) <= 2000) {\n      var taxRate;\n      var chargeFee = 0;\n\n      if (this.state.paymentType == \"BankAccount\") {\n        taxRate = 0.008;\n      } else {\n        taxRate = 0.029;\n        chargeFee = 0.5;\n      }\n\n      var managementRate = 0.025;\n      var serviceFee = parseFloat(amountStr) * taxRate + parseFloat(amountStr) * managementRate + chargeFee;\n      this.setState({\n        stripeTax: parseFloat(amountStr) * taxRate + chargeFee,\n        affordableTax: parseFloat(amountStr) * managementRate,\n        tax: serviceFee,\n        fieldColor: '#66f375',\n        beforeTax: parseFloat(amountStr),\n        afterTax: parseFloat(amountStr) - serviceFee\n      });\n    } else {\n      console.log(\"Invalid Input\" + e.target.value);\n      this.setState({\n        fieldColor: '#f36684',\n        beforeTax: amountStr\n      });\n    }\n  }\n\n  handleAmountErrorMessage(e) {\n    this.setState({\n      showAmountError: e\n    });\n  }\n\n  handlePaymentMethodErrorMessage(e) {\n    this.setState({\n      showPaymentMethodError: e\n    });\n  }\n\n  handlePaymentTypeErrorMessage(e) {\n    this.setState({\n      showPaymentTypeError: e\n    });\n  }\n\n  handleHideErrorMessage() {\n    this.setState({\n      showAmountError: false,\n      showPaymentMethodError: false,\n      showPaymentTypeError: false\n    });\n  }\n\n  render() {\n    var paymentMethodList = this.state.paymentMethodList;\n    paymentMethodList = [\"--\"].concat(paymentMethodList);\n    paymentMethodList = paymentMethodList.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }\n      }, item);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.buttonStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 13\n      }\n    }, this.state.buttonStyle === undefined ? /*#__PURE__*/React.createElement(Button, {\n      className: \"submit-button\",\n      onClick: this.openModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 21\n      }\n    }, this.state.buttonText === undefined ? \"Deposit\" : this.state.buttonText) : /*#__PURE__*/React.createElement(Button, {\n      onClick: this.openModal,\n      style: this.state.buttonStyle,\n      block: true,\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 21\n      }\n    }, this.state.buttonText === undefined ? \"Deposit\" : this.state.buttonText), /*#__PURE__*/React.createElement(Popup, {\n      open: this.state.open,\n      closeOnDocumentClick: true,\n      onClose: this.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"close\",\n      onClick: this.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 21\n      }\n    }, \"\\xD7\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 21\n      }\n    }, \" Deposit \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 25\n      }\n    }, \"Payment Type:\\xA0\", /*#__PURE__*/React.createElement(\"select\", {\n      className: \"paymentType\",\n      id: \"paymentType\",\n      onChange: this.handleChangePaymentType,\n      value: this.state.paymentType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"--\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 33\n      }\n    }, \"--\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"BankAccount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 33\n      }\n    }, \"Bank Account\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Credit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 33\n      }\n    }, \"Credit Card\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Debit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 33\n      }\n    }, \"Debit Card\")), this.state.showPaymentTypeError ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 64\n      }\n    }, \"Please select a payment type\") : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 102\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 25\n      }\n    }, \"Payment Method: \\xA0\", /*#__PURE__*/React.createElement(\"select\", {\n      className: \"paymentMethod\",\n      id: \"paymentMethod\",\n      value: this.state.selectedPaymentMethod,\n      disabled: this.state.paymentMethodDisabled,\n      onChange: this.handleChangePaymentMethod,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 29\n      }\n    }, paymentMethodList), this.state.showPaymentMethodError ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 66\n      }\n    }, \"Please select a payment method.\") : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 107\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 25\n      }\n    }, \"Amount:\\xA0\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"amountNumber\",\n      value: this.state.beforeTax,\n      style: {\n        backgroundColor: this.state.fieldColor\n      },\n      onChange: this.handleChangeAmount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 29\n      }\n    }), this.state.showAmountError ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 61\n      }\n    }) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 75\n      }\n    }, \"Between $1 and $2000\"), this.state.showAmountError ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 61\n      }\n    }, \"Please enter a valid amount between $1 to $2000.\") : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 119\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"floats-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"submit-button\",\n      onClick: this.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 25\n      }\n    }, \"Cancel\")), /*#__PURE__*/React.createElement(SubmitModal, {\n      usertype: this.props.usertype,\n      onMainClose: this.closeModalSuccess,\n      buttonType: \"Deposit\",\n      beforeTax: this.state.beforeTax,\n      tax: this.state.tax,\n      afterTax: this.state.afterTax,\n      stripeTax: this.state.stripeTax,\n      affordableTax: this.state.affordableTax,\n      message: \"Your transaction is being processed. Thank you for using our service!!\",\n      shouldOpen: \"#66f375\" == this.state.fieldColor,\n      paymentType: this.state.paymentType,\n      paymentMethod: this.state.selectedPaymentMethod,\n      amountError: this.handleAmountErrorMessage,\n      paymentMethodError: this.handlePaymentMethodErrorMessage,\n      paymentTypeError: this.handlePaymentTypeErrorMessage,\n      handleHideErrorMessage: this.handleHideErrorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default DepositButton;","map":{"version":3,"sources":["/home/ubuntu/Connor/SandBoxOSU/app/src/components/Modal/DepositButton.js"],"names":["React","Component","Popup","Button","SubmitModal","config","AffordableClient","DepositButton","constructor","props","client","state","open","paymentType","selectedPaymentMethod","paymentMethodList","beforeTax","tax","afterTax","stripeTax","affordableTax","showAmountError","showPaymentMethodError","showPaymentTypeError","paymentMethodDisabled","fieldColor","buttonStyle","buttonText","handleChangePaymentType","bind","handleChangePaymentMethod","handleChangeAmount","handleAmountErrorMessage","handlePaymentMethodErrorMessage","handlePaymentTypeErrorMessage","handleHideErrorMessage","openModal","closeModal","closeModalSuccess","setState","paymentMethod","console","log","e","target","value","data","FormData","append","JSON","parse","sessionStorage","getItem","username","stripeGetSavedPaymentMethod","json","cardList","method","i","length","push","cardName","amountStr","toString","match","parseFloat","taxRate","chargeFee","managementRate","serviceFee","render","concat","map","item","index","undefined","backgroundColor","usertype"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport {Button} from \"react-bootstrap\";\nimport SubmitModal from \"./SubmitModal\";\n\nimport \"./scss/modal.scss\";\nimport \"../../styles/buttons.css\";\nimport { config } from \"dotenv\";\nimport { AffordableClient } from \"affordable-client\";\nconfig();\n\n// const dotenv_1 = require(\"dotenv\");\n// dotenv_1.config();\n\n\nclass DepositButton extends Component {\n    constructor(props){\n        super(props);\n\n        this.client = new AffordableClient();\n        this.state = {\n            open: false,\n            \n            paymentType: \"--\",\n            selectedPaymentMethod: \"--\",\n            paymentMethodList: [],\n            \n            beforeTax: 0,\n            tax: 0,\n            afterTax: 0,\n            stripeTax: 0,\n            affordableTax: 0,\n        \n            showAmountError: false,\n            showPaymentMethodError: false,\n            showPaymentTypeError: false,\n            paymentMethodDisabled: true,\n\n            fieldColor: '#FFFFFF',\n\n            buttonStyle: props.buttonStyle,\n            buttonText: props.buttonText\n        };\n\n        this.handleChangePaymentType = this.handleChangePaymentType.bind(this);\n        this.handleChangePaymentMethod = this.handleChangePaymentMethod.bind(this);\n        this.handleChangeAmount = this.handleChangeAmount.bind(this);\n        this.handleAmountErrorMessage = this.handleAmountErrorMessage.bind(this);\n        this.handlePaymentMethodErrorMessage = this.handlePaymentMethodErrorMessage.bind(this);\n        this.handlePaymentTypeErrorMessage = this.handlePaymentTypeErrorMessage.bind(this);\n        this.handleHideErrorMessage = this.handleHideErrorMessage.bind(this);\n\n        this.openModal = this.openModal.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.closeModalSuccess = this.closeModalSuccess.bind(this)\n    }\n\n    openModal(){\n        this.setState({\n            open: true,\n            paymentType: \"--\",\n            paymentMethod: \"\",\n            beforeTax: 0,\n            fieldColor: \"#FFFFFF\",\n            showAmountError: false,\n            showPaymentMethodError: false,\n            showPaymentTypeError: false,\n            paymentMethodDisabled: true\n        });\n\n        console.log(\"Deposit Modal Open\");\n\n    }\n\n    async closeModalSuccess(){\n        this.setState({ \n            open: false \n        });\n        console.log(\"Deposit Modal Close\");\n    }\n    \n    async closeModal(){\n        this.setState({\n            open: false \n        });\n        console.log(\"Deposit Modal Cancel\");\n\n        // if(this.state.afterTax > 0){\n        //     const data = new FormData();\n            \n        //     data.append(\"username\", JSON.parse(sessionStorage.getItem('userInfo')).username);\n        //     data.append(\"paymentType\",this.state.paymentType);\n        //     data.append(\"paymentMethod\",this.state.selectedPaymentMethod);\n        //     data.append(\"amount\",this.state.afterTax);\n        //     console.log(\"amount is \"+this.state.afterTax)\n        //     try {\n        //         const response = await fetch(\"http://localhost:4000/stripe/deposit\", {\n        //             method: \"POST\",\n        //             body: data\n        //         });\n        //         if (!response.ok) {\n        //             throw Error(response.statusText);\n        //         }\n        //         const json = await response.json();\n        //         const cardList=json.cardList;\n        //         var  method=[];\n        //         for(var i=0; i<cardList.length;i++){\n        //             method.push(cardList[i].cardName);\n        //         }\n            \n    \n        //          this.setState({\n                    \n        //             paymentMethodList: method,\n        //             paymentMethodDisabled: false\n        //         })\n        //         console.log(method)\n               \n        //     } catch (error) {\n        //       console.log(error);\n        //     }\n        // }\n    }\n\n   async handleChangePaymentType(e){\n        this.setState({\n            paymentType: e.target.value,\n            paymentMethodList: []\n\n        });\n        const data = new FormData();\n        data.append(\"username\", JSON.parse(sessionStorage.getItem('userInfo')).username);\n        data.append(\"paymentType\",e.target.value);\n        var username = JSON.parse(sessionStorage.getItem('userInfo')).username;\n        var json = await this.client.stripeGetSavedPaymentMethod(username,e.target.value);\n        const cardList=json.cardList;\n        var  method=[];\n        for(var i=0; i<cardList.length;i++){\n            method.push(cardList[i].cardName);\n        }\n    \n\n         this.setState({\n            \n            paymentMethodList: method,\n            paymentMethodDisabled: false\n        })\n        console.log(method)\n\n\n        // console.log(process.env.REACT_APP_AF_BACKEND_URL);\n        // try {\n        //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/stripe/getSavedPaymentMethod\", {\n        //         method: \"POST\",\n        //         body: data\n        //     });\n        //     if (!response.ok) {\n        //         throw Error(response.statusText);\n        //     }\n        //     const json = await response.json();\n        //     const cardList=json.cardList;\n        //     var  method=[];\n        //     for(var i=0; i<cardList.length;i++){\n        //         method.push(cardList[i].cardName);\n        //     }\n        \n\n        //      this.setState({\n                \n        //         paymentMethodList: method,\n        //         paymentMethodDisabled: false\n        //     })\n        //     console.log(method)\n           \n        // } catch (error) {\n        //   console.log(error);\n        // }\n\n    }\n    \n    handleChangePaymentMethod(e){\n        console.log(e.target.value);\n        this.setState({\n            selectedPaymentMethod: e.target.value ,\n            paymentMethod:e.target.value \n        });\n    }\n\n    handleChangeAmount(e){\n        let amountStr = typeof e.target.value === \"number\" ? e.target.value.toString() : e.target.value;\n    \n        \n        \n        if(amountStr.match(\"^[0-9]+([.][0-9]{0,2})?$\") != null &&\n        parseFloat(amountStr) > 1 && parseFloat(amountStr) <= 2000){\n             \n            var taxRate;\n            var chargeFee=0;\n            if((this.state.paymentType==\"BankAccount\")){\n                taxRate=0.008;\n            }else{\n                taxRate=0.029;\n                chargeFee=0.5;\n            }\n\n            var managementRate= 0.025;\n            var serviceFee= (parseFloat(amountStr) * taxRate)+(parseFloat(amountStr) * managementRate)+chargeFee;\n\n\n            this.setState({ \n                stripeTax: parseFloat(amountStr) * taxRate +chargeFee,\n                affordableTax: parseFloat(amountStr) *managementRate,\n                tax: serviceFee,\n                fieldColor: '#66f375',\n                beforeTax: parseFloat(amountStr),\n                afterTax: parseFloat(amountStr) - serviceFee\n            });\n\n\n          \n        }\n        else{\n            console.log(\"Invalid Input\" + e.target.value)\n\n            this.setState({ \n                fieldColor: '#f36684',\n                beforeTax: amountStr\n            });\n        }\n\n    }\n\n    handleAmountErrorMessage(e){\n        this.setState({ showAmountError: e })\n    }\n\n    handlePaymentMethodErrorMessage(e){\n        this.setState({ showPaymentMethodError: e })\n    }\n\n    handlePaymentTypeErrorMessage(e){\n        this.setState({ showPaymentTypeError: e })\n    }\n\n    handleHideErrorMessage(){\n        this.setState({\n            showAmountError: false,\n            showPaymentMethodError: false,\n            showPaymentTypeError: false\n        })\n    }\n\n    render(){\n        var paymentMethodList = this.state.paymentMethodList;\n        paymentMethodList = [\"--\"].concat(paymentMethodList)\n        paymentMethodList = paymentMethodList.map((item, index) => {\n            return (\n            <option value={item}>{item}</option>\n            );\n        });\n\n        return (\n            <div style={this.state.buttonStyle}>\n                {this.state.buttonStyle === undefined ?\n                    <Button className=\"submit-button\" onClick={this.openModal}>\n                    {this.state.buttonText === undefined ?\n                        \"Deposit\"\n                    :\n                        this.state.buttonText\n                    } \n                    </Button>\n                :\n                    <Button onClick={this.openModal} style={this.state.buttonStyle} block size=\"lg\">\n                        {this.state.buttonText === undefined ?\n                            \"Deposit\"\n                        :\n                            this.state.buttonText\n                        } \n                    </Button>\n                }\n                \n                <Popup\n                  open={this.state.open}\n                  closeOnDocumentClick\n                  onClose={this.closeModal}>\n                      \n                    <a className=\"close\" onClick={this.closeModal}>\n                        &times;\n                    </a>\n                    <div className=\"header\"> Deposit </div>\n                    <div className=\"content\">\n                        <label className=\"label\">Payment Type:&nbsp;\n                            <select \n                              className=\"paymentType\" \n                              id=\"paymentType\" \n                              onChange={this.handleChangePaymentType}\n                              value={this.state.paymentType}>\n                                <option value=\"--\">--</option>\n                                <option value=\"BankAccount\">Bank Account</option>\n                                <option value=\"Credit\">Credit Card</option>\n                                <option value=\"Debit\">Debit Card</option>\n                            </select>\n                            {this.state.showPaymentTypeError ? <p>Please select a payment type</p> : <div></div>}\n                        </label><br />\n                        \n                        <label className=\"label\">Payment Method: &nbsp;\n                            <select \n                              className=\"paymentMethod\" \n                              id=\"paymentMethod\" \n                              value={this.state.selectedPaymentMethod} \n                              disabled={this.state.paymentMethodDisabled} \n                              onChange={this.handleChangePaymentMethod}> \n                                {paymentMethodList}\n                            </select>\n                            {this.state.showPaymentMethodError ? <p>Please select a payment method.</p> : <div></div>}\n                        </label><br />\n\n                        <label className=\"label\">Amount:&nbsp;\n                            <input \n                              type=\"text\" \n                              id=\"amountNumber\" \n                              value={this.state.beforeTax} \n                              style={{backgroundColor:this.state.fieldColor}}\n                              onChange={this.handleChangeAmount} />\n                              {this.state.showAmountError ? <div></div> : <p>Between $1 and $2000</p>}\n                              {this.state.showAmountError ? <p>Please enter a valid amount between $1 to $2000.</p> : <div></div>}\n                        \n                        </label><br />\n\n\n                    \n                    </div>\n                    <div className=\"actions\">\n                        <div className=\"floats-right\">\n                        {/*Cancel the transaction */}\n                        <button\n                          className=\"submit-button\"\n                          onClick={this.closeModal}>\n                            Cancel\n                        </button>\n                        </div>\n\n                        { /* Submit the transaction*/ }\n                        {/*NEED TO CHECK WHAT OTHER PEOPLE ARE USING TO DETERMINE USER */ }\n                        <SubmitModal \n                          usertype={this.props.usertype}\n                          onMainClose={this.closeModalSuccess}\n                          buttonType=\"Deposit\"\n                          beforeTax={this.state.beforeTax}\n                          tax={this.state.tax}\n                          afterTax={this.state.afterTax}\n                          stripeTax={this.state.stripeTax}\n                          affordableTax={this.state.affordableTax}\n                          message=\"Your transaction is being processed. Thank you for using our service!!\" \n                          shouldOpen= {\"#66f375\" == this.state.fieldColor}\n                          paymentType={this.state.paymentType}\n                          paymentMethod={this.state.selectedPaymentMethod}\n                          amountError={this.handleAmountErrorMessage}\n                          paymentMethodError={this.handlePaymentMethodErrorMessage}\n                          paymentTypeError={this.handlePaymentTypeErrorMessage}\n                          handleHideErrorMessage = {this.handleHideErrorMessage}\n                          />\n                    </div>\n                </Popup>\n            </div>\n        );        \n    }\n}\n\nexport default DepositButton;\n"]},"metadata":{},"sourceType":"module"}