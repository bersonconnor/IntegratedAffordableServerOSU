{"ast":null,"code":"import _slicedToArray from \"/home/ubuntu/Connor/SandBoxOSU/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/home/ubuntu/Connor/SandBoxOSU/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nvar _jsxFileName = \"/home/ubuntu/Connor/SandBoxOSU/app/src/pages/AdminPages/SecurityPage/index.tsx\";\nimport React, { Component } from 'react';\nimport { Actions } from 'affordable-shared-models';\nimport Popup from \"reactjs-popup\";\nimport { Redirect } from 'react-router-dom';\n\nclass UserSecurity extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [],\n      filteredUsers: [],\n      adminCanView: false,\n      adminPrivsChecked: false,\n      open: false\n    };\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  componentDidMount() {\n    this.checkAdminPrivileges();\n    this.getUsers();\n  }\n\n  checkAdminPrivileges() {\n    this.props.client.checkPrivilege(this.props.adminId, \"resetAuthInfoNonAdmin\").then(res => {\n      var canView = res;\n      this.setState({\n        adminCanView: canView,\n        adminPrivsChecked: true\n      });\n    });\n  }\n\n  getUsers() {\n    this.props.client.getAllUsers({\n      userId: this.props.adminId\n    }).then(res => {\n      this.setState({\n        users: res,\n        filteredUsers: res\n      });\n    });\n  }\n\n  closeModal() {\n    this.setState({\n      open: false\n    });\n  }\n\n  setStatus(username, email) {\n    this.props.client.removeTwoFactor(username, email).then(() => {\n      this.props.client.recordAuditTrails(this.props.admin.username, \"\".concat(this.props.admin.username, \" \").concat(Actions.ResetTwoFactor, \" of \").concat(username));\n      this.getUsers();\n    });\n  }\n\n  getResetTwoFactorButton(username, email, isTwoFactor) {\n    if (email === undefined) {\n      return /*#__PURE__*/React.createElement(\"text\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 20\n        }\n      }, \"User with Undefined Email\");\n    }\n\n    if (isTwoFactor) {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.setStatus(username, email),\n        type: \"button\",\n        className: \"btn btn-primary\",\n        \"data-toggle\": \"tooltip\",\n        \"data-placement\": \"bottom\",\n        title: \"Reset Two Factor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }, \"Reset\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"text\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }\n      }, \"Doesn't have MFA\");\n    }\n  }\n\n  setStatusAfterResetPassword(email, username) {\n    this.props.client.forgotUserNameOrPassword(email).then(() => {\n      this.props.client.recordAuditTrails(this.props.admin.username, \"\".concat(this.props.admin.username, \" \").concat(Actions.ResetPassword, \" of \").concat(username));\n      this.setState({\n        open: true\n      });\n    });\n  }\n\n  getResetPasswordButton(email, username) {\n    if (email === undefined) {\n      return /*#__PURE__*/React.createElement(\"text\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }\n      }, \"User with Undefined Email\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.setStatusAfterResetPassword(email, username),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, \"Reset Password\"), /*#__PURE__*/React.createElement(Popup, {\n      open: this.state.open,\n      closeOnDocumentClick: true,\n      onClose: this.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }, \" Password Reset Email Sent! \")));\n  }\n\n  getUserRows() {\n    var userRows = [];\n    var usersCopy = this.state.filteredUsers.slice(0).sort((b, a) => {\n      var returnValue = 0;\n      a.id < b.id ? returnValue = 1 : returnValue = -1;\n      return returnValue;\n    });\n\n    var _iterator = _createForOfIteratorHelper(usersCopy.entries()),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            index = _step$value[0],\n            value = _step$value[1];\n\n        userRows.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 21\n          }\n        }, value.id), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 21\n          }\n        }, value.username), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 21\n          }\n        }, this.getResetTwoFactorButton(value.username, value.primaryEmail, value.twoFactor)), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 21\n          }\n        }, this.getResetPasswordButton(value.primaryEmail, value.username))));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return userRows;\n  }\n\n  filterUsers(e) {\n    var searchResults = this.state.users.filter(user => {\n      var _user$primaryEmail;\n\n      return user.username.includes(e.target.value) || ((_user$primaryEmail = user.primaryEmail) === null || _user$primaryEmail === void 0 ? void 0 : _user$primaryEmail.includes(e.target.value));\n    });\n    this.setState({\n      filteredUsers: searchResults\n    });\n  }\n\n  render() {\n    if (this.state.adminPrivsChecked) {\n      if (this.state.adminCanView) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"adminPageContainer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          name: \"search\",\n          placeholder: \"search\",\n          onChange: e => this.filterUsers(e),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"table\", {\n          className: \"adminTable\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"tbody\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 37\n          }\n        }, \"ID\"), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 37\n          }\n        }, \"Username\"), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 37\n          }\n        }, \"Reset MFA\"), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 37\n          }\n        }, \"Reset Password\")), this.getUserRows())));\n      } else {\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: \"/NotFound\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 21\n          }\n        });\n      }\n    } else {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 20\n        }\n      }, \"Loading...\");\n    }\n  }\n\n}\n\nexport default UserSecurity;","map":{"version":3,"sources":["/home/ubuntu/Connor/SandBoxOSU/app/src/pages/AdminPages/SecurityPage/index.tsx"],"names":["React","Component","Actions","Popup","Redirect","UserSecurity","constructor","props","state","users","filteredUsers","adminCanView","adminPrivsChecked","open","closeModal","bind","componentDidMount","checkAdminPrivileges","getUsers","client","checkPrivilege","adminId","then","res","canView","setState","getAllUsers","userId","setStatus","username","email","removeTwoFactor","recordAuditTrails","admin","ResetTwoFactor","getResetTwoFactorButton","isTwoFactor","undefined","setStatusAfterResetPassword","forgotUserNameOrPassword","ResetPassword","getResetPasswordButton","getUserRows","userRows","usersCopy","slice","sort","b","a","returnValue","id","entries","index","value","push","primaryEmail","twoFactor","filterUsers","e","searchResults","filter","user","includes","target","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { AffordableAdminClient } from 'affordable-client';\nimport { AdminDeactivateUserRequest, AdminDeactivateUserResponse, UserInfo, Actions } from 'affordable-shared-models';\nimport Popup from \"reactjs-popup\";\nimport { Button } from 'react-bootstrap';\nimport { Redirect } from 'react-router-dom';\n\ninterface props {\n    client: AffordableAdminClient;\n    adminId: number;\n    admin: UserInfo;\n}\n\ninterface state {\n    users: UserInfo[];\n    filteredUsers: UserInfo[];\n    adminCanView: boolean;\n    adminPrivsChecked: boolean;\n    open: boolean;\n}\n\nclass UserSecurity extends Component<props, state> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            users: [],\n            filteredUsers: [],\n            adminCanView: false,\n            adminPrivsChecked: false,\n            open: false\n        };\n\n        this.closeModal = this.closeModal.bind(this);\n    }\n\n    componentDidMount() {\n        this.checkAdminPrivileges();\n        this.getUsers();\n    }\n\n    checkAdminPrivileges() {\n        this.props.client.checkPrivilege(this.props.adminId, \"resetAuthInfoNonAdmin\").then(res => {\n            let canView = res;\n            this.setState({\n                adminCanView: canView,\n                adminPrivsChecked: true\n            });\n        });\n    }\n\n    getUsers() {\n        this.props.client.getAllUsers({ userId: this.props.adminId }).then(res => {\n            this.setState({\n                users: res,\n                filteredUsers: res\n            })\n        })\n    }\n\n    closeModal() {\n        this.setState({ open: false });\n    }\n    \n    setStatus(username: string, email: string) {       \n        this.props.client.removeTwoFactor(username, email).then(() => {\n            this.props.client.recordAuditTrails(this.props.admin.username, `${this.props.admin.username} ${Actions.ResetTwoFactor} of ${username}`);\n            this.getUsers();\n        });\n    }\n\n    getResetTwoFactorButton(username: string, email: string | undefined, isTwoFactor: boolean) {        \n        if (email === undefined) {\n            return <text>User with Undefined Email</text>;\n        }\n        if (isTwoFactor) {\n            return (                \n                <button\n                    onClick={() => this.setStatus(username, email)}\n                    type=\"button\"\n                    className=\"btn btn-primary\"\n                    data-toggle=\"tooltip\"\n                    data-placement=\"bottom\"\n                    title=\"Reset Two Factor\">\n                    Reset\n                </button>\n            );\n        } else {\n            return (\n                <text>Doesn't have MFA</text>\n            );\n        }        \n    }\n\n    setStatusAfterResetPassword(email: string, username: string) {\n        this.props.client.forgotUserNameOrPassword(email).then(() => {\n            this.props.client.recordAuditTrails(this.props.admin.username, `${this.props.admin.username} ${Actions.ResetPassword} of ${username}`);\n            this.setState({\n                open: true\n            })\n        });\n    }\n    \n    getResetPasswordButton(email: string, username: string) {\n        if (email === undefined) {\n            return (\n                <text>User with Undefined Email</text>\n            );\n        }\n        \n        return (\n            <div>\n                <button\n                    onClick={() => this.setStatusAfterResetPassword(email, username)}>\n                    Reset Password\n                </button>   \n                <Popup\n                    open={this.state.open}\n                    closeOnDocumentClick={true}\n                    onClose={this.closeModal}\n                >\n                    <span> Password Reset Email Sent! </span>\n                    </Popup>  \n            </div>    \n        );       \n    }\n\n    getUserRows(): JSX.Element[] {\n        let userRows: JSX.Element[] = [];\n        let usersCopy = this.state.filteredUsers.slice(0).sort((b, a) => {\n            let returnValue = 0;\n            a.id < b.id ? returnValue = 1 : returnValue = -1;\n            return returnValue;\n        });\n\n        for (let [index, value] of usersCopy.entries()) {\n            userRows.push(\n                <tr key={index}>\n                    <td>{value.id}</td>\n                    <td>{value.username}</td>\n                    <td>{this.getResetTwoFactorButton(value.username, value.primaryEmail, value.twoFactor)}</td>\n                    <td>{this.getResetPasswordButton(value.primaryEmail as string, value.username as string)}</td>\n                </tr>\n            )\n        }\n\n        return userRows;\n    }\n\n    filterUsers(e: React.ChangeEvent<HTMLInputElement>): void {\n        let searchResults = this.state.users.filter(user => user.username.includes(e.target.value) || user.primaryEmail?.includes(e.target.value));\n        this.setState({\n            filteredUsers: searchResults\n        });\n    }\n\n    render() {\n        if (this.state.adminPrivsChecked) {\n            if (this.state.adminCanView) {\n                return (\n                    <div className=\"adminPageContainer\">\n                        <input name=\"search\" placeholder=\"search\" onChange={(e) => this.filterUsers(e)}/>\n                        <table className=\"adminTable\">\n                            <tbody>\n                                <tr>\n                                    <td>ID</td>\n                                    <td>Username</td>\n                                    <td>Reset MFA</td>\n                                    <td>Reset Password</td>\n                                </tr>\n                                {this.getUserRows()}\n                            </tbody>\n                        </table>\n                    </div>\n                )\n            } else {\n                return (\n                    <Redirect to=\"/NotFound\" />\n                )\n            }\n        } else {\n            return <span>Loading...</span>\n        }\n    }\n}\n\nexport default UserSecurity;"]},"metadata":{},"sourceType":"module"}