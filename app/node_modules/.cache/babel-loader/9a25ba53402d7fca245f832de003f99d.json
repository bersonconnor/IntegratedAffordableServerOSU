{"ast":null,"code":"import _regeneratorRuntime from \"/home/ubuntu/Connor/WorkOSU/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ubuntu/Connor/WorkOSU/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/ubuntu/Connor/WorkOSU/app/src/components/Modal/SubmitModal.js\";\nimport React, { Component } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport ThankYouModal from \"./ThankYouModal\";\nimport { AffordableClient } from \"affordable-client\";\nimport \"./scss/modal.scss\";\nimport \"../../styles/buttons.css\";\nimport { UserType } from \"affordable-shared-models\";\n\nclass SubmitModal extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n    this.logDonate = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var username, json;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              username = JSON.parse(sessionStorage.getItem('userInfo')).username;\n              _context.next = 3;\n              return _this.client.donateToHug(username, _this.props.HUGName, _this.props.afterTax);\n\n            case 3:\n              json = _context.sent;\n              console.log(\"Inserted donation\"); // const data = new FormData();\n              // data.append(\"username\", JSON.parse(sessionStorage.getItem('userInfo')).username);\n              // data.append(\"HUGName\", this.props.HUGName);\n              // data.append(\"amount\", this.props.afterTax);\n              // console.log(JSON.parse(sessionStorage.getItem('userInfo')).username,this.props.HUGName);\n              // try {\n              //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/transferFundFromDonorToHUG\", {\n              //         method: \"POST\",\n              //         body: data\n              //     });\n              //     if (!response.ok) {\n              //         throw Error(response.statusText);\n              //     }\n              //     const json = await response.json();\n              //     console.log(\"Inserted donation\");\n              // } catch (error) {\n              //     console.log(error);\n              // }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    this.logDeposit = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var data, username, json, chargeID;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              data = new FormData();\n              data.append(\"username\", JSON.parse(sessionStorage.getItem('userInfo')).username);\n              data.append(\"paymentType\", _this.props.paymentType);\n              data.append(\"paymentMethod\", _this.props.paymentMethod);\n              data.append(\"amountToCharge\", _this.props.beforeTax);\n              data.append(\"amountToDeposit\", _this.props.afterTax);\n              data.append(\"stripeFee\", _this.props.stripeTax);\n              data.append(\"managementFee\", _this.props.affordableTax);\n              username = JSON.parse(sessionStorage.getItem('userInfo')).username;\n              _context3.next = 11;\n              return _this.client.donateToHug(username, _this.props.paymentType, _this.props.paymentMethod, _this.props.beforeTax, _this.props.afterTax, _this.props.stripeTax, _this.props.affordableTax);\n\n            case 11:\n              json = _context3.sent;\n              chargeID = json.chargeID;\n              console.log(\"chargeID is \" + chargeID);\n              console.log(_this.props.paymentType, _this.props.paymentMethod, _this.props.afterTax);\n              setTimeout( /*#__PURE__*/function () {\n                var _timer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                  var json;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.next = 2;\n                          return this.client.donateToHug(username, chargeID, \"Deposit\");\n\n                        case 2:\n                          json = _context2.sent;\n                          alert(\"Transaction Status is \" + json.transactionStatus);\n\n                        case 4:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2, this);\n                }));\n\n                function timer() {\n                  return _timer.apply(this, arguments);\n                }\n\n                return timer;\n              }(), 5000); // try {\n              //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/deposit\", {\n              //         method: \"POST\",\n              //         body: data\n              //     });\n              //     if (!response.ok) {\n              //         throw Error(response.statusText);\n              //     }\n              //     const json = await response.json();\n              //     var chargeID=json.chargeID;\n              //     console.log(\"chargeID is \"+chargeID)\n              //     setTimeout( async function  timer(){\n              //         const data2 = new FormData();\n              //         data2.append(\"username\", JSON.parse(sessionStorage.getItem('userInfo')).username);\n              //         data2.append(\"chargeID\", chargeID);\n              //         const response2 =  await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/transaction/depositStatus\", {\n              //             method: \"POST\",\n              //             body: data2\n              //         });\n              //         if (!response2.ok) {\n              //             throw Error(response2.statusText);\n              //         }\n              //         const json2 =await  response2.json();\n              //         alert(\"Transaction Status is \"+json2.transactionStatus);\n              //     }, 5000 );\n              // } catch (error) {\n              //     console.log(error);\n              // }\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    this.logWithdraw = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var username, bankID, accountID, data, json, transferjson, transactionID, today, date;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              username = JSON.parse(sessionStorage.getItem('userInfo')).username;\n              bankID = null;\n              accountID = null;\n              data = new FormData();\n              data.append(\"username\", JSON.parse(sessionStorage.getItem('userInfo')).username);\n              data.append(\"paymentType\", _this.props.paymentType);\n              data.append(\"paymentMethod\", _this.props.paymentMethod);\n              data.append(\"amount\", _this.props.afterTax * 100);\n              console.log(_this.props.paymentType + \" \" + _this.props.paymentMethod + \" \" + _this.props.afterTax);\n              _context4.next = 11;\n              return _this.client.getCustomBank(data);\n\n            case 11:\n              json = _context4.sent;\n\n              if (!(json.success == \"No User Found\")) {\n                _context4.next = 17;\n                break;\n              }\n\n              console.error(\"Error: Custom Account Bank Account Not Found\");\n              return _context4.abrupt(\"return\");\n\n            case 17:\n              console.log(\"Account Found: \" + json.accountID);\n              data.append(\"bankID\", json.accountID);\n\n            case 19:\n              _context4.next = 21;\n              return _this.client.getStripeAccountID(username, \"0\");\n\n            case 21:\n              json = _context4.sent;\n\n              if (!(json.success == \"No Account Found\")) {\n                _context4.next = 27;\n                break;\n              }\n\n              console.error(\"Error: Custom Account Not Found\");\n              return _context4.abrupt(\"return\");\n\n            case 27:\n              console.log(\"Account Found: \" + json.id);\n              data.append(\"accountID\", json.id);\n\n            case 29:\n              // data.append(\"usertype\", \"0\");\n              // try {\n              //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/getCustomAccountID\", {\n              //         method: \"POST\",\n              //         body: data\n              //     });\n              //     if (!response.ok) {\n              //         throw Error(response.statusText);\n              //     }\n              //     const json = await response.json();\n              //     if(json.success == \"No Account Found\") {\n              //         console.error(\"Error: Custom Account Not Found\");\n              //         return\n              //     } else {\n              //         console.log(\"Account Found: \" + json.id);\n              //         data.append(\"accountID\", json.id);\n              //     }\n              // } catch (error) {\n              //     alert(\"Withdraw Failed\")\n              //     console.log(error);\n              //     return;\n              // }\n              // makes the transfer from the main account to Custom Account\n              transferjson = null;\n              _context4.next = 32;\n              return _this.client.stripeTransfer(data);\n\n            case 32:\n              json = _context4.sent;\n\n              if (!(json.success == \"STRIPE ERROR\")) {\n                _context4.next = 39;\n                break;\n              }\n\n              alert(\"Withdraw Failed\");\n              console.error(json.message);\n              return _context4.abrupt(\"return\");\n\n            case 39:\n              console.log(json);\n              transferjson = json.message;\n\n            case 41:\n              // try {\n              //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/transfer\", {\n              //         method: \"POST\",\n              //         body: data\n              //     });\n              //     if (!response.ok) {\n              //         throw Error(response.statusText);\n              //     }\n              //     const json = await response.json();\n              //     if(json.success == \"STRIPE ERROR\") {\n              //         alert(\"Withdraw Failed\")\n              //         console.error(json.message);\n              //         return\n              //     } else {\n              //         console.log(json);\n              //     }\n              // } catch (error) {\n              //     alert(\"Withdraw Failed\")\n              //     console.log(error);\n              //     return;\n              // }\n              // makes payout\n              // makes the transfer from the main account to Custom Account\n              data.append(\"description\", \"Recipient AFFORDABLE Withdraw: Initiated by \" + JSON.parse(sessionStorage.getItem('userInfo')).username + \" | Amount: $\" + _this.props.afterTax);\n              _context4.next = 44;\n              return _this.client.stripePayout(data, false);\n\n            case 44:\n              json = _context4.sent;\n\n              if (!(json.success == \"STRIPE ERROR\")) {\n                _context4.next = 51;\n                break;\n              }\n\n              alert(\"Withdraw Failed\");\n              console.error(json.message);\n              return _context4.abrupt(\"return\");\n\n            case 51:\n              console.log(json);\n\n            case 52:\n              // try {\n              //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/payout\", {\n              //         method: \"POST\",\n              //         body: data\n              //     });\n              //     if (!response.ok) {\n              //         throw Error(response.statusText);\n              //     }\n              //     const json = await response.json();\n              //     if(json.success == \"STRIPE ERROR\") {\n              //         alert(\"Withdraw Failed\")\n              //         console.error(json.message);\n              //         return\n              //     } else {\n              //         console.log(json);\n              //         payoutjson = json.message;\n              //     }\n              // } catch (error) {\n              //     alert(\"Withdraw Failed\")\n              //     console.log(error);\n              //     return;\n              // }\n              //Everything below for the rest of this function are database changes \n              // logs payout in externalTransactions\n              transactionID = null;\n              today = new Date();\n              date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate() + \" \" + today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n              data.append(\"transferID\", transferjson.id); //data.append(\"status\", payoutjson.status);\n\n              data.append(\"timestamp\", date);\n              data.set(\"amount\", _this.props.afterTax); //resets it back to original float\n\n              _context4.next = 60;\n              return _this.client.stripePayout(data, true);\n\n            case 60:\n              json = _context4.sent;\n              transactionID = json.transactionID;\n              console.log(json); // try {\n              //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/payoutUpdateTable\", {\n              //         method: \"POST\",\n              //         body: data\n              //     });\n              //     if (!response.ok) {\n              //         throw Error(response.statusText);\n              //     }\n              //     const json = await response.json();\n              //     transactionID = json.transactionID;\n              //     console.log(json);\n              // } catch (error) {\n              //     alert(\"Withdraw Failed\")\n              //     console.log(error);\n              //     return;\n              // }\n\n              /*\n              data.append(\"fee_amount\", (this.props.beforeTax-this.props.afterTax)*100);\n              try {\n                  const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/affordablePayoutFee\", {\n                      method: \"POST\",\n                      body: data\n                  });\n                  if (!response.ok) {\n                      throw Error(response.statusText);\n                  }\n                  const json = await response.json();\n                  console.log(json);\n              } catch (error) {\n                  alert(\"Fee Payout Failed\")\n                  console.log(error);\n                  return;\n              }\n              */\n              // logs fee in fees table\n\n              data.append(\"fee\", _this.props.beforeTax - _this.props.afterTax);\n              data.append(\"transactionID\", transactionID);\n              /*\n              try {\n                  const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/payoutUpdateFee\", {\n                      method: \"POST\",\n                      body: data\n                  });\n                  if (!response.ok) {\n                      throw Error(response.statusText);\n                  }\n                  const json = await response.json();\n                  console.log(json);\n                  alert(\"Payment Successful!\");\n              } catch (error) {\n                  alert(\"Withdraw Failed\")\n                  console.log(error);\n                  return;\n              }\n              */\n\n            case 65:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    this.client = new AffordableClient();\n    this.state = {\n      open: false,\n      validAmount: false\n    };\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.closeModalSuccess = this.closeModalSuccess.bind(this);\n    this.logDeposit = this.logDeposit.bind(this);\n    this.logDonate = this.logDonate.bind(this); // this.logWithdraw = this.logWithdraw.bind(this);\n  } // Do this stuff after page loads\n\n\n  componentDidMount() {// checkTransaction every 5 secs\n    //   this.checkTransaction=setInterval(() => this.checkTransactionStatus(this.state.chargeID), 3000);\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }))();\n  } //     componentWillUnmount() {\n  //         // Stop checking transaction \n  //         clearInterval(this.checkTransaction);\n  //   }\n\n\n  openModal() {\n    var amountStr = typeof this.props.beforeTax === \"number\" ? this.props.beforeTax.toString() : this.props.beforeTax;\n\n    if (this.props.shouldOpen && this.props.paymentMethod != \"--\") {\n      this.setState({\n        open: true\n      });\n      console.log(this.props.buttonType + \" Submit Modal Open\");\n    } else {\n      console.log(\"Invalid input\");\n\n      if (!this.props.shouldOpen) {\n        console.log(\"invalid \" + amountStr);\n        this.props.amountError(true);\n      } else {\n        console.log(\"valid \" + amountStr);\n        this.props.amountError(false);\n      }\n    }\n\n    if (this.props.buttonType != \"Donate\") {\n      if (this.props.paymentMethod === \"--\") {\n        this.props.paymentMethodError(true);\n      } else {\n        this.props.paymentMethodError(false);\n      }\n\n      if (this.props.paymentType === \"--\") {\n        this.props.paymentTypeError(true);\n      } else {\n        this.props.paymentTypeError(false);\n      }\n    }\n  }\n\n  closeModalSuccess() {\n    if (this.state.open) {\n      switch (this.props.buttonType) {\n        case \"Deposit\":\n          this.logDeposit();\n          break;\n\n        case \"Donate\":\n          this.logDonate();\n          break;\n\n        case \"Withdraw\":\n          this.logWithdraw();\n          break;\n\n        default:\n          console.log(this.props.paymentType);\n          break;\n      }\n    }\n\n    this.setState({\n      open: false\n    });\n    this.props.handleHideErrorMessage();\n    console.log(this.props.buttonType + \" Submit Modal Close\");\n  }\n\n  closeModal() {\n    this.setState({\n      open: false\n    });\n    this.props.handleHideErrorMessage();\n    console.log(this.props.buttonType + \" Submit Modal Cancel\");\n  }\n\n  render() {\n    var b = typeof this.props.beforeTax == \"string\" ? parseFloat(this.props.beforeTax).toFixed(2) : this.props.beforeTax.toFixed(2);\n    var t = typeof this.props.tax == \"string\" ? parseFloat(this.props.tax).toFixed(2) : this.props.tax.toFixed(2);\n    var a = typeof this.props.afterTax == \"string\" ? parseFloat(this.props.afterTax).toFixed(2) : this.props.afterTax.toFixed(2);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"floats-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"submit-button\",\n      onClick: this.openModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 17\n      }\n    }, \"Submit\"), /*#__PURE__*/React.createElement(Popup, {\n      open: this.state.open,\n      closeOnDocumentClick: false,\n      onClose: this.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 21\n      }\n    }, \" \", this.props.buttonType, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"moneyInformation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 25\n      }\n    }, \"Amount: \", b), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 25\n      }\n    }, \"Processing Fee: \", t), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 25\n      }\n    }, \"Total Amount: \", a))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"action\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"floats-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"submit-button\",\n      onClick: this.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 25\n      }\n    }, \"Cancel\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"floats-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ThankYouModal, {\n      onConfirmModalClose: this.closeModalSuccess,\n      onMainClose: this.props.onMainClose,\n      buttonType: this.props.buttonType,\n      message: this.props.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 25\n      }\n    })))));\n  }\n\n}\n\nexport default SubmitModal;","map":{"version":3,"sources":["/home/ubuntu/Connor/WorkOSU/app/src/components/Modal/SubmitModal.js"],"names":["React","Component","Popup","ThankYouModal","AffordableClient","UserType","SubmitModal","constructor","props","logDonate","username","JSON","parse","sessionStorage","getItem","client","donateToHug","HUGName","afterTax","json","console","log","logDeposit","data","FormData","append","paymentType","paymentMethod","beforeTax","stripeTax","affordableTax","chargeID","setTimeout","alert","transactionStatus","timer","logWithdraw","bankID","accountID","getCustomBank","success","error","getStripeAccountID","id","transferjson","stripeTransfer","message","stripePayout","transactionID","today","Date","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","set","state","open","validAmount","openModal","bind","closeModal","closeModalSuccess","componentDidMount","amountStr","toString","shouldOpen","setState","buttonType","amountError","paymentMethodError","paymentTypeError","handleHideErrorMessage","render","b","parseFloat","toFixed","t","tax","a","onMainClose"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Popup from \"reactjs-popup\";\n\nimport ThankYouModal from \"./ThankYouModal\";\nimport {AffordableClient} from \"affordable-client\";\nimport \"./scss/modal.scss\";\nimport \"../../styles/buttons.css\";\nimport { UserType } from \"affordable-shared-models\";\n\nclass SubmitModal extends Component{\n    constructor(props){\n        super(props);\n        this.client = new AffordableClient();\n        this.state = {\n            open:false,\n            validAmount: false,\n        };\n\n        this.openModal = this.openModal.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.closeModalSuccess = this.closeModalSuccess.bind(this);\n\n        this.logDeposit = this.logDeposit.bind(this);\n        this.logDonate = this.logDonate.bind(this);\n        // this.logWithdraw = this.logWithdraw.bind(this);\n    }\n\n       // Do this stuff after page loads\n       async componentDidMount() {\n        // checkTransaction every 5 secs\n     //   this.checkTransaction=setInterval(() => this.checkTransactionStatus(this.state.chargeID), 3000);\n \n    }\n\n//     componentWillUnmount() {\n//         // Stop checking transaction \n//         clearInterval(this.checkTransaction);\n//   }\n\n    logDonate = async () => {\n        var username = JSON.parse(sessionStorage.getItem('userInfo')).username;\n        var json = await this.client.donateToHug(username, this.props.HUGName, this.props.afterTax);\n        console.log(\"Inserted donation\");\n\n        // const data = new FormData();\n        // data.append(\"username\", JSON.parse(sessionStorage.getItem('userInfo')).username);\n        // data.append(\"HUGName\", this.props.HUGName);\n        // data.append(\"amount\", this.props.afterTax);\n        // console.log(JSON.parse(sessionStorage.getItem('userInfo')).username,this.props.HUGName);\n        // try {\n        //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/transferFundFromDonorToHUG\", {\n        //         method: \"POST\",\n        //         body: data\n        //     });\n        //     if (!response.ok) {\n        //         throw Error(response.statusText);\n        //     }\n        //     const json = await response.json();\n        //     console.log(\"Inserted donation\");\n        // } catch (error) {\n        //     console.log(error);\n        // }\n    }\n\n    logDeposit = async () => {\n        const data = new FormData();\n        data.append(\"username\", JSON.parse(sessionStorage.getItem('userInfo')).username);\n        data.append(\"paymentType\",this.props.paymentType);\n        data.append(\"paymentMethod\",this.props.paymentMethod);\n        data.append(\"amountToCharge\",this.props.beforeTax);\n        data.append(\"amountToDeposit\",this.props.afterTax);\n        data.append(\"stripeFee\",this.props.stripeTax);\n        data.append(\"managementFee\",this.props.affordableTax);\n\n        var username = JSON.parse(sessionStorage.getItem('userInfo')).username;\n        var json = await this.client.donateToHug(username, this.props.paymentType, \n            this.props.paymentMethod,this.props.beforeTax, this.props.afterTax,\n            this.props.stripeTax, this.props.affordableTax);\n        var chargeID=json.chargeID;\n        console.log(\"chargeID is \"+chargeID)\n\n        console.log(this.props.paymentType,this.props.paymentMethod,this.props.afterTax);\n\n        setTimeout( async function  timer(){\n            var json = await this.client.donateToHug(username, chargeID, \"Deposit\");\n            alert(\"Transaction Status is \"+ json.transactionStatus);\n\n        }, 5000);\n\n        // try {\n        //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/deposit\", {\n        //         method: \"POST\",\n        //         body: data\n        //     });\n        //     if (!response.ok) {\n        //         throw Error(response.statusText);\n        //     }\n        //     const json = await response.json();\n        //     var chargeID=json.chargeID;\n        //     console.log(\"chargeID is \"+chargeID)\n      \n        //     setTimeout( async function  timer(){\n        //         const data2 = new FormData();\n        //         data2.append(\"username\", JSON.parse(sessionStorage.getItem('userInfo')).username);\n        //         data2.append(\"chargeID\", chargeID);\n\n        //         const response2 =  await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/transaction/depositStatus\", {\n        //             method: \"POST\",\n        //             body: data2\n        //         });\n\n        //         if (!response2.ok) {\n        //             throw Error(response2.statusText);\n        //         }\n        //         const json2 =await  response2.json();\n        //         alert(\"Transaction Status is \"+json2.transactionStatus);\n        //     }, 5000 );\n            \n        // } catch (error) {\n        //     console.log(error);\n        // }\n    }\n    \n\n    logWithdraw = async () => {\n        var username = JSON.parse(sessionStorage.getItem('userInfo')).username;\n        var bankID = null;\n        var accountID = null;\n\n        const data= new FormData();\n        data.append(\"username\", JSON.parse(sessionStorage.getItem('userInfo')).username);\n        data.append(\"paymentType\",this.props.paymentType);\n        data.append(\"paymentMethod\",this.props.paymentMethod);\n        data.append(\"amount\", (this.props.afterTax * 100));\n        console.log(this.props.paymentType + \" \" + this.props.paymentMethod + \" \" +this.props.afterTax);\n\n        var json = await this.client.getCustomBank(data);\n        if(json.success == \"No User Found\") {\n            console.error(\"Error: Custom Account Bank Account Not Found\");\n            return;\n        } else {\n            console.log(\"Account Found: \" + json.accountID);\n            data.append(\"bankID\", json.accountID);\n        }\n\n        // fetches the user's connected bank account\n        // try {\n        //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/getCustomBank\", {\n        //         method: \"POST\",\n        //         body: data\n        //     });\n        //     if (!response.ok) {\n        //         throw Error(response.statusText);\n        //     }\n        //     const json = await response.json();\n\n        //     if(json.success == \"No User Found\") {\n        //         console.error(\"Error: Custom Account Bank Account Not Found\");\n        //         return;\n        //     } else {\n        //         console.log(\"Account Found: \" + json.accountID);\n        //         data.append(\"bankID\", json.accountID);\n        //     }\n        // } catch (error) {\n        //     alert(\"Withdraw Failed\")\n        //     console.log(error);\n        //     return;\n        // }\n\n        // fetches the user's connected bank account\n        var json = await this.client.getStripeAccountID(username, \"0\");\n        if(json.success == \"No Account Found\") {\n            console.error(\"Error: Custom Account Not Found\");\n            return\n        } else {\n            console.log(\"Account Found: \" + json.id);\n            data.append(\"accountID\", json.id);\n        }\n\n        // data.append(\"usertype\", \"0\");\n        // try {\n        //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/getCustomAccountID\", {\n        //         method: \"POST\",\n        //         body: data\n        //     });\n        //     if (!response.ok) {\n        //         throw Error(response.statusText);\n        //     }\n        //     const json = await response.json();\n\n        //     if(json.success == \"No Account Found\") {\n        //         console.error(\"Error: Custom Account Not Found\");\n        //         return\n        //     } else {\n        //         console.log(\"Account Found: \" + json.id);\n        //         data.append(\"accountID\", json.id);\n        //     }\n        // } catch (error) {\n        //     alert(\"Withdraw Failed\")\n        //     console.log(error);\n        //     return;\n        // }\n\n\n        // makes the transfer from the main account to Custom Account\n        var transferjson = null;\n        var json = await this.client.stripeTransfer(data);\n        if(json.success == \"STRIPE ERROR\") {\n            alert(\"Withdraw Failed\")\n            console.error(json.message);\n            return\n        } else {\n            console.log(json);\n            transferjson = json.message;\n        }\n        // try {\n        //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/transfer\", {\n        //         method: \"POST\",\n        //         body: data\n        //     });\n        //     if (!response.ok) {\n        //         throw Error(response.statusText);\n        //     }\n        //     const json = await response.json();\n\n        //     if(json.success == \"STRIPE ERROR\") {\n        //         alert(\"Withdraw Failed\")\n        //         console.error(json.message);\n        //         return\n        //     } else {\n        //         console.log(json);\n        //     }\n        // } catch (error) {\n        //     alert(\"Withdraw Failed\")\n        //     console.log(error);\n        //     return;\n        // }\n\n        // makes payout\n        // makes the transfer from the main account to Custom Account\n        \n        data.append(\"description\", \"Recipient AFFORDABLE Withdraw: Initiated by \" + JSON.parse(sessionStorage.getItem('userInfo')).username +\n        \" | Amount: $\" + this.props.afterTax);\n        \n        var json = await this.client.stripePayout(data, false);\n        if(json.success == \"STRIPE ERROR\") {\n            alert(\"Withdraw Failed\")\n            console.error(json.message);\n            return\n        } else {\n            console.log(json);\n            \n        }\n        // try {\n        //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/payout\", {\n        //         method: \"POST\",\n        //         body: data\n        //     });\n        //     if (!response.ok) {\n        //         throw Error(response.statusText);\n        //     }\n        //     const json = await response.json();\n\n        //     if(json.success == \"STRIPE ERROR\") {\n        //         alert(\"Withdraw Failed\")\n        //         console.error(json.message);\n        //         return\n        //     } else {\n        //         console.log(json);\n        //         payoutjson = json.message;\n        //     }\n        // } catch (error) {\n        //     alert(\"Withdraw Failed\")\n        //     console.log(error);\n        //     return;\n        // }\n\n        //Everything below for the rest of this function are database changes \n\n        // logs payout in externalTransactions\n        var transactionID = null;\n        var today = new Date();\n        var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate() + \" \" + today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n        data.append(\"transferID\", transferjson.id);\n        //data.append(\"status\", payoutjson.status);\n        data.append(\"timestamp\", date);\n        data.set(\"amount\", this.props.afterTax); //resets it back to original float\n\n        var json = await this.client.stripePayout(data, true);\n        transactionID = json.transactionID;\n        console.log(json);\n        // try {\n        //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/payoutUpdateTable\", {\n        //         method: \"POST\",\n        //         body: data\n        //     });\n        //     if (!response.ok) {\n        //         throw Error(response.statusText);\n        //     }\n        //     const json = await response.json();\n        //     transactionID = json.transactionID;\n        //     console.log(json);\n        // } catch (error) {\n        //     alert(\"Withdraw Failed\")\n        //     console.log(error);\n        //     return;\n        // }\n        /*\n        data.append(\"fee_amount\", (this.props.beforeTax-this.props.afterTax)*100);\n        try {\n            const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/affordablePayoutFee\", {\n                method: \"POST\",\n                body: data\n            });\n            if (!response.ok) {\n                throw Error(response.statusText);\n            }\n            const json = await response.json();\n            console.log(json);\n        } catch (error) {\n            alert(\"Fee Payout Failed\")\n            console.log(error);\n            return;\n        }\n        */\n\n        // logs fee in fees table\n        data.append(\"fee\", (this.props.beforeTax-this.props.afterTax))\n        data.append(\"transactionID\", transactionID);\n        /*\n        try {\n            const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/payoutUpdateFee\", {\n                method: \"POST\",\n                body: data\n            });\n            if (!response.ok) {\n                throw Error(response.statusText);\n            }\n            const json = await response.json();\n            console.log(json);\n            alert(\"Payment Successful!\");\n        } catch (error) {\n            alert(\"Withdraw Failed\")\n            console.log(error);\n            return;\n        }\n        */\n\n        \n    }\n\n    openModal(){\n        \n        let amountStr = typeof this.props.beforeTax === \"number\" ? this.props.beforeTax.toString() : this.props.beforeTax;\n        if(this.props.shouldOpen && this.props.paymentMethod != \"--\"){\n            this.setState({open: true});\n            console.log(this.props.buttonType + \" Submit Modal Open\");\n        }\n        else{\n            console.log(\"Invalid input\");\n            if(!(this.props.shouldOpen)){\n                console.log(\"invalid \" + amountStr);\n                this.props.amountError(true);\n            }\n            else{\n                console.log(\"valid \" + amountStr);\n                this.props.amountError(false);\n            }\n        }\n\n        if(this.props.buttonType != \"Donate\"){\n            if(this.props.paymentMethod === \"--\"){\n                this.props.paymentMethodError(true);\n            }\n            else{\n                this.props.paymentMethodError(false);\n            }\n    \n            if(this.props.paymentType === \"--\"){    \n                this.props.paymentTypeError(true);\n            }\n            else{\n                this.props.paymentTypeError(false);\n            }\n        }        \n    }\n\n    closeModalSuccess(){\n        if(this.state.open){\n            switch(this.props.buttonType){\n                case \"Deposit\":\n                    this.logDeposit();\n                    break;\n                case \"Donate\":\n                    this.logDonate();\n                    break;\n                case \"Withdraw\":\n                     this.logWithdraw();\n                     break;\n                default:\n                    console.log(this.props.paymentType);\n                    break;\n            }\n        }\n\n        this.setState({open: false});\n        this.props.handleHideErrorMessage();\n\n        console.log(this.props.buttonType + \" Submit Modal Close\");\n    }\n\n    closeModal(){\n        this.setState({open: false});\n        this.props.handleHideErrorMessage();\n\n        console.log(this.props.buttonType + \" Submit Modal Cancel\");\n    }\n\n    render(){\n        let b = (typeof this.props.beforeTax) == \"string\" ? parseFloat(this.props.beforeTax).toFixed(2) : this.props.beforeTax.toFixed(2);\n        let t = (typeof this.props.tax) == \"string\" ? parseFloat(this.props.tax).toFixed(2) : this.props.tax.toFixed(2);\n        let a = (typeof this.props.afterTax) == \"string\" ? parseFloat(this.props.afterTax).toFixed(2) : this.props.afterTax.toFixed(2);\n\n        return (\n            <div className=\"floats-left\">\n                <button className=\"submit-button\" onClick={this.openModal}>\n                    Submit\n                </button>\n                <Popup\n                  open={this.state.open}\n                  closeOnDocumentClick = {false}\n                  onClose={this.closeModal}>\n\n                    <div className=\"header\"> {this.props.buttonType} </div>\n                    <div className=\"content\">\n                    {/* Show the information of Amount going to be added to account*/}\n                    <div className=\"moneyInformation\">\n                        <p className=\"info\">Amount: {b}</p>\n                        <p className=\"info\">Processing Fee: {t}</p>\n                        <p className=\"info\">Total Amount: {a}</p>\n                    </div>\n                    </div>\n                    <div className=\"action\">\n                        <div className=\"floats-right\">\n                        {/*Cancel the transaction*/}\n                        <button\n                          className=\"submit-button\"\n                          onClick={this.closeModal}>\n                            Cancel\n                        </button>\n                        </div>\n                        <div className=\"floats-right\">\n                    {/* Confirm the transaction */}\n                        <ThankYouModal\n                          onConfirmModalClose={this.closeModalSuccess}\n                          onMainClose={this.props.onMainClose}\n                          buttonType={this.props.buttonType}\n                          message={this.props.message} />\n                          </div>\n                    </div>\n                </Popup>\n            </div>\n        );\n    }\n}\n\nexport default SubmitModal;\n"]},"metadata":{},"sourceType":"module"}