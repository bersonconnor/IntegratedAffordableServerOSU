{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Connor/Demo_OSU_Filemanager/app/src/pages/AuthPages/Login/index.tsx\";\nimport React, { Component } from \"react\";\nimport swal from \"sweetalert\";\nimport TextInput from \"../../../components/TextInput/index\";\nimport \"./scss/login.scss\";\nimport { UserType } from \"affordable-shared-models\";\nimport { ValidateTwoFactorComponent } from \"../../../components/TwoFactor/TwoFactor\";\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleValidateLoginCredentials = ev => {\n      ev.preventDefault();\n      var data = new FormData();\n      var name = document.getElementById(\"username\").value;\n      var pass = document.getElementById(\"password\").value;\n      data.append(\"username\", name);\n      data.append(\"password\", pass);\n      this.setState({\n        username: name\n      });\n      this.props.client.login(name, pass).then(resData => {\n        console.log(\"login resData: \", resData); //this.getEmail(name);\n\n        if (typeof resData.userInfo !== 'undefined') {\n          // Check if return type is LoginResponse\n          this.props.setUserInfo(resData.userInfo);\n\n          if (resData.userInfo.twoFactor) {\n            console.log(\"requires two fact\");\n            this.setState({\n              requiresTwoFactor: true\n            });\n          } else {\n            this.props.userHasAuthenticated(true);\n            this.loginRouting(resData.userInfo);\n          }\n        } else if (typeof resData.isValidUsername !== 'undefined') {\n          // Check if return type is InvalidLoginResponse\n          console.log(resData);\n\n          if (!resData.isValidUsername) {\n            swal(\"Unable to log you in\", \"Your username does not exist.\", \"error\");\n          } else if (!resData.isValidPassword) {\n            swal(\"Unable to log you in\", \"Your password is not correct.\", \"error\");\n          } else if (resData.isAdmin && !resData.isApprovedAdmin) {\n            swal(\"Unable to log you in\", \"Your Admin registration request has not been approved yet.\", \"error\");\n          } else if (resData.isDisabled) {\n            swal(\"Unable to log you in\", \"Your account is disabled. Please contact an admin.\", \"error\");\n          } else {\n            swal(\"Unable to log you in\", \"An internal error occured, please try again later.\", \"error\");\n          }\n        }\n      }).catch(resp => {\n        console.log(\"Error code returned\");\n        console.log(resp);\n        swal(\"Unable to log you in\", \"Internal server error.\", \"error\");\n      });\n    };\n\n    this.getEmail = name => {\n      var data = new FormData();\n      data.append(\"username\", name);\n      console.log(\"checking for username \", name);\n      this.props.client.getPrimaryEmail(name).then(email => {\n        this.setState({\n          email: email\n        });\n      }).catch(e => console.log(e));\n    };\n\n    this.state = {\n      username: \"\",\n      deactivate: null,\n      email: \"\",\n      QRState: \"\",\n      requiresTwoFactor: false\n    };\n    this.handleValidateTwoFactor = this.handleValidateTwoFactor.bind(this);\n  } //function: validates two factor code from backend for users opting for two factor\n  //Convert to TS\n\n\n  handleValidateTwoFactor() {\n    // const data = new FormData();\n    var username = document.getElementById(\"username\").value;\n    var token = document.getElementById(\"token\").value;\n    this.setState({\n      QRState: \"true\"\n    });\n    var GoogleAuthOpt = this.state.QRState; //   data.append(\"token\", token);\n    //   data.append(\"username\", name);\n    //   data.append(\"GoogleAuth\", GoogleAuthOpt);\n    //   fetch(\"http://localhost:4000/authentication/two-factor/username\", {\n    //     method: \"POST\",\n    //     body: data\n    //   })\n    //     .then(response => response.json())\n    //     .then(response => {\n    //       response.verified ? this.showAlertSucc2() : this.showAlertFail();\n    //     });\n    // };\n\n    this.props.client.checkTwoFactorByAgainstUsername(username, token, \"true\").then(res => {\n      console.log(JSON.stringify(res));\n\n      if (res.verified == true) {\n        this.props.userHasAuthenticated(true);\n      } else {\n        this.showAlertFail();\n      }\n    });\n  }\n\n  showAlertSucc2() {\n    swal(\"Success!\", \"Two factor code validated, you've been logged in.\", \"success\");\n    var name = document.getElementById(\"username\").value;\n    this.props.userHasAuthenticated(true); // this.props.setUserName(name);\n    // this.setLastActivity(name);\n\n    this.props.history.push(\"/application\");\n  } // upon failure\n\n\n  showAlertFail() {\n    alert(\"Please Try Again\");\n  } //Validate credentials from backend\n\n\n  loginRouting(info) {\n    if (info.userType === UserType.ADMIN) {\n      // Route to Dashboard\n      this.props.history.push(\"/dashboard\");\n    } else if (info.userType === UserType.RECIPIENT) {\n      // Route to Application\n      this.props.history.push(\"/application\");\n    } else if (info.userType === UserType.DONOR) {// Route to donor page\n      // Nothing here right now.\n    }\n  } // MAIN\n\n\n  render() {\n    // DECLARATION\n    var content;\n\n    if (this.state.requiresTwoFactor) {\n      content = /*#__PURE__*/React.createElement(ValidateTwoFactorComponent, {\n        handleValidateTwoFactor: this.handleValidateTwoFactor,\n        buttonText: \"Authenticate\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 7\n        }\n      });\n    }\n\n    ;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login__container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"App-login login__container\",\n      onSubmit: this.handleValidateLoginCredentials,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TextInput, {\n      labelText: \"Username\",\n      id: \"username\",\n      containerClassName: \"login__username-text-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      password: true,\n      labelText: \"Password\",\n      id: \"password\",\n      containerClassName: \"login__password-text-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Login\",\n      className: \"App-login-button login__login-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }\n    })), content);\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["/home/ubuntu/Connor/Demo_OSU_Filemanager/app/src/pages/AuthPages/Login/index.tsx"],"names":["React","Component","swal","TextInput","UserType","ValidateTwoFactorComponent","Login","constructor","props","handleValidateLoginCredentials","ev","preventDefault","data","FormData","name","document","getElementById","value","pass","append","setState","username","client","login","then","resData","console","log","userInfo","setUserInfo","twoFactor","requiresTwoFactor","userHasAuthenticated","loginRouting","isValidUsername","isValidPassword","isAdmin","isApprovedAdmin","isDisabled","catch","resp","getEmail","getPrimaryEmail","email","e","state","deactivate","QRState","handleValidateTwoFactor","bind","token","GoogleAuthOpt","checkTwoFactorByAgainstUsername","res","JSON","stringify","verified","showAlertFail","showAlertSucc2","history","push","alert","info","userType","ADMIN","RECIPIENT","DONOR","render","content"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport swal from \"sweetalert\";\nimport TextInput from \"../../../components/TextInput/index\";\nimport \"./scss/login.scss\";\nimport { AffordableClient, AffordableHttpError } from \"affordable-client\";\nimport { UserInfo, LoginResponse, UserType, InvalidLoginResponse } from \"affordable-shared-models\";\nimport Button from \"../../../components/Button\";\nimport speakeasy from \"speakeasy\";\nimport { ValidateTwoFactorComponent } from \"../../../components/TwoFactor/TwoFactor\";\n\ninterface LoginProps {\n  client: AffordableClient;\n  setUserInfo: (x: UserInfo) => void;\n  userHasAuthenticated: (x: boolean) => void;\n  history: any;\n}\n\ninterface LoginState {\n  username: string;\n  deactivate: boolean | null;\n  email: string;\n  userInfo?: UserInfo;\n  QRState: string |  Blob;\n  requiresTwoFactor: boolean;\n}\n\nclass Login extends Component<LoginProps, LoginState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      deactivate: null,\n      email: \"\",\n      QRState: \"\",\n      requiresTwoFactor: false\n    };\n    this.handleValidateTwoFactor = this.handleValidateTwoFactor.bind(this);\n  }\n\n   //function: validates two factor code from backend for users opting for two factor\n   //Convert to TS\n   handleValidateTwoFactor() {\n    \n    // const data = new FormData();\n    const username = (document.getElementById(\"username\")! as HTMLInputElement).value;\n    const token = (document.getElementById(\"token\")! as HTMLInputElement).value;\n    this.setState({QRState : \"true\"});\n    const GoogleAuthOpt = this.state.QRState;\n  //   data.append(\"token\", token);\n  //   data.append(\"username\", name);\n  //   data.append(\"GoogleAuth\", GoogleAuthOpt);\n  //   fetch(\"http://localhost:4000/authentication/two-factor/username\", {\n  //     method: \"POST\",\n  //     body: data\n  //   })\n  //     .then(response => response.json())\n  //     .then(response => {\n  //       response.verified ? this.showAlertSucc2() : this.showAlertFail();\n  //     });\n  // };\n  \n  this.props.client\n    .checkTwoFactorByAgainstUsername(username, token, \"true\")\n    .then(res => {\n      console.log(JSON.stringify(res))\n      if (res.verified == true) {\n        this.props.userHasAuthenticated(true);\n      } else {\n        this.showAlertFail();\n      }\n    });\n  }\n\n  showAlertSucc2() {\n    swal(\n      \"Success!\",\n      \"Two factor code validated, you've been logged in.\",\n      \"success\"\n    );\n    const name = (document.getElementById(\"username\")! as HTMLInputElement).value;\n\n    this.props.userHasAuthenticated(true);\n    // this.props.setUserName(name);\n    // this.setLastActivity(name);\n    this.props.history.push(\"/application\");\n  }\n\n  // upon failure\n  showAlertFail() {\n    alert(\"Please Try Again\");\n  }\n\n\n\n  //Validate credentials from backend\n  handleValidateLoginCredentials = ev => {\n    ev.preventDefault();\n\n    const data = new FormData();\n    const name = (document.getElementById(\"username\")! as HTMLInputElement)\n      .value;\n    const pass = (document.getElementById(\"password\")! as HTMLInputElement)\n      .value;\n    data.append(\"username\", name);\n    data.append(\"password\", pass);\n    this.setState({ username: name });\n\n    this.props.client\n      .login(name, pass)\n      .then(resData => {\n        console.log(\"login resData: \", resData)\n        //this.getEmail(name);\n\n        if (typeof resData.userInfo !== 'undefined') { // Check if return type is LoginResponse\n          this.props.setUserInfo(resData.userInfo);\n          if (resData.userInfo.twoFactor) {\n            console.log(\"requires two fact\")\n            this.setState({ requiresTwoFactor: true });\n          } else {\n            this.props.userHasAuthenticated(true);\n            this.loginRouting(resData.userInfo);\n          }\n        } else if (typeof resData.isValidUsername !== 'undefined') { // Check if return type is InvalidLoginResponse\n          console.log(resData)\n          if (!resData.isValidUsername) {\n            swal(\n              \"Unable to log you in\",\n              \"Your username does not exist.\",\n              \"error\"\n            );\n          } else if (!resData.isValidPassword) {\n            swal(\n              \"Unable to log you in\",\n              \"Your password is not correct.\",\n              \"error\"\n            );\n          } else if (resData.isAdmin && !resData.isApprovedAdmin) {\n            swal(\n              \"Unable to log you in\",\n              \"Your Admin registration request has not been approved yet.\",\n              \"error\"\n            );\n          } else if (resData.isDisabled) {\n              swal(\n                \"Unable to log you in\",\n                \"Your account is disabled. Please contact an admin.\",\n                \"error\"\n              );\n          } else {\n            swal(\n              \"Unable to log you in\",\n              \"An internal error occured, please try again later.\",\n              \"error\"\n            );\n          }\n        }\n      }).catch((resp: AffordableHttpError) => {\n        console.log(\"Error code returned\")\n        console.log(resp);\n        swal(\n          \"Unable to log you in\",\n          \"Internal server error.\",\n          \"error\"\n        );\n      })\n  };\n\n  getEmail = name => {\n    const data = new FormData();\n    data.append(\"username\", name);\n    console.log(\"checking for username \", name);\n    this.props.client\n      .getPrimaryEmail(name)\n      .then(email => {\n        this.setState({\n          email: email\n        });\n      })\n      .catch(e => console.log(e));\n  };\n\n  loginRouting(info: UserInfo) {\n    if (info.userType === UserType.ADMIN) {\n      // Route to Dashboard\n      this.props.history.push(\"/dashboard\");\n    } else if (info.userType === UserType.RECIPIENT) {\n        // Route to Application\n        this.props.history.push(\"/application\");\n    } else if (info.userType === UserType.DONOR) {\n      // Route to donor page\n      // Nothing here right now.\n    }\n  }\n  // MAIN\n  render() {\n    // DECLARATION\n    let content: React.ReactNode;\n    if (this.state.requiresTwoFactor) {\n    content = (\n      <ValidateTwoFactorComponent handleValidateTwoFactor={this.handleValidateTwoFactor} buttonText={\"Authenticate\"}/>\n    )};\n    return (\n      <div className=\"login__container\">\n        <form\n          className=\"App-login login__container\"\n          onSubmit={this.handleValidateLoginCredentials}\n        >\n          <TextInput\n            labelText=\"Username\"\n            id=\"username\"\n            containerClassName=\"login__username-text-input\"\n          />\n          <TextInput\n            password\n            labelText=\"Password\"\n            id=\"password\"\n            containerClassName=\"login__password-text-input\"\n          />\n          <input\n            type=\"submit\"\n            value=\"Login\"\n            className=\"App-login-button login__login-button\"\n          />\n        </form>\n        {content}\n      </div>\n    )\n  }\n}\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}