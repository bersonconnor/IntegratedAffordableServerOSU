{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Connor/Demo_OSU_Filemanager/app/src/pages/MainPages/HUGPages/HUGPagesRoutingContainer/PrescriptionAutosuggest.js\";\nimport React, { Component, Fragment } from \"react\";\nimport Autosuggest from \"react-autosuggest\";\n\nvar autoSuggestOptions = require(\"./prescription\"); // Teach Autosuggest how to calculate suggestions for any given input value.\n\n\nvar getSuggestions = value => {\n  var inputValue = value.trim().toLowerCase();\n  var inputLength = inputValue.length;\n  console.log(\"HERE\");\n  return inputLength === 0 ? [] : autoSuggestOptions.filter(lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue);\n}; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\n\nvar getSuggestionValue = suggestion => suggestion.name; // Use your imagination to render suggestions.\n\n\nvar renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 40\n  }\n}, suggestion.name);\n\nexport default class Example extends React.Component {\n  constructor(props) {\n    super(props); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n      this.state.value = newValue;\n      {\n        this.props.saveFunction(this.state.index, this.state.value);\n      }\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: this.props.value,\n      index: this.props.index,\n      suggestions: []\n    };\n  }\n\n  render() {\n    var _this$state = this.state,\n        value = _this$state.value,\n        suggestions = _this$state.suggestions; // Autosuggest will pass through all these props to the input.\n\n    var inputProps = {\n      placeholder: \"Type a prescription\",\n      value,\n      onChange: this.onChange\n    }; // Finally, render it!\n\n    return /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions.slice(0, 10),\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/ubuntu/Connor/Demo_OSU_Filemanager/app/src/pages/MainPages/HUGPages/HUGPagesRoutingContainer/PrescriptionAutosuggest.js"],"names":["React","Component","Fragment","Autosuggest","autoSuggestOptions","require","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","console","log","filter","lang","name","slice","getSuggestionValue","suggestion","renderSuggestion","Example","constructor","props","onChange","event","newValue","setState","state","saveFunction","index","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","render","inputProps","placeholder"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,mBAAxB;;AAEA,IAAMC,kBAAkB,GAAGC,OAAO,CAAC,gBAAD,CAAlC,C,CAEA;;;AACA,IAAMC,cAAc,GAAGC,KAAK,IAAI;AAC9B,MAAMC,UAAU,GAAGD,KAAK,CAACE,IAAN,GAAaC,WAAb,EAAnB;AACA,MAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,SAAOH,WAAW,KAAK,CAAhB,GACH,EADG,GAEHP,kBAAkB,CAACW,MAAnB,CACEC,IAAI,IAAIA,IAAI,CAACC,IAAL,CAAUP,WAAV,GAAwBQ,KAAxB,CAA8B,CAA9B,EAAiCP,WAAjC,MAAkDH,UAD5D,CAFJ;AAKD,CATD,C,CAWA;AACA;AACA;;;AACA,IAAMW,kBAAkB,GAAGC,UAAU,IAAIA,UAAU,CAACH,IAApD,C,CAEA;;;AACA,IAAMI,gBAAgB,GAAGD,UAAU,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAMA,UAAU,CAACH,IAAjB,CAAvC;;AAEA,eAAe,MAAMK,OAAN,SAAsBtB,KAAK,CAACC,SAA5B,CAAsC;AACnDsB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;AACA;AACA;AACA;AACA;;AAPiB,SAenBC,QAfmB,GAeR,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAyB;AAClC,WAAKC,QAAL,CAAc;AACZrB,QAAAA,KAAK,EAAEoB;AADK,OAAd;AAGA,WAAKE,KAAL,CAAWtB,KAAX,GAAmBoB,QAAnB;AACA;AAAC,aAAKH,KAAL,CAAWM,YAAX,CAAwB,KAAKD,KAAL,CAAWE,KAAnC,EAA0C,KAAKF,KAAL,CAAWtB,KAArD;AAA4D;AAC9D,KArBkB;;AAAA,SAyBnByB,2BAzBmB,GAyBW,CAAC;AAAEzB,MAAAA;AAAF,KAAD,KAAe;AAC3C,WAAKqB,QAAL,CAAc;AACZK,QAAAA,WAAW,EAAE3B,cAAc,CAACC,KAAD;AADf,OAAd;AAGD,KA7BkB;;AAAA,SAgCnB2B,2BAhCmB,GAgCW,MAAM;AAClC,WAAKN,QAAL,CAAc;AACZK,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KApCkB;;AAQjB,SAAKJ,KAAL,GAAa;AACXtB,MAAAA,KAAK,EAAE,KAAKiB,KAAL,CAAWjB,KADP;AAEXwB,MAAAA,KAAK,EAAE,KAAKP,KAAL,CAAWO,KAFP;AAGXE,MAAAA,WAAW,EAAE;AAHF,KAAb;AAKD;;AAyBDE,EAAAA,MAAM,GAAG;AAAA,sBACwB,KAAKN,KAD7B;AAAA,QACCtB,KADD,eACCA,KADD;AAAA,QACQ0B,WADR,eACQA,WADR,EAGP;;AACA,QAAMG,UAAU,GAAG;AACjBC,MAAAA,WAAW,EAAE,qBADI;AAEjB9B,MAAAA,KAFiB;AAGjBkB,MAAAA,QAAQ,EAAE,KAAKA;AAHE,KAAnB,CAJO,CAUP;;AACA,wBACE,oBAAC,WAAD;AACE,MAAA,WAAW,EAAEQ,WAAW,CAACf,KAAZ,CAAkB,CAAlB,EAAqB,EAArB,CADf;AAEE,MAAA,2BAA2B,EAAE,KAAKc,2BAFpC;AAGE,MAAA,2BAA2B,EAAE,KAAKE,2BAHpC;AAIE,MAAA,kBAAkB,EAAEf,kBAJtB;AAKE,MAAA,gBAAgB,EAAEE,gBALpB;AAME,MAAA,UAAU,EAAEe,UANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD;;AA5DkD","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport Autosuggest from \"react-autosuggest\";\n\nconst autoSuggestOptions = require(\"./prescription\");\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  console.log(\"HERE\");\n  return inputLength === 0\n    ? []\n    : autoSuggestOptions.filter(\n        lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue\n      );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.name;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => <div>{suggestion.name}</div>;\n\nexport default class Example extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      value: this.props.value,\n      index: this.props.index,\n      suggestions: []\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n    this.state.value = newValue;\n    {this.props.saveFunction(this.state.index, this.state.value)}\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: \"Type a prescription\",\n      value,\n      onChange: this.onChange\n    };\n\n    // Finally, render it!\n    return (\n      <Autosuggest\n        suggestions={suggestions.slice(0, 10)}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}