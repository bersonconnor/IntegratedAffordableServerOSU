{"ast":null,"code":"import _slicedToArray from \"/home/ubuntu/Connor/SandBoxOSU/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/ubuntu/Connor/SandBoxOSU/app/src/components/TextInput/index.js\";\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport \"./scss/text-input.scss\";\n\nvar TextInput = ({\n  containerClassName,\n  handleChangeByParent,\n  id,\n  labelText,\n  password,\n  parentValue\n}) => {\n  var _useState = useState(parentValue ? true : false),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasValue = _useState2[0],\n      setHasValue = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hasFocus = _useState4[0],\n      setHasFocus = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      componentValue = _useState6[0],\n      setComponentValue = _useState6[1];\n\n  var handleFocus = () => {\n    setHasFocus(true);\n  };\n\n  var handleBlur = () => {\n    setHasFocus(false);\n  };\n\n  var handleChange = event => {\n    parentValue !== undefined ? handleChangeByParent(event) : setComponentValue(event.target.value);\n    event.target.value ? setHasValue(true) : setHasValue(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(\"text-input__container\", containerClassName),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: classNames(\"text-input\", {\n      \"text-input--has-value\": hasValue\n    }),\n    onBlur: handleBlur,\n    onChange: handleChange,\n    onFocus: handleFocus,\n    id: id,\n    type: password ? \"password\" : \"text\",\n    value: parentValue || componentValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: id,\n    className: classNames(\"text-input__label\", {\n      \"text-input__label--inline\": !hasValue && !hasFocus,\n      \"text-input__label--float\": hasFocus || hasValue,\n      \"text-input__label--float--focused\": hasFocus\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, labelText));\n};\n\nTextInput.propTypes = {\n  /**\n   * Class to be applied to the container of TextInput.\n   * Typically used for resizing TextInput\n   */\n  containerClassName: PropTypes.string,\n\n  /**\n   * Logic that handles change event if state is kept\n   * in parent node\n   */\n  handleChangeByParent: PropTypes.func,\n\n  /**\n   * ID of the TextInput\n   * (NOT INTENDED FOR STYLING)\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Text shown by the label\n   */\n  labelText: PropTypes.string.isRequired,\n\n  /**\n   * If `true`, text typed in by user will be hidden\n   */\n  password: PropTypes.bool,\n\n  /**\n   * Value passed in if state is handled by parent\n   * node\n   */\n  parentValue: PropTypes.string\n};\nTextInput.defaultProps = {\n  containerClassName: undefined,\n  handleChangeByParent: () => {},\n  password: false,\n  parentValue: undefined\n};\nexport default TextInput;","map":{"version":3,"sources":["/home/ubuntu/Connor/SandBoxOSU/app/src/components/TextInput/index.js"],"names":["React","useState","PropTypes","classNames","TextInput","containerClassName","handleChangeByParent","id","labelText","password","parentValue","hasValue","setHasValue","hasFocus","setHasFocus","componentValue","setComponentValue","handleFocus","handleBlur","handleChange","event","undefined","target","value","propTypes","string","func","isRequired","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport \"./scss/text-input.scss\";\n\nconst TextInput = ({\n  containerClassName,\n  handleChangeByParent,\n  id,\n  labelText,\n  password,\n  parentValue\n}) => {\n  const [hasValue, setHasValue] = useState(parentValue ? true : false);\n  const [hasFocus, setHasFocus] = useState(false);\n  const [componentValue, setComponentValue] = useState(\"\");\n\n  const handleFocus = () => {\n    setHasFocus(true);\n  };\n\n  const handleBlur = () => {\n    setHasFocus(false);\n  };\n\n  const handleChange = event => {\n    parentValue !== undefined\n      ? handleChangeByParent(event)\n      : setComponentValue(event.target.value);\n\n    event.target.value ? setHasValue(true) : setHasValue(false);\n  };\n\n  return (\n    <div className={classNames(\"text-input__container\", containerClassName)}>\n      <input\n        className={classNames(\"text-input\", {\n          \"text-input--has-value\": hasValue\n        })}\n        onBlur={handleBlur}\n        onChange={handleChange}\n        onFocus={handleFocus}\n        id={id}\n        type={password ? \"password\" : \"text\"}\n        value={parentValue || componentValue}\n      />\n      <label\n        htmlFor={id}\n        className={classNames(\"text-input__label\", {\n          \"text-input__label--inline\": !hasValue && !hasFocus,\n          \"text-input__label--float\": hasFocus || hasValue,\n          \"text-input__label--float--focused\": hasFocus\n        })}\n      >\n        {labelText}\n      </label>\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /**\n   * Class to be applied to the container of TextInput.\n   * Typically used for resizing TextInput\n   */\n  containerClassName: PropTypes.string,\n  /**\n   * Logic that handles change event if state is kept\n   * in parent node\n   */\n  handleChangeByParent: PropTypes.func,\n  /**\n   * ID of the TextInput\n   * (NOT INTENDED FOR STYLING)\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Text shown by the label\n   */\n  labelText: PropTypes.string.isRequired,\n  /**\n   * If `true`, text typed in by user will be hidden\n   */\n  password: PropTypes.bool,\n  /**\n   * Value passed in if state is handled by parent\n   * node\n   */\n  parentValue: PropTypes.string\n};\n\nTextInput.defaultProps = {\n  containerClassName: undefined,\n  handleChangeByParent: () => {},\n  password: false,\n  parentValue: undefined\n};\n\nexport default TextInput;\n"]},"metadata":{},"sourceType":"module"}