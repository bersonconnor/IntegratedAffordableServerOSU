{"ast":null,"code":"import _slicedToArray from \"/home/ubuntu/Connor/Demo_OSU_Filemanager/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/home/ubuntu/Connor/Demo_OSU_Filemanager/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nvar _jsxFileName = \"/home/ubuntu/Connor/Demo_OSU_Filemanager/app/src/pages/AdminPages/Privileges/index.tsx\";\nimport React, { Component } from 'react';\nimport { Actions } from 'affordable-shared-models';\nimport { Redirect } from 'react-router-dom';\n\nclass AdminPrivilegesComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      admins: [],\n      filteredAdmins: [],\n      adminCanView: false,\n      adminPrivsChecked: false,\n      searchStr: \"\"\n    };\n    this.getAdminRows = this.getAdminRows.bind(this);\n  }\n\n  componentDidMount() {\n    //Check User is Authorized to View Page\n    this.checkAdminPrivileges();\n    this.props.client.getAllAdminPrivileges().then(res => {\n      console.log(\"admins: \", res);\n      res = res.filter(admin => admin.userid !== this.props.adminId && admin.username !== 'admin');\n      this.setState({\n        admins: res,\n        filteredAdmins: res\n      });\n    });\n    console.log(\"THIS ADMIN ID: \", this.props.adminId);\n    console.log(\"state:\", this.state);\n  }\n\n  checkAdminPrivileges() {\n    this.props.client.checkPrivilege(this.props.adminId, \"setPrivileges\").then(res => {\n      var canView = res;\n      this.setState({\n        adminCanView: canView,\n        adminPrivsChecked: true\n      });\n    });\n  }\n\n  updatePrivilegesArray(privilegesId, username, fieldName, value) {\n    var admin = this.state.admins.find(admin => admin.userid === privilegesId);\n\n    if (admin) {\n      admin[fieldName] = value; //this.updateAdminPrivilege(this.props.adminId, admin);\n\n      this.updateAdminPrivilege(this.props.adminId, username, admin, fieldName);\n    }\n  }\n\n  updateAdminPrivilege(adminId, username, privileges, privilegeName) {\n    this.props.client.setPrivileges(adminId, privileges).then(res => {\n      var newAdminPrivs = res;\n      var modifiedAdmin = this.state.admins.find(admin => admin.userid === res.userid);\n\n      if (modifiedAdmin) {\n        var modifiedAdminIndex = this.state.admins.indexOf(modifiedAdmin);\n        var adminsCopy = this.state.admins.slice(0);\n        adminsCopy.splice(modifiedAdminIndex, 1);\n        this.setState({\n          admins: [...adminsCopy, newAdminPrivs]\n        });\n        this.filterAdmins(this.state.searchStr);\n        console.log(this.state.admins);\n      } //Send Audit Trail Update\n\n\n      this.props.client.recordAuditTrails(this.props.admin.username, \"\".concat(Actions.UpdatePrivilege, \" \").concat(privilegeName, \" for: \").concat(username));\n    });\n  }\n\n  getPrivilegeButton(privilegesId, username, fieldName, value) {\n    if (value === \"true\") {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        onClick: e => this.updatePrivilegesArray(privilegesId, username, fieldName, false),\n        type: \"button\",\n        className: \"btn btn-danger adminButton\",\n        \"data-toggle\": \"tooltip\",\n        \"data-placement\": \"bottom\",\n        title: \"Revoke: \" + fieldName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }, \"Revoke\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        onClick: e => this.updatePrivilegesArray(privilegesId, username, fieldName, true),\n        type: \"button\",\n        className: \"btn btn-primary adminButton\",\n        \"data-toggle\": \"tooltip\",\n        \"data-placement\": \"bottom\",\n        title: \"Permit: \" + fieldName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }\n      }, \"Permit\");\n    }\n  }\n\n  getAdminRows() {\n    var adminRows = [];\n    var adminsCopy = this.state.filteredAdmins.slice(0).sort((a, b) => {\n      var returnValue = 0;\n      a.userid < b.userid ? returnValue = 1 : returnValue = -1;\n      return returnValue;\n    });\n\n    var _iterator = _createForOfIteratorHelper(adminsCopy.entries()),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            index = _step$value[0],\n            value = _step$value[1];\n\n        adminRows.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 21\n          }\n        }, value.userid), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 21\n          }\n        }, value.username), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 21\n          }\n        }, this.getPrivilegeButton(value.userid, value.username, \"allowRejectAdminRegistration\", value.allowRejectAdminRegistration.toString())), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 21\n          }\n        }, this.getPrivilegeButton(value.userid, value.username, \"revokeAdminAccess\", value.revokeAdminAccess.toString())), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 21\n          }\n        }, this.getPrivilegeButton(value.userid, value.username, \"setPrivileges\", value.setPrivileges.toString())), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 21\n          }\n        }, this.getPrivilegeButton(value.userid, value.username, \"resetAuthInfoNonAdmin\", value.resetAuthInfoNonAdmin.toString())), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 21\n          }\n        }, this.getPrivilegeButton(value.userid, value.username, \"managePaymentTransactions\", value.managePaymentTransactions.toString())), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 21\n          }\n        }, this.getPrivilegeButton(value.userid, value.username, \"messageUserEmailUser\", value.messageUserEmailUser.toString())), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 21\n          }\n        }, this.getPrivilegeButton(value.userid, value.username, \"deactivateUsers\", value.deactivateUsers.toString())), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 21\n          }\n        }, this.getPrivilegeButton(value.userid, value.username, \"createRemoveHugs\", value.createRemoveHugs.toString())), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 21\n          }\n        }, this.getPrivilegeButton(value.userid, value.username, \"createRemoveOrgs\", value.createRemoveOrgs.toString())), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 21\n          }\n        }, this.getPrivilegeButton(value.userid, value.username, \"editApplications\", value.editApplications.toString())), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 21\n          }\n        }, this.getPrivilegeButton(value.userid, value.username, \"readAuditTrail\", value.readAuditTrail.toString()))));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return adminRows;\n  }\n\n  filterAdmins(str) {\n    console.log(str);\n    var searchResults = this.state.admins.filter(admin => admin.username.includes(str));\n    this.setState({\n      filteredAdmins: searchResults,\n      searchStr: str\n    });\n  }\n\n  render() {\n    if (this.state.adminPrivsChecked) {\n      if (this.state.adminCanView) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"adminPageContainer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          name: \"search\",\n          placeholder: \"search\",\n          onChange: e => this.filterAdmins(e.target.value),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"table\", {\n          className: \"adminTable\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 29\n          }\n        }, \"ID\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 29\n          }\n        }, \"Username\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 29\n          }\n        }, \"Allow Reject Admin Requests\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 29\n          }\n        }, \"Revoke Admin Access\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 29\n          }\n        }, \"Set Admin Privileges\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 29\n          }\n        }, \"Reset Non-admin Auth Info\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 29\n          }\n        }, \"Manage Payment Trasactions\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 29\n          }\n        }, \"Message User Email User\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 29\n          }\n        }, \"Deactivate Users\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 29\n          }\n        }, \"Create Remove Hugs\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 29\n          }\n        }, \"Create Remove Orgs\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 29\n          }\n        }, \"Edit Applications\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 29\n          }\n        }, \"Read Audit Trail\")), this.getAdminRows()));\n      } else {\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: \"/NotFound\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 21\n          }\n        });\n      }\n    } else {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 20\n        }\n      }, \"Loading...\");\n    }\n  }\n\n}\n\nexport default AdminPrivilegesComponent;","map":{"version":3,"sources":["/home/ubuntu/Connor/Demo_OSU_Filemanager/app/src/pages/AdminPages/Privileges/index.tsx"],"names":["React","Component","Actions","Redirect","AdminPrivilegesComponent","constructor","props","state","admins","filteredAdmins","adminCanView","adminPrivsChecked","searchStr","getAdminRows","bind","componentDidMount","checkAdminPrivileges","client","getAllAdminPrivileges","then","res","console","log","filter","admin","userid","adminId","username","setState","checkPrivilege","canView","updatePrivilegesArray","privilegesId","fieldName","value","find","updateAdminPrivilege","privileges","privilegeName","setPrivileges","newAdminPrivs","modifiedAdmin","modifiedAdminIndex","indexOf","adminsCopy","slice","splice","filterAdmins","recordAuditTrails","UpdatePrivilege","getPrivilegeButton","e","adminRows","sort","a","b","returnValue","entries","index","push","allowRejectAdminRegistration","toString","revokeAdminAccess","resetAuthInfoNonAdmin","managePaymentTransactions","messageUserEmailUser","deactivateUsers","createRemoveHugs","createRemoveOrgs","editApplications","readAuditTrail","str","searchResults","includes","render","target"],"mappings":"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","sourcesContent":["import React, { Component, ReactElement } from 'react'\nimport { AffordableAdminClient } from 'affordable-client'\nimport { AdminPrivileges, UserInfo, Actions } from 'affordable-shared-models'\nimport { Dropdown } from 'react-bootstrap';\nimport NotFound from '../../ErrorPages/NotFound';\nimport { Redirect } from 'react-router-dom';\n\ninterface props {\n    client: AffordableAdminClient;\n    adminId: number;\n    admin: UserInfo;\n}\ninterface state {\n    admins: Array<AdminPrivileges>;\n    filteredAdmins: Array<AdminPrivileges>;\n    adminCanView: boolean;\n    adminPrivsChecked: boolean;\n    searchStr: string;\n}\n\nclass AdminPrivilegesComponent extends Component<props, state> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            admins: [],\n            filteredAdmins: [],\n            adminCanView: false,\n            adminPrivsChecked: false,\n            searchStr: \"\"\n        };\n        this.getAdminRows = this.getAdminRows.bind(this);\n    }\n\n    componentDidMount() {\n        //Check User is Authorized to View Page\n        this.checkAdminPrivileges();\n        \n        this.props.client.getAllAdminPrivileges().then((res: Array<AdminPrivileges>) => {\n            console.log(\"admins: \", res);\n            res = res.filter(admin => admin.userid !== this.props.adminId && admin.username !== 'admin')\n            this.setState({\n                admins: res,\n                filteredAdmins: res\n            });\n        });\n        console.log(\"THIS ADMIN ID: \", this.props.adminId);\n        console.log(\"state:\", this.state);\n    }\n\n    checkAdminPrivileges() {\n        this.props.client.checkPrivilege(this.props.adminId, \"setPrivileges\").then(res => {\n            let canView = res;\n            this.setState({\n                adminCanView: canView,\n                adminPrivsChecked: true\n            });\n        });\n    }\n\n    updatePrivilegesArray(privilegesId: number, username: string, fieldName: string, value: boolean) {\n        let admin = this.state.admins.find(admin => admin.userid === privilegesId);\n        if (admin) {\n            admin[fieldName] = value;\n            //this.updateAdminPrivilege(this.props.adminId, admin);\n            this.updateAdminPrivilege(this.props.adminId, username, admin, fieldName);\n        }\n    }\n\n    updateAdminPrivilege(adminId: number, username: string , privileges: AdminPrivileges, privilegeName: string) {\n        this.props.client.setPrivileges(adminId, privileges).then((res: AdminPrivileges) => {\n            let newAdminPrivs = res;\n            let modifiedAdmin = this.state.admins.find(admin => admin.userid === res.userid);\n            if (modifiedAdmin) {\n                let modifiedAdminIndex = this.state.admins.indexOf(modifiedAdmin);\n                let adminsCopy = this.state.admins.slice(0);\n                adminsCopy.splice(modifiedAdminIndex, 1);\n                this.setState({\n                    admins: [...adminsCopy, newAdminPrivs]\n                })\n                this.filterAdmins(this.state.searchStr);\n                console.log(this.state.admins);\n            }\n            //Send Audit Trail Update\n            this.props.client.recordAuditTrails(this.props.admin.username, `${Actions.UpdatePrivilege} ${privilegeName} for: ${username}`);\n        });\n    }\n\n    getPrivilegeButton(privilegesId: number, username: string, fieldName: string, value: string): JSX.Element {\n        if (value === \"true\") {\n            return (\n                <button \n                onClick={(e) => this.updatePrivilegesArray(privilegesId, username, fieldName, false)} \n                type=\"button\" \n                className=\"btn btn-danger adminButton\"\n                data-toggle=\"tooltip\" \n                data-placement=\"bottom\" \n                title={\"Revoke: \" + fieldName}>\n                    Revoke\n                </button>\n            )\n        } else {\n            return (\n                <button \n                onClick={(e) => this.updatePrivilegesArray(privilegesId, username, fieldName, true)} \n                type=\"button\" \n                className=\"btn btn-primary adminButton\"\n                data-toggle=\"tooltip\" \n                data-placement=\"bottom\" \n                title={\"Permit: \" + fieldName}>\n                    Permit\n                </button>\n            )\n        }\n    }\n\n    getAdminRows(): JSX.Element[] {\n        let adminRows: JSX.Element[] = [];\n        let adminsCopy = this.state.filteredAdmins.slice(0).sort((a,b) => {\n            let returnValue = 0;\n            a.userid < b.userid ? returnValue = 1 : returnValue = -1;\n            return returnValue;\n        });\n        for (let [index, value] of adminsCopy.entries()) {\n            adminRows.push(\n                <tr key={index}>\n                    <td>{value.userid}</td>\n                    <td>{value.username}</td>\n                    <td>{this.getPrivilegeButton(value.userid, value.username, \"allowRejectAdminRegistration\", value.allowRejectAdminRegistration.toString())}</td>\n                    <td>{this.getPrivilegeButton(value.userid, value.username, \"revokeAdminAccess\", value.revokeAdminAccess.toString())}</td>\n                    <td>{this.getPrivilegeButton(value.userid, value.username, \"setPrivileges\", value.setPrivileges.toString())}</td>\n                    <td>{this.getPrivilegeButton(value.userid, value.username, \"resetAuthInfoNonAdmin\", value.resetAuthInfoNonAdmin.toString())}</td>\n                    <td>{this.getPrivilegeButton(value.userid, value.username, \"managePaymentTransactions\", value.managePaymentTransactions.toString())}</td>\n                    <td>{this.getPrivilegeButton(value.userid, value.username, \"messageUserEmailUser\",  value.messageUserEmailUser.toString())}</td>\n                    <td>{this.getPrivilegeButton(value.userid, value.username, \"deactivateUsers\",  value.deactivateUsers.toString() )}</td>\n                    <td>{this.getPrivilegeButton(value.userid, value.username, \"createRemoveHugs\",  value.createRemoveHugs.toString())}</td>\n                    <td>{this.getPrivilegeButton(value.userid, value.username, \"createRemoveOrgs\",  value.createRemoveOrgs.toString())}</td>\n                    <td>{this.getPrivilegeButton(value.userid, value.username, \"editApplications\",  value.editApplications.toString())}</td>\n                    <td>{this.getPrivilegeButton(value.userid, value.username, \"readAuditTrail\", value.readAuditTrail.toString())}</td>\n                </tr>\n            )\n        }\n        return adminRows\n    }\n\n    filterAdmins(str: string): void {\n        console.log(str);\n        let searchResults = this.state.admins.filter(admin => admin.username.includes(str));\n        this.setState({\n            filteredAdmins: searchResults,\n            searchStr: str\n        });\n    }\n\n    render() {\n        if (this.state.adminPrivsChecked) {\n            if (this.state.adminCanView) {\n            return (\n                    <div className=\"adminPageContainer\">\n                        <input name=\"search\" placeholder=\"search\" onChange={(e) => this.filterAdmins(e.target.value)}/>\n                        <table className=\"adminTable\">\n                        <tr>\n                            <th>ID</th>\n                            <th>Username</th>\n                            <th>Allow Reject Admin Requests</th>\n                            <th>Revoke Admin Access</th>\n                            <th>Set Admin Privileges</th>\n                            <th>Reset Non-admin Auth Info</th>\n                            <th>Manage Payment Trasactions</th>\n                            <th>Message User Email User</th>\n                            <th>Deactivate Users</th>\n                            <th>Create Remove Hugs</th>\n                            <th>Create Remove Orgs</th>\n                            <th>Edit Applications</th>\n                            <th>Read Audit Trail</th>\n                        </tr>\n                        {this.getAdminRows()}\n                    </table>\n                </div>\n            )\n            } else {\n                return (\n                    <Redirect to=\"/NotFound\"/>\n                )\n            }\n        } else {\n            return <span>Loading...</span>\n        }\n    }\n}\n\nexport default AdminPrivilegesComponent;"]},"metadata":{},"sourceType":"module"}