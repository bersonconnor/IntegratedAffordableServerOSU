{"ast":null,"code":"import _regeneratorRuntime from \"/home/ubuntu/Connor/WorkOSU/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _readOnlyError from \"/home/ubuntu/Connor/WorkOSU/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\nimport _asyncToGenerator from \"/home/ubuntu/Connor/WorkOSU/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/ubuntu/Connor/WorkOSU/app/src/components/Modal/WithdrawButton.js\";\nimport React, { Component } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { Button } from \"react-bootstrap\";\nimport SubmitModal from \"./SubmitModal\";\nimport swal from \"sweetalert\";\nimport { AffordableClient } from \"affordable-client\";\nimport \"./scss/modal.scss\";\nimport \"../../styles/buttons.css\";\n/*INSERT */\n\n/* Need to consider when user is recipient or donor on issue of taxes\n* Will need:\n* \"debit\" attribute - an array of saved debit card\n* \"user\" attribute - which can be \"donor\" represent as a 0 or \"recipient\" represent as a 1\n*/\n\nclass WithdrawButton extends Component {\n  constructor(props) {\n    super(props);\n    this.REACT_APP_AF_BACKEND_URL = process.env.REACT_APP_AF_BACKEND_URL || window.REACT_APP_AF_BACKEND_URL;\n    this.client = new AffordableClient();\n    this.state = {\n      userBalance: 100,\n      open: false,\n      paymentType: \"--\",\n      paymentMethod: \"--\",\n      paymentMethodList: [],\n      beforeTax: 0.0,\n      tax: 0,\n      afterTax: 0,\n      stripeTax: 0,\n      affordableTax: 0,\n      showAmountError: false,\n      showPaymentMethodError: false,\n      showPaymentTypeError: false,\n      paymentMethodDisabled: true,\n      fieldColor: \"#FFFFFF\",\n      buttonStyle: props.buttonStyle,\n      buttonText: props.buttonText\n    };\n    this.handleChangePaymentType = this.handleChangePaymentType.bind(this);\n    this.handleChangePaymentMethod = this.handleChangePaymentMethod.bind(this);\n    this.handleChangeAmount = this.handleChangeAmount.bind(this);\n    this.handleAmountErrorMessage = this.handleAmountErrorMessage.bind(this);\n    this.handlePaymentMethodErrorMessage = this.handlePaymentMethodErrorMessage.bind(this);\n    this.handlePaymentTypeErrorMessage = this.handlePaymentTypeErrorMessage.bind(this);\n    this.handleHideErrorMessage = this.handleHideErrorMessage.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.closeModalSuccess = this.closeModalSuccess.bind(this);\n  }\n\n  openModal() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var username, usertype, data, accountID, connectedAccountID, requirementsDue, json, requirements, balance, url;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log(\"Withdraw Modal Open\");\n              /**\n               * ********************************\n               * Stripe Connect Onboarding Checks\n               */\n\n              username = JSON.parse(sessionStorage.getItem('userInfo')).username;\n              usertype = null;\n              data = new FormData();\n              data.append(\"username\", username); // gets the usertype\n\n              _context2.next = 7;\n              return fetch(_this.REACT_APP_AF_BACKEND_URL + \"/profile/get-user-type\", {\n                method: \"POST\",\n                body: data\n              }).then(response => {\n                if (response.ok) {\n                  return response.json();\n                } else {\n                  alert(\"Unable to get user type\");\n                }\n              }).then(resData => {\n                usertype = (_readOnlyError(\"usertype\"), (_readOnlyError(\"usertype\"), resData.usertype));\n              });\n\n            case 7:\n              data.append(\"usertype\", usertype);\n              accountID = null;\n              connectedAccountID = null;\n              requirementsDue = false;\n              _context2.next = 13;\n              return _this.client.getStripeAccountID(username, usertype);\n\n            case 13:\n              json = _context2.sent;\n              console.log(json);\n\n              if (json.success === \"No Account Found\") {\n                alert(\"Error: No Withdraw Account Found!\");\n              } else {\n                accountID = json.id;\n                console.log(\"Account Found: \" + accountID);\n              } // first attempts to get the Stripe Connected Account ID of the current user\n              // try {\n              //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/getCustomAccountID\", {\n              //         method: \"POST\",\n              //         body: data\n              //     });\n              //     if(!response.ok) {\n              //         console.error(response.statusText);\n              //         throw Error(response.statusText);\n              //     }\n              //     const json = await response.json();\n              //     // if no Connect Account was found, then send an alert\n              //     // Though, this is not possible since both recipients and donors are given one\n              //     if(json.success === \"No Account Found\") {\n              //         alert(\"Error: No Withdraw Account Found!\");\n              //     } else {\n              //         accountID = json.id;\n              //         console.log(\"Account Found: \" + accountID);\n              //         data.append(\"accountID\", accountID);\n              //     }\n              // } catch(error) {\n              //     console.error(error);\n              // }\n              // checks if account needs to be verified\n\n\n              _context2.next = 18;\n              return _this.client.getConnectedRequirements(username, usertype, accountID);\n\n            case 18:\n              json = _context2.sent;\n\n              if (!(json.success === \"STRIPE ERROR\")) {\n                _context2.next = 23;\n                break;\n              }\n\n              console.error(json.message);\n              _context2.next = 34;\n              break;\n\n            case 23:\n              if (!(json.status === \"None\")) {\n                _context2.next = 27;\n                break;\n              }\n\n              requirementsDue = false;\n              _context2.next = 32;\n              break;\n\n            case 27:\n              requirements = json.requirements;\n\n              if (!(requirements[0] === \"external_account\")) {\n                _context2.next = 31;\n                break;\n              }\n\n              alert(\"Please Add a Bank Account in Settings/Banking Information\");\n              return _context2.abrupt(\"return\");\n\n            case 31:\n              requirementsDue = true;\n\n            case 32:\n              connectedAccountID = json.id;\n              console.log(\"Account Found: \" + connectedAccountID);\n\n            case 34:\n              if (!(requirementsDue === false)) {\n                _context2.next = 44;\n                break;\n              }\n\n              _this.setState({\n                open: true,\n                paymentType: \"--\",\n                paymentMethod: \"--\",\n                beforeTax: 0.0,\n                showAmountError: false,\n                showPaymentMethodError: false,\n                showPaymentTypeError: false,\n                paymentMethodDisabled: true,\n                fieldColor: \"#FFFFFF\"\n              });\n\n              _context2.next = 38;\n              return _this.client.getStripeAccountBalance(username, usertype, accountID);\n\n            case 38:\n              json = _context2.sent;\n              balance = json.accountAmount;\n\n              _this.setState({\n                userBalance: balance\n              });\n\n              console.log(\"Got the user balance\"); // try {\n              //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/getAccountBalance\", {\n              //         method: \"POST\",\n              //         body: data\n              //     });\n              //     if (!response.ok) {\n              //         console.log(\"empty\");\n              //         throw Error(response.statusText);\n              //     }\n              //     const json = await response.json();\n              //     const balance =json.accountAmount;\n              //     this.setState({\n              //         userBalance: balance\n              //     })\n              //     console.log(\"Got the user balance\")\n              // } catch (error) {\n              // console.log(error);\n              // }\n\n              _context2.next = 46;\n              break;\n\n            case 44:\n              url = window.location.href; // data.append(\"successURL\",window.location.href);\n              // data.append(\"failureURL\", window.location.href);\n              //alert(\"To enable withdraws, we need more information. Redirecting to form...\");\n\n              swal({\n                title: \"To enable withdraws, we need more information. Proceed to information form?\",\n                buttons: {\n                  cancel: \"Cancel\",\n                  proceed: {\n                    text: \"Proceed\",\n                    value: \"proceed\"\n                  }\n                }\n              }).then( /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {\n                  var json;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.t0 = value;\n                          _context.next = _context.t0 === \"proceed\" ? 3 : 8;\n                          break;\n\n                        case 3:\n                          _context.next = 5;\n                          return _this.client.onboardingInfoReq(username, usertype, accountID, url);\n\n                        case 5:\n                          json = _context.sent;\n\n                          if (json.success === \"STRIPE ERROR\") {\n                            alert(\"Can't reach Stripe\");\n                            console.error(json.message);\n                          } else {\n                            console.log(json.message);\n                            window.location.replace(json.message.url);\n                          } // try {\n                          //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/onboardingInfoRequest\", {\n                          //         method: \"POST\",\n                          //         body: data\n                          //     });\n                          //     if(!response.ok) {\n                          //         throw Error(response.statusText);\n                          //     }\n                          //     const json = await response.json();\n                          //     if(json.success === \"STRIPE ERROR\") {\n                          //         alert(\"Can't reach Stripe\")\n                          //         console.error(json.message);\n                          //     } else {\n                          //         console.log(json.message)\n                          //         window.location.replace(json.message.url);\n                          //     }\n                          // } catch(error) {\n                          //     console.error(error);\n                          // }\n\n\n                          return _context.abrupt(\"break\", 9);\n\n                        case 8:\n                          return _context.abrupt(\"break\", 9);\n\n                        case 9:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n\n            case 46:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n\n  closeModalSuccess() {\n    this.setState({\n      open: false\n    });\n    console.log(\"Withdraw Modal Close\");\n  }\n\n  closeModal() {\n    this.setState({\n      open: false\n    });\n    console.log(\"Withdraw Modal Cancel\");\n  }\n\n  handleChangePaymentType(e) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var username, json, cardList, method, i;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _this2.setState({\n                paymentType: e.target.value,\n                paymentMethodList: []\n              });\n\n              username = JSON.parse(sessionStorage.getItem('userInfo')).username;\n              _context3.next = 4;\n              return _this2.client.getPaymentMethod(username, false, true);\n\n            case 4:\n              json = _context3.sent;\n              cardList = json.bankList;\n              method = [];\n\n              for (i = 0; i < cardList.length; i++) {\n                method.push(cardList[i].bankName);\n              }\n\n              _this2.setState({\n                paymentMethodList: method,\n                paymentMethodDisabled: false\n              });\n\n              console.log(method); // const data = new FormData();\n              // data.append(\"username\", JSON.parse(sessionStorage.getItem('userInfo')).username);\n              // data.append(\"paymentType\",e.target.value);\n              // try {\n              //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/transaction/connectedBanks\", {\n              //         method: \"POST\",\n              //         body: data\n              //     });\n              //     if (!response.ok) {\n              //         throw Error(response.statusText);\n              //     }\n              //     const json = await response.json();\n              //     const cardList=json.bankList;\n              //     var  method=[];\n              //     for(var i=0; i<cardList.length;i++){\n              //         method.push(cardList[i].bankName);\n              //     }\n              //     this.setState({\n              //         paymentMethodList: method,\n              //         paymentMethodDisabled: false\n              //     })\n              //     console.log(method)\n              // } catch (error) {\n              // console.log(error);\n              // }\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  }\n\n  handleChangePaymentMethod(e) {\n    this.setState({\n      paymentMethod: e.target.value\n    });\n  }\n\n  handleChangeAmount(e) {\n    console.log(JSON.parse(sessionStorage.getItem('userInfo')).username);\n    var amountStr = typeof e.target.value === \"number\" ? e.target.value.toString() : e.target.value;\n\n    if (amountStr.match(\"^[0-9]+([.][0-9]{0,2})?$\") != null && parseFloat(amountStr) !== 0 && parseFloat(amountStr) <= this.state.userBalance) {\n      console.log(\"Valid Input: \" + e.target.value);\n      this.setState({\n        fieldColor: '#66f375',\n        beforeTax: parseFloat(amountStr),\n        tax: parseFloat(amountStr) * (this.state.stripeTax + this.state.affordableTax),\n        afterTax: parseFloat(amountStr) - parseFloat(amountStr) * (this.state.stripeTax + this.state.affordableTax)\n      });\n    } else {\n      console.log(\"Invalid Input: \" + e.target.value);\n      this.setState({\n        fieldColor: '#f36684',\n        beforeTax: amountStr\n      });\n    }\n\n    this.setState({\n      beforeTax: e.target.value,\n      tax: e.target.value * (this.state.stripeTax + this.state.affordableTax),\n      afterTax: e.target.value - e.target.value * (this.state.stripeTax + this.state.affordableTax)\n    });\n  }\n\n  handleAmountErrorMessage(e) {\n    this.setState({\n      showAmountError: e\n    });\n  }\n\n  handlePaymentMethodErrorMessage(e) {\n    this.setState({\n      showPaymentMethodError: e\n    });\n  }\n\n  handlePaymentTypeErrorMessage(e) {\n    this.setState({\n      showPaymentTypeError: e\n    });\n  }\n\n  handleHideErrorMessage() {\n    this.setState({\n      showAmountError: false,\n      showPaymentMethodError: false,\n      showPaymentTypeError: false\n    });\n  }\n\n  render() {\n    var methodShow = this.state.paymentMethodList;\n    methodShow = methodShow.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 13\n        }\n      }, item);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.buttonStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 13\n      }\n    }, this.state.buttonStyle === undefined ? /*#__PURE__*/React.createElement(Button, {\n      className: \"submit-button\",\n      onClick: this.openModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 21\n      }\n    }, this.state.buttonText === undefined ? \"Withdraw\" : this.state.buttonText) : /*#__PURE__*/React.createElement(Button, {\n      onClick: this.openModal,\n      style: this.state.buttonStyle,\n      block: true,\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 21\n      }\n    }, this.state.buttonText === undefined ? \"Withdraw\" : this.state.buttonText), /*#__PURE__*/React.createElement(Popup, {\n      open: this.state.open,\n      closeOnDocumentClick: false,\n      onClose: this.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"close\",\n      onClick: this.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 21\n      }\n    }, \"\\xD7\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 21\n      }\n    }, \" Withdraw \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 25\n      }\n    }, \"Payment Type:\\xA0\", /*#__PURE__*/React.createElement(\"select\", {\n      className: \"paymentType\",\n      id: \"paymentType\",\n      onChange: this.handleChangePaymentType,\n      value: this.state.paymentType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"--\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 33\n      }\n    }, \"--\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"BankAccount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 33\n      }\n    }, \"Bank Account\")), this.state.showPaymentTypeError ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 64\n      }\n    }, \"Please select a payment type\") : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 102\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 25\n      }\n    }, \"Payment Method: \\xA0\", /*#__PURE__*/React.createElement(\"select\", {\n      className: \"paymentMethod\",\n      id: \"paymentMethod\",\n      disabled: this.state.paymentMethodDisabled,\n      value: this.state.paymentMethod,\n      onChange: this.handleChangePaymentMethod,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"--\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 29\n      }\n    }, \"--\"), methodShow), this.state.showPaymentMethodError ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 66\n      }\n    }, \"Please select a payment method.\") : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 107\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 25\n      }\n    }, \"Amount:\\xA0\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"amountNumber\",\n      value: this.state.beforeTax,\n      style: {\n        backgroundColor: this.state.fieldColor\n      },\n      onChange: this.handleChangeAmount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 29\n      }\n    }), this.state.showAmountError ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 61\n      }\n    }, \"Please enter a valid amount.\") : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 99\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"floats-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"submit-button\",\n      onClick: this.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 25\n      }\n    }, \"Cancel\")), /*#__PURE__*/React.createElement(SubmitModal, {\n      usertype: this.props.usertype,\n      onMainClose: this.closeModalSuccess,\n      buttonType: \"Withdraw\",\n      beforeTax: this.state.beforeTax,\n      tax: this.state.tax,\n      afterTax: this.state.afterTax,\n      message: \"Your transaction is being processed. Thank you for using our service!!\",\n      shouldOpen: \"#66f375\" == this.state.fieldColor,\n      paymentType: this.state.paymentType,\n      paymentMethod: this.state.paymentMethod,\n      amountError: this.handleAmountErrorMessage,\n      paymentMethodError: this.handlePaymentMethodErrorMessage,\n      paymentTypeError: this.handlePaymentTypeErrorMessage,\n      handleHideErrorMessage: this.handleHideErrorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default WithdrawButton;","map":{"version":3,"sources":["/home/ubuntu/Connor/WorkOSU/app/src/components/Modal/WithdrawButton.js"],"names":["React","Component","Popup","Button","SubmitModal","swal","AffordableClient","WithdrawButton","constructor","props","REACT_APP_AF_BACKEND_URL","process","env","window","client","state","userBalance","open","paymentType","paymentMethod","paymentMethodList","beforeTax","tax","afterTax","stripeTax","affordableTax","showAmountError","showPaymentMethodError","showPaymentTypeError","paymentMethodDisabled","fieldColor","buttonStyle","buttonText","handleChangePaymentType","bind","handleChangePaymentMethod","handleChangeAmount","handleAmountErrorMessage","handlePaymentMethodErrorMessage","handlePaymentTypeErrorMessage","handleHideErrorMessage","openModal","closeModal","closeModalSuccess","console","log","username","JSON","parse","sessionStorage","getItem","usertype","data","FormData","append","fetch","method","body","then","response","ok","json","alert","resData","accountID","connectedAccountID","requirementsDue","getStripeAccountID","success","id","getConnectedRequirements","error","message","status","requirements","setState","getStripeAccountBalance","balance","accountAmount","url","location","href","title","buttons","cancel","proceed","text","value","onboardingInfoReq","replace","e","target","getPaymentMethod","cardList","bankList","i","length","push","bankName","amountStr","toString","match","parseFloat","render","methodShow","map","item","index","undefined","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport {Button} from \"react-bootstrap\";\nimport SubmitModal from \"./SubmitModal\";\nimport swal from \"sweetalert\";\nimport { AffordableClient } from \"affordable-client\";\n\nimport \"./scss/modal.scss\";\nimport \"../../styles/buttons.css\";/*INSERT */\n\n\n/* Need to consider when user is recipient or donor on issue of taxes\n* Will need:\n* \"debit\" attribute - an array of saved debit card\n* \"user\" attribute - which can be \"donor\" represent as a 0 or \"recipient\" represent as a 1\n*/\nclass WithdrawButton extends Component {\n\n    REACT_APP_AF_BACKEND_URL = process.env.REACT_APP_AF_BACKEND_URL || window.REACT_APP_AF_BACKEND_URL;\n\n    constructor(props){\n        super(props);\n        this.client = new AffordableClient();\n        this.state = {\n\n            userBalance: 100,\n            open: false,\n\n            paymentType: \"--\",\n            paymentMethod: \"--\",\n            paymentMethodList: [],\n\n            beforeTax: 0.0,\n            tax: 0,\n            afterTax: 0,\n            stripeTax: 0,\n            affordableTax: 0,\n\n            showAmountError: false,\n            showPaymentMethodError: false,\n            showPaymentTypeError: false,\n            paymentMethodDisabled: true,\n\n            fieldColor: \"#FFFFFF\",\n\n            buttonStyle: props.buttonStyle,\n            buttonText: props.buttonText\n        };\n\n        this.handleChangePaymentType = this.handleChangePaymentType.bind(this);\n        this.handleChangePaymentMethod = this.handleChangePaymentMethod.bind(this);\n        this.handleChangeAmount = this.handleChangeAmount.bind(this);\n        this.handleAmountErrorMessage = this.handleAmountErrorMessage.bind(this);\n        this.handlePaymentMethodErrorMessage = this.handlePaymentMethodErrorMessage.bind(this);\n        this.handlePaymentTypeErrorMessage = this.handlePaymentTypeErrorMessage.bind(this);\n        this.handleHideErrorMessage = this.handleHideErrorMessage.bind(this);\n\n        this.openModal = this.openModal.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.closeModalSuccess = this.closeModalSuccess.bind(this)\n    }\n\n\n    async openModal(){\n        console.log(\"Withdraw Modal Open\");\n        /**\n         * ********************************\n         * Stripe Connect Onboarding Checks\n         */\n        const username = JSON.parse(sessionStorage.getItem('userInfo')).username;\n        const usertype = null;\n\n        const data = new FormData();\n        data.append(\"username\", username);\n\n        // gets the usertype\n        await fetch(this.REACT_APP_AF_BACKEND_URL +\"/profile/get-user-type\", {\n            method: \"POST\",\n            body: data\n            })\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            } else {\n                alert(\"Unable to get user type\");\n            }\n         })\n        .then(resData => {\n            usertype = resData.usertype;\n        });\n\n        data.append(\"usertype\", usertype);\n\n        var accountID = null;\n        var connectedAccountID = null;\n        var requirementsDue = false;\n\n        var json = await this.client.getStripeAccountID(username, usertype);\n        console.log(json);\n        if(json.success === \"No Account Found\") {\n            alert(\"Error: No Withdraw Account Found!\");\n        } else {\n            accountID = json.id;\n            console.log(\"Account Found: \" + accountID);\n        }\n\n        // first attempts to get the Stripe Connected Account ID of the current user\n        // try {\n        //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/getCustomAccountID\", {\n        //         method: \"POST\",\n        //         body: data\n        //     });\n        //     if(!response.ok) {\n        //         console.error(response.statusText);\n        //         throw Error(response.statusText);\n        //     }\n\n        //     const json = await response.json();\n\n        //     // if no Connect Account was found, then send an alert\n        //     // Though, this is not possible since both recipients and donors are given one\n        //     if(json.success === \"No Account Found\") {\n        //         alert(\"Error: No Withdraw Account Found!\");\n        //     } else {\n        //         accountID = json.id;\n        //         console.log(\"Account Found: \" + accountID);\n\n        //         data.append(\"accountID\", accountID);\n        //     }\n\n        // } catch(error) {\n        //     console.error(error);\n        // }\n\n        // checks if account needs to be verified\n        var json = await this.client.getConnectedRequirements(username, usertype, accountID);\n        if(json.success === \"STRIPE ERROR\") {\n            console.error(json.message);\n        } else {\n            if(json.status === \"None\") {\n                requirementsDue = false;\n            } \n            else {\n                const requirements = json.requirements;\n                if(requirements[0] === \"external_account\") {\n                    alert(\"Please Add a Bank Account in Settings/Banking Information\");\n                    return;\n                }\n                requirementsDue = true;\n            }\n            connectedAccountID = json.id;\n            console.log(\"Account Found: \" + connectedAccountID);\n        }\n\n        // try {\n        //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/checkConnectRequirements\", {\n        //         method: \"POST\",\n        //         body: data\n        //     });\n        //     if(!response.ok) {\n        //         console.error(response.statusText);\n        //         throw Error(response.statusText);\n        //     }\n\n        //     const json = await response.json();\n\n        //     if(json.success === \"STRIPE ERROR\") {\n        //         console.error(json.message);\n        //     } else {\n        //         if(json.status === \"None\") {\n        //             requirementsDue = false;\n        //         } \n        //         else {\n        //             const requirements = json.requirements;\n        //             if(requirements[0] === \"external_account\") {\n        //                 alert(\"Please Add a Bank Account in Settings/Banking Information\");\n        //                 return;\n        //             }\n        //             requirementsDue = true;\n        //         }\n        //         console.log(\"Account Found: \" + accountID);\n        //         accountID = json.id;\n        //     }\n\n        // } catch(error) {\n        //     console.error(error);\n        // }\n        /**\n         * Stripe Connect Onboarding Checks End\n         * *************************************\n         */\n\n\n         // if user's Connected account is verified, proceed as normal\n         if(requirementsDue === false) {\n\n            this.setState({\n                open: true,\n                paymentType: \"--\",\n                paymentMethod: \"--\",\n                beforeTax: 0.0,\n                showAmountError: false,\n                showPaymentMethodError: false,\n                showPaymentTypeError: false,\n                paymentMethodDisabled: true,\n                fieldColor: \"#FFFFFF\"\n            });\n\n            var json = await this.client.getStripeAccountBalance(username, usertype, accountID);\n            const balance =json.accountAmount;\n\n            this.setState({\n                userBalance: balance\n            });\n            console.log(\"Got the user balance\");\n            // try {\n            //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/getAccountBalance\", {\n            //         method: \"POST\",\n            //         body: data\n            //     });\n            //     if (!response.ok) {\n            //         console.log(\"empty\");\n            //         throw Error(response.statusText);\n\n            //     }\n\n            //     const json = await response.json();\n            //     const balance =json.accountAmount;\n\n            //     this.setState({\n            //         userBalance: balance\n            //     })\n            //     console.log(\"Got the user balance\")\n\n            // } catch (error) {\n            // console.log(error);\n            // }\n        }\n\n        // if there are requirements due\n        else {\n            var url = window.location.href;\n            // data.append(\"successURL\",window.location.href);\n            // data.append(\"failureURL\", window.location.href);\n\n            //alert(\"To enable withdraws, we need more information. Redirecting to form...\");\n            swal({title: \"To enable withdraws, we need more information. Proceed to information form?\", \n                buttons: {\n                    cancel: \"Cancel\",\n                    proceed: {\n                        text: \"Proceed\",\n                        value: \"proceed\",\n                    },\n                },\n              })\n              .then(async (value) =>{\n                // console.log(value + \"hellllllooooo\");\n\n                switch(value){\n\n                    case \"proceed\":\n                        // console.log(\"Proceed1111111\");\n                        var json = await this.client.onboardingInfoReq(username, usertype, accountID, url);\n                        if(json.success === \"STRIPE ERROR\") {\n                            alert(\"Can't reach Stripe\")\n                            console.error(json.message);\n                        } else {\n                            console.log(json.message)\n                            window.location.replace(json.message.url);\n                        }\n\n                        // try {\n                        //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/onboardingInfoRequest\", {\n                        //         method: \"POST\",\n                        //         body: data\n                        //     });\n                        //     if(!response.ok) {\n                        //         throw Error(response.statusText);\n                        //     }\n\n                        //     const json = await response.json();\n\n                        //     if(json.success === \"STRIPE ERROR\") {\n                        //         alert(\"Can't reach Stripe\")\n                        //         console.error(json.message);\n                        //     } else {\n                        //         console.log(json.message)\n                        //         window.location.replace(json.message.url);\n                        //     }\n\n                        // } catch(error) {\n                        //     console.error(error);\n                        // }\n                        break;\n\n                    default:\n                        // console.log(\"Default3333333333\");\n\n                        break;\n                }\n              });\n        }\n\n    }\n\n    closeModalSuccess(){\n        this.setState({\n            open: false\n        });\n        console.log(\"Withdraw Modal Close\");\n    }\n\n    closeModal(){\n        this.setState({open: false});\n        console.log(\"Withdraw Modal Cancel\");\n    }\n\n   async handleChangePaymentType(e){\n        this.setState({\n            paymentType: e.target.value,\n            paymentMethodList: []\n\n        });\n\n        var username = JSON.parse(sessionStorage.getItem('userInfo')).username;\n        var json = await this.client.getPaymentMethod(username, false, true);\n        const cardList=json.bankList;\n        var  method=[];\n        for(var i=0; i<cardList.length;i++){\n            method.push(cardList[i].bankName);\n        }\n\n        this.setState({\n            paymentMethodList: method,\n            paymentMethodDisabled: false\n        })\n        console.log(method)\n\n        // const data = new FormData();\n        // data.append(\"username\", JSON.parse(sessionStorage.getItem('userInfo')).username);\n        // data.append(\"paymentType\",e.target.value);\n\n        // try {\n        //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/transaction/connectedBanks\", {\n        //         method: \"POST\",\n        //         body: data\n        //     });\n        //     if (!response.ok) {\n        //         throw Error(response.statusText);\n        //     }\n        //     const json = await response.json();\n        //     const cardList=json.bankList;\n        //     var  method=[];\n        //     for(var i=0; i<cardList.length;i++){\n        //         method.push(cardList[i].bankName);\n        //     }\n\n        //     this.setState({\n        //         paymentMethodList: method,\n        //         paymentMethodDisabled: false\n        //     })\n        //     console.log(method)\n\n        // } catch (error) {\n        // console.log(error);\n        // }\n    }\n\n    handleChangePaymentMethod(e){\n        this.setState({\n            paymentMethod: e.target.value\n        });\n    }\n\n    handleChangeAmount(e){\n        console.log(JSON.parse(sessionStorage.getItem('userInfo')).username);\n\n        let amountStr = typeof e.target.value === \"number\" ? e.target.value.toString() : e.target.value;\n        if(amountStr.match(\"^[0-9]+([.][0-9]{0,2})?$\") != null &&\n        parseFloat(amountStr) !== 0 && parseFloat(amountStr) <= this.state.userBalance){\n            console.log(\"Valid Input: \" + e.target.value)\n            this.setState({\n                fieldColor: '#66f375',\n                beforeTax: parseFloat(amountStr),\n                tax: parseFloat(amountStr) * (this.state.stripeTax + this.state.affordableTax),\n                afterTax: parseFloat(amountStr) - parseFloat(amountStr) * (this.state.stripeTax + this.state.affordableTax)\n            });\n\n\n        }\n        else{\n            console.log(\"Invalid Input: \" + e.target.value)\n\n            this.setState({\n                fieldColor: '#f36684',\n                beforeTax: amountStr\n            });\n        }\n\n        this.setState({\n            beforeTax: e.target.value,\n            tax: e.target.value * (this.state.stripeTax + this.state.affordableTax),\n            afterTax: e.target.value - (e.target.value * (this.state.stripeTax + this.state.affordableTax))\n        });\n    }\n\n    handleAmountErrorMessage(e){\n        this.setState({ showAmountError: e })\n    }\n\n    handlePaymentMethodErrorMessage(e){\n        this.setState({ showPaymentMethodError: e })\n    }\n\n    handlePaymentTypeErrorMessage(e){\n        this.setState({ showPaymentTypeError: e })\n    }\n\n    handleHideErrorMessage(){\n        this.setState({\n            showAmountError: false,\n            showPaymentMethodError: false,\n            showPaymentTypeError: false\n        })\n    }\n\n\n    render(){\n        var methodShow = this.state.paymentMethodList;\n        methodShow = methodShow.map((item, index) => {\n            return (\n            <option value={item}>{item}</option>\n            );\n        });\n\n        return (\n            <div style={this.state.buttonStyle}>\n                {this.state.buttonStyle === undefined ?\n                    <Button className=\"submit-button\" onClick={this.openModal}>\n                    {this.state.buttonText === undefined ?\n                        \"Withdraw\"\n                    :\n                        this.state.buttonText\n                    }\n                    </Button>\n                :\n                    <Button onClick={this.openModal} style={this.state.buttonStyle} block size=\"lg\">\n                        {this.state.buttonText === undefined ?\n                            \"Withdraw\"\n                        :\n                            this.state.buttonText\n                        }\n                    </Button>\n                }\n                <Popup\n                  open={this.state.open}\n                  closeOnDocumentClick = {false}\n                  onClose={this.closeModal}>\n\n                    <a className=\"close\" onClick={this.closeModal}>\n                        &times;\n                    </a>\n                    <div className=\"header\"> Withdraw </div>\n                    <div className=\"content\">\n                        <label className=\"label\">Payment Type:&nbsp;\n                            <select\n                              className=\"paymentType\"\n                              id=\"paymentType\"\n                              onChange={this.handleChangePaymentType}\n                              value={this.state.paymentType}>\n                                <option value=\"--\">--</option>\n                                <option value=\"BankAccount\">Bank Account</option>\n                                {/* <option value=\"Debit\">Debit Card</option> */}\n                            </select>\n                            {this.state.showPaymentTypeError ? <p>Please select a payment type</p> : <div></div>}\n                        </label><br />\n\n                        <label className=\"label\">Payment Method: &nbsp;\n                            <select\n                              className=\"paymentMethod\"\n                              id=\"paymentMethod\"\n                              disabled={this.state.paymentMethodDisabled}\n                              value={this.state.paymentMethod}\n                              onChange={this.handleChangePaymentMethod}>\n                            <option value=\"--\">--</option>\n                                {methodShow}\n                            </select>\n                            {this.state.showPaymentMethodError ? <p>Please select a payment method.</p> : <div></div>}\n                        </label><br />\n\n                        <label className=\"label\">Amount:&nbsp;\n                            <input\n                              type=\"text\"\n                              id=\"amountNumber\"\n                              value={this.state.beforeTax}\n                              style={{backgroundColor:this.state.fieldColor}}\n                              onChange={this.handleChangeAmount} />\n\n                              {this.state.showAmountError ? <p>Please enter a valid amount.</p> : <div></div>}\n\n                        </label><br />\n\n\n\n                    </div>\n                    <div className=\"actions\">\n                        <div className=\"floats-right\">\n                        {/*Cancel the transaction */}\n                        <button\n                          className=\"submit-button\"\n                          onClick={this.closeModal}>\n                            Cancel\n                        </button>\n                        </div>\n\n                        { /* Submit the transaction*/ }\n                        {/*NEED TO CHECK WHAT OTHER PEOPLE ARE USING TO DETERMINE USER */ }\n                        <SubmitModal\n                          usertype={this.props.usertype}\n                          onMainClose={this.closeModalSuccess}\n                          buttonType=\"Withdraw\"\n                          beforeTax={this.state.beforeTax}\n                          tax={this.state.tax}\n                          afterTax={this.state.afterTax}\n                          message=\"Your transaction is being processed. Thank you for using our service!!\"\n                          shouldOpen= {\"#66f375\" == this.state.fieldColor}\n                          paymentType={this.state.paymentType}\n                          paymentMethod={this.state.paymentMethod}\n                          amountError={this.handleAmountErrorMessage}\n                          paymentMethodError={this.handlePaymentMethodErrorMessage}\n                          paymentTypeError={this.handlePaymentTypeErrorMessage}\n                          handleHideErrorMessage = {this.handleHideErrorMessage}\n                          />\n                    </div>\n                </Popup>\n            </div>\n        );\n    }\n}\n\nexport default WithdrawButton;\n"]},"metadata":{},"sourceType":"module"}