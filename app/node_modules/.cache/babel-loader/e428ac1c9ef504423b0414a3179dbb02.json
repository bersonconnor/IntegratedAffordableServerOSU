{"ast":null,"code":"/**\n * Returns true if the password meets affordable's security criteria. It\n * returns false if it doesn't. A password must currently meet all of the\n * following criteria:\n * -More than 8 characters\n * -Have atleast one upper case character\n * -Have atleast one lower case character\n * -Have atleast one numeric character\n * -Have atleast one non alphanumeric character\n *\n * @param passwordString a string that represents a password\n * @return a boolean, true if the criteria is met, false otherwise\n */\nmodule.exports.passwordMeetsCriteria = function (passwordString) {\n  var longEnough = passwordString.length >= 8;\n  var hasLowerCase = /[a-z]/.test(passwordString);\n  var hasUpperCase = /[A-Z]/.test(passwordString);\n  var hasNumbers = /\\d/.test(passwordString);\n  var hasNonAlphanumeric = /\\W/.test(passwordString);\n  return longEnough && hasLowerCase && hasUpperCase && hasNumbers && hasNonAlphanumeric;\n};\n/**\n * Returns true if the email address meets affordable's security criteria. It\n * returns false if it doesn't. A password must currently meet all of the\n * following criteria:\n * - 5 or more characters\n * -Have at least one character before '@' character\n * -Have at least one period\n * -Have at least one '@' symbol\n * -Have at least one character before second period\n * -Have at least one character after second period\n *\n * @param passwordString a string that represents a email\n * @return a boolean, true if the criteria is met, false otherwise\n */\n\n\nmodule.exports.emailMeetsCriteria = function (passwordString) {\n  var longEnough = passwordString.length >= 5;\n  var hasFirstWordChar = /[\\w]+@{1}/.test(passwordString);\n  var hasAtSymbol = /@/.test(passwordString);\n  var hasSecondWordChar = /@{1}[\\w]+.{1}/.test(passwordString);\n  var hasPeriod = /./.test(passwordString);\n  var hasLastWordChar = /.{1}[\\w]+/.test(passwordString);\n  var hasEntireEmail = /[\\w]+@{1}[\\w]+.{1}[\\w]+/.test(passwordString);\n  return longEnough && hasFirstWordChar && hasAtSymbol && hasSecondWordChar && hasPeriod && hasLastWordChar && hasEntireEmail;\n}; // Returns a list with password feedback\n\n\nmodule.exports.getPasswordFeedback = function (passwordString) {\n  var feedback = [];\n  var longEnough = passwordString.length >= 8;\n  var hasLowerCase = /[a-z]/.test(passwordString);\n  var hasUpperCase = /[A-Z]/.test(passwordString);\n  var hasNumbers = /\\d/.test(passwordString);\n  var hasNonAlphanumeric = /\\W/.test(passwordString);\n  if (!longEnough) feedback.push(\"At least 8 characters are needed\");\n  if (!hasLowerCase) feedback.push(\"A lowercase character is needed\");\n  if (!hasUpperCase) feedback.push(\"An uppercase character is needed\");\n  if (!hasNumbers) feedback.push(\"A number is needed\");\n  if (!hasNonAlphanumeric) feedback.push(\"A non alphanumeric is needed\");\n  return feedback;\n};","map":{"version":3,"sources":["/home/ubuntu/Connor/WorkOSU/app/src/utils.js"],"names":["module","exports","passwordMeetsCriteria","passwordString","longEnough","length","hasLowerCase","test","hasUpperCase","hasNumbers","hasNonAlphanumeric","emailMeetsCriteria","hasFirstWordChar","hasAtSymbol","hasSecondWordChar","hasPeriod","hasLastWordChar","hasEntireEmail","getPasswordFeedback","feedback","push"],"mappings":"AAAA;;;;;;;;;;;;;AAaAA,MAAM,CAACC,OAAP,CAAeC,qBAAf,GAAuC,UAASC,cAAT,EAAyB;AAC9D,MAAMC,UAAU,GAAGD,cAAc,CAACE,MAAf,IAAyB,CAA5C;AACA,MAAMC,YAAY,GAAG,QAAQC,IAAR,CAAaJ,cAAb,CAArB;AACA,MAAMK,YAAY,GAAG,QAAQD,IAAR,CAAaJ,cAAb,CAArB;AACA,MAAMM,UAAU,GAAG,KAAKF,IAAL,CAAUJ,cAAV,CAAnB;AACA,MAAMO,kBAAkB,GAAG,KAAKH,IAAL,CAAUJ,cAAV,CAA3B;AAEA,SACEC,UAAU,IACVE,YADA,IAEAE,YAFA,IAGAC,UAHA,IAIAC,kBALF;AAOD,CAdD;AAgBA;;;;;;;;;;;;;;;;AAcAV,MAAM,CAACC,OAAP,CAAeU,kBAAf,GAAoC,UAASR,cAAT,EAAyB;AAC3D,MAAMC,UAAU,GAAGD,cAAc,CAACE,MAAf,IAAyB,CAA5C;AACA,MAAMO,gBAAgB,GAAG,YAAYL,IAAZ,CAAiBJ,cAAjB,CAAzB;AACA,MAAMU,WAAW,GAAG,IAAIN,IAAJ,CAASJ,cAAT,CAApB;AACA,MAAMW,iBAAiB,GAAG,gBAAgBP,IAAhB,CAAqBJ,cAArB,CAA1B;AACA,MAAMY,SAAS,GAAG,IAAIR,IAAJ,CAASJ,cAAT,CAAlB;AACA,MAAMa,eAAe,GAAG,YAAYT,IAAZ,CAAiBJ,cAAjB,CAAxB;AACA,MAAMc,cAAc,GAAG,0BAA0BV,IAA1B,CAA+BJ,cAA/B,CAAvB;AAEA,SACEC,UAAU,IACVQ,gBADA,IAEAC,WAFA,IAGAC,iBAHA,IAIAC,SAJA,IAKAC,eALA,IAMAC,cAPF;AASD,CAlBD,C,CAmBA;;;AACAjB,MAAM,CAACC,OAAP,CAAeiB,mBAAf,GAAqC,UAASf,cAAT,EAAyB;AAC5D,MAAMgB,QAAQ,GAAG,EAAjB;AAEA,MAAMf,UAAU,GAAGD,cAAc,CAACE,MAAf,IAAyB,CAA5C;AACA,MAAMC,YAAY,GAAG,QAAQC,IAAR,CAAaJ,cAAb,CAArB;AACA,MAAMK,YAAY,GAAG,QAAQD,IAAR,CAAaJ,cAAb,CAArB;AACA,MAAMM,UAAU,GAAG,KAAKF,IAAL,CAAUJ,cAAV,CAAnB;AACA,MAAMO,kBAAkB,GAAG,KAAKH,IAAL,CAAUJ,cAAV,CAA3B;AAEA,MAAI,CAACC,UAAL,EAAiBe,QAAQ,CAACC,IAAT,CAAc,kCAAd;AACjB,MAAI,CAACd,YAAL,EAAmBa,QAAQ,CAACC,IAAT,CAAc,iCAAd;AACnB,MAAI,CAACZ,YAAL,EAAmBW,QAAQ,CAACC,IAAT,CAAc,kCAAd;AACnB,MAAI,CAACX,UAAL,EAAiBU,QAAQ,CAACC,IAAT,CAAc,oBAAd;AACjB,MAAI,CAACV,kBAAL,EAAyBS,QAAQ,CAACC,IAAT,CAAc,8BAAd;AAEzB,SAAOD,QAAP;AACD,CAhBD","sourcesContent":["/**\n * Returns true if the password meets affordable's security criteria. It\n * returns false if it doesn't. A password must currently meet all of the\n * following criteria:\n * -More than 8 characters\n * -Have atleast one upper case character\n * -Have atleast one lower case character\n * -Have atleast one numeric character\n * -Have atleast one non alphanumeric character\n *\n * @param passwordString a string that represents a password\n * @return a boolean, true if the criteria is met, false otherwise\n */\nmodule.exports.passwordMeetsCriteria = function(passwordString) {\n  const longEnough = passwordString.length >= 8;\n  const hasLowerCase = /[a-z]/.test(passwordString);\n  const hasUpperCase = /[A-Z]/.test(passwordString);\n  const hasNumbers = /\\d/.test(passwordString);\n  const hasNonAlphanumeric = /\\W/.test(passwordString);\n\n  return (\n    longEnough &&\n    hasLowerCase &&\n    hasUpperCase &&\n    hasNumbers &&\n    hasNonAlphanumeric\n  );\n};\n\n/**\n * Returns true if the email address meets affordable's security criteria. It\n * returns false if it doesn't. A password must currently meet all of the\n * following criteria:\n * - 5 or more characters\n * -Have at least one character before '@' character\n * -Have at least one period\n * -Have at least one '@' symbol\n * -Have at least one character before second period\n * -Have at least one character after second period\n *\n * @param passwordString a string that represents a email\n * @return a boolean, true if the criteria is met, false otherwise\n */\nmodule.exports.emailMeetsCriteria = function(passwordString) {\n  const longEnough = passwordString.length >= 5;\n  const hasFirstWordChar = /[\\w]+@{1}/.test(passwordString);\n  const hasAtSymbol = /@/.test(passwordString);\n  const hasSecondWordChar = /@{1}[\\w]+.{1}/.test(passwordString);\n  const hasPeriod = /./.test(passwordString);\n  const hasLastWordChar = /.{1}[\\w]+/.test(passwordString);\n  const hasEntireEmail = /[\\w]+@{1}[\\w]+.{1}[\\w]+/.test(passwordString);\n\n  return (\n    longEnough &&\n    hasFirstWordChar &&\n    hasAtSymbol &&\n    hasSecondWordChar &&\n    hasPeriod &&\n    hasLastWordChar &&\n    hasEntireEmail\n  );\n};\n// Returns a list with password feedback\nmodule.exports.getPasswordFeedback = function(passwordString) {\n  const feedback = [];\n\n  const longEnough = passwordString.length >= 8;\n  const hasLowerCase = /[a-z]/.test(passwordString);\n  const hasUpperCase = /[A-Z]/.test(passwordString);\n  const hasNumbers = /\\d/.test(passwordString);\n  const hasNonAlphanumeric = /\\W/.test(passwordString);\n\n  if (!longEnough) feedback.push(\"At least 8 characters are needed\");\n  if (!hasLowerCase) feedback.push(\"A lowercase character is needed\");\n  if (!hasUpperCase) feedback.push(\"An uppercase character is needed\");\n  if (!hasNumbers) feedback.push(\"A number is needed\");\n  if (!hasNonAlphanumeric) feedback.push(\"A non alphanumeric is needed\");\n\n  return feedback;\n};\n"]},"metadata":{},"sourceType":"module"}