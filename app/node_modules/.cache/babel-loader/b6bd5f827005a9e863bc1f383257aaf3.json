{"ast":null,"code":"import _regeneratorRuntime from \"/home/ubuntu/Connor/Demo_OSU_Filemanager/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ubuntu/Connor/Demo_OSU_Filemanager/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/ubuntu/Connor/Demo_OSU_Filemanager/app/src/components/Modal/AddBankAccountButton.js\";\nimport React, { Component } from \"react\";\nimport { PlaidLink } from 'react-plaid-link';\nimport { AffordableClient } from \"affordable-client\";\nimport \"../../styles/buttons.css\";\n\nvar dotenv_1 = require(\"dotenv\");\n\ndotenv_1.config();\n\nclass ACHButton extends Component {\n  constructor(props) {\n    super(props);\n    this.REACT_APP_AF_BACKEND_URL = process.env.REACT_APP_AF_BACKEND_URL || window.REACT_APP_AF_BACKEND_URL;\n    this.client = new AffordableClient();\n    this.debug = this.debug.bind(this);\n    this.exchangeTokens = this.exchangeTokens.bind(this);\n    this.createCustomer = this.createCustomer.bind(this);\n    this.attachBankAccountToCustomAccount = this.attachBankAccountToCustomAccount.bind(this);\n    this.exitPlaid = this.exitPlaid.bind(this);\n    this.successPlaid = this.successPlaid.bind(this);\n  }\n\n  debug(message) {\n    var debugMessage = document.getElementById('debug-message');\n    console.log('Debug: ', message);\n    debugMessage.innerText += '\\n' + message;\n  }\n\n  createCustomer(bankAccountToken) {\n    this.debug('Creating customer...');\n    fetch('/create-customer', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        bank_account: bankAccountToken\n      })\n    }).then(response => response.json()).then(data => {\n      this.debug('Created customer!');\n      this.debug(JSON.stringify(data, null, 2));\n      console.log('Success:', data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }\n  /**\n   * Attempts to attach given bank account token to current user\n   * @param username - AFFORDABLE username\n   * @param usertype - 0 or 1 to determine if recipient or donor\n   * @param bankAccountToken - bank account token\n   */\n\n\n  attachBankAccountToCustomAccount(username, usertype, bankAccountToken) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var data, json;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"Attaching bank account to:\" + username);\n              data = new FormData();\n              data.append(\"username\", username);\n              data.append(\"usertype\", usertype);\n              data.append(\"btok\", bankAccountToken);\n              _context.next = 7;\n              return _this.client.attachBankToCustomer(data, true);\n\n            case 7:\n              json = _context.sent;\n              console.log(json); // checks if Stripe successfully added bank account\n\n              if (json.success == \"Bank Account Added\") {\n                console.info(json.message);\n\n                _this.addBankToCustomTable(username, json.message);\n              } // notify error\n              else {\n                  alert(\"Adding Bank Account Failed: Check Console\");\n                  console.error(json.message);\n                } // fetch call to attempt to attach bank account\n              // try {\n              //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/stripe/attachBankToCustomAccount\", {\n              //       method: \"POST\",\n              //       body: data\n              //     });\n              //     if (!response.ok) {\n              //       throw Error(response.statusText);\n              //     }\n              //     const json = await response.json();\n              //     // checks if Stripe successfully added bank account\n              //     if(json.success == \"Bank Account Added\") {\n              //         console.info(json.message);\n              //         this.addBankToCustomTable(username, json.message);\n              //     }\n              //     // notify error\n              //     else {\n              //         alert(\"Adding Bank Account Failed: Check Console\");\n              //         console.error(json.message)\n              //     }\n              // } catch (error) {\n              //     console.error(error);\n              // }\n\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n  /**\n   * Adds an entry into the ConnectedBankAccount table.\n   * @param username - AFFORDABLE username of the user to attach this to\n   * @param bankAccountInfo - JSON of Stripe Bank account object\n   */\n\n\n  addBankToCustomTable(username, bankAccountInfo) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var data, json;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              data = new FormData();\n              data.append(\"username\", username);\n              data.append(\"bankaccount_id\", bankAccountInfo.id);\n              data.append(\"bankaccount_status\", bankAccountInfo.status);\n              data.append(\"last4\", bankAccountInfo.last4);\n              data.append(\"bankname\", bankAccountInfo.bank_name);\n              _context2.next = 8;\n              return _this2.client.addBankToCustomTable(data, true);\n\n            case 8:\n              json = _context2.sent;\n              console.info(json.message); // fetch call\n              //  try {\n              //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/addBankToCustomTable\", {\n              //         method: \"POST\",\n              //         body: data\n              //     });\n              //     if(!response.ok) {\n              //         throw Error(response.statusText);\n              //     }\n              //     const json = await response.json();\n              //     console.info(json.message);\n              //  } catch (error) {\n              //      console.error(error);\n              //  }\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n  /**\n   * Attaches the given bank account token a Stripe Customer, in our case, a donor\n   * @param bankAccountToken - String bank account token\n   * @param username - Username of the user\n   */\n\n\n  attachBankToCustomer(username, bankAccountToken) {\n    var _this3 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var data, json;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              data = new FormData();\n              data.append(\"username\", username);\n              data.append(\"btok\", bankAccountToken);\n              _context3.next = 5;\n              return _this3.client.attachBankToCustomer(data, false);\n\n            case 5:\n              json = _context3.sent;\n              return _context3.abrupt(\"return\", json.bankAccount);\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  }\n  /**\n   * Function takes the tokens and id generated from Plaid to exchange\n   * for a bank account token\n   * @param public_token\n   * @param account_id\n   */\n\n\n  exchangeTokens(public_token, account_id) {\n    var _this4 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var username, json, token;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              // this.debug('Exchanging tokens...')\n              username = JSON.parse(sessionStorage.getItem('userInfo')).username;\n              json = _this4.client.exchangeTokens(public_token, account_id, username);\n              token = json.btok;\n              console.log(\"Sucess: Bank Token Received\\n\" + token);\n              return _context4.abrupt(\"return\", token);\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  }\n\n  successPlaid(public_token, metadata) {\n    var _this5 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var btok, data1, username, usertype;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _this5.exchangeTokens(public_token, metadata.account.id);\n\n            case 2:\n              btok = _context5.sent;\n              console.log(btok); // calls fetch function to get usertype of the current session user\n              // NOTE: If there is a simpler way to get usertype, replace this annoying fetch function\n\n              data1 = new FormData();\n              username = JSON.parse(sessionStorage.getItem('userInfo')).username;\n              usertype = null;\n              data1.append(\"username\", username);\n              _context5.next = 10;\n              return fetch(_this5.REACT_APP_AF_BACKEND_URL + \"/profile/get-user-type\", {\n                method: \"POST\",\n                body: data1\n              }).then(response => {\n                if (response.ok) {\n                  return response.json();\n                } else {\n                  alert(\"Unable to get user type\");\n                }\n              }).then(resData => {\n                usertype = resData.usertype;\n              });\n\n            case 10:\n              if (!(usertype == 0)) {\n                _context5.next = 14;\n                break;\n              }\n\n              _this5.attachBankAccountToCustomAccount(username, usertype, btok);\n\n              _context5.next = 16;\n              break;\n\n            case 14:\n              _context5.next = 16;\n              return _this5.attachBankToCustomer(username, btok);\n\n            case 16:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }))();\n  }\n\n  exitPlaid(err, metadata) {\n    console.error(err);\n    console.log(metadata);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(PlaidLink, {\n      className: \"submit-button\",\n      clientName: \"Affordable\",\n      publicKey: process.env.REACT_APP_PLAID_PUBLIC_KEY || window.REACT_APP_PLAID_PUBLIC_KEY,\n      env: \"sandbox\",\n      product: ['auth', 'transactions'],\n      selectAccount: true,\n      onSuccess: this.successPlaid.bind(this),\n      onExit: this.exitPlaid.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 13\n      }\n    }, \"Add Bank\");\n  }\n\n}\n\nexport default ACHButton;","map":{"version":3,"sources":["/home/ubuntu/Connor/Demo_OSU_Filemanager/app/src/components/Modal/AddBankAccountButton.js"],"names":["React","Component","PlaidLink","AffordableClient","dotenv_1","require","config","ACHButton","constructor","props","REACT_APP_AF_BACKEND_URL","process","env","window","client","debug","bind","exchangeTokens","createCustomer","attachBankAccountToCustomAccount","exitPlaid","successPlaid","message","debugMessage","document","getElementById","console","log","innerText","bankAccountToken","fetch","method","headers","body","JSON","stringify","bank_account","then","response","json","data","catch","error","username","usertype","FormData","append","attachBankToCustomer","success","info","addBankToCustomTable","alert","bankAccountInfo","id","status","last4","bank_name","bankAccount","public_token","account_id","parse","sessionStorage","getItem","token","btok","metadata","account","data1","ok","resData","err","render","REACT_APP_PLAID_PUBLIC_KEY"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { PlaidLink } from 'react-plaid-link';\nimport {AffordableClient} from \"affordable-client\";\nimport \"../../styles/buttons.css\";\nconst dotenv_1 = require(\"dotenv\");\ndotenv_1.config();\n\nclass ACHButton extends Component{\n\n    REACT_APP_AF_BACKEND_URL = process.env.REACT_APP_AF_BACKEND_URL || window.REACT_APP_AF_BACKEND_URL;\n\n    constructor(props) {\n        super(props);\n        this.client = new AffordableClient();\n        this.debug = this.debug.bind(this);\n        this.exchangeTokens = this.exchangeTokens.bind(this);\n        this.createCustomer = this.createCustomer.bind(this);\n        this.attachBankAccountToCustomAccount = this.attachBankAccountToCustomAccount.bind(this);\n        this.exitPlaid = this.exitPlaid.bind(this);\n        this.successPlaid = this.successPlaid.bind(this);\n    }\n\n    debug(message) {\n        var debugMessage = document.getElementById('debug-message');\n        console.log('Debug: ', message);\n        debugMessage.innerText += '\\n' + message;\n    }\n\n    createCustomer(bankAccountToken) {\n        this.debug('Creating customer...')\n        fetch('/create-customer', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    bank_account: bankAccountToken\n                }),\n            })\n            .then((response) => response.json())\n            .then((data) => {\n                this.debug('Created customer!')\n                this.debug(JSON.stringify(data, null, 2))\n                console.log('Success:', data);\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n    }\n\n    /**\n     * Attempts to attach given bank account token to current user\n     * @param username - AFFORDABLE username\n     * @param usertype - 0 or 1 to determine if recipient or donor\n     * @param bankAccountToken - bank account token\n     */\n    async attachBankAccountToCustomAccount(username, usertype, bankAccountToken) {\n        console.log(\"Attaching bank account to:\" + username);\n\n        const data = new FormData();\n        data.append(\"username\", username);\n        data.append(\"usertype\", usertype);\n        data.append(\"btok\", bankAccountToken);\n\n        var json = await this.client.attachBankToCustomer(data, true);\n        console.log(json);\n        // checks if Stripe successfully added bank account\n        if(json.success == \"Bank Account Added\") {\n            console.info(json.message);\n            this.addBankToCustomTable(username, json.message);\n        }\n        // notify error\n        else {\n            alert(\"Adding Bank Account Failed: Check Console\");\n            console.error(json.message)\n        }\n        // fetch call to attempt to attach bank account\n        // try {\n        //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/stripe/attachBankToCustomAccount\", {\n        //       method: \"POST\",\n        //       body: data\n        //     });\n        //     if (!response.ok) {\n        //       throw Error(response.statusText);\n        //     }\n        //     const json = await response.json();\n\n        //     // checks if Stripe successfully added bank account\n        //     if(json.success == \"Bank Account Added\") {\n        //         console.info(json.message);\n        //         this.addBankToCustomTable(username, json.message);\n        //     }\n        //     // notify error\n        //     else {\n        //         alert(\"Adding Bank Account Failed: Check Console\");\n        //         console.error(json.message)\n        //     }\n\n        // } catch (error) {\n        //     console.error(error);\n        // }\n    }\n\n    /**\n     * Adds an entry into the ConnectedBankAccount table.\n     * @param username - AFFORDABLE username of the user to attach this to\n     * @param bankAccountInfo - JSON of Stripe Bank account object\n     */\n    async addBankToCustomTable(username, bankAccountInfo) {\n         const data = new FormData();\n         data.append(\"username\", username);\n         data.append(\"bankaccount_id\", bankAccountInfo.id);\n         data.append(\"bankaccount_status\", bankAccountInfo.status);\n         data.append(\"last4\", bankAccountInfo.last4);\n         data.append(\"bankname\", bankAccountInfo.bank_name);\n\n         var json = await this.client.addBankToCustomTable(data, true);\n         console.info(json.message);\n\n         // fetch call\n        //  try {\n        //     const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +\"/stripe/addBankToCustomTable\", {\n        //         method: \"POST\",\n        //         body: data\n        //     });\n\n        //     if(!response.ok) {\n        //         throw Error(response.statusText);\n        //     }\n        //     const json = await response.json();\n        //     console.info(json.message);\n        //  } catch (error) {\n        //      console.error(error);\n        //  }\n    }\n\n    /**\n     * Attaches the given bank account token a Stripe Customer, in our case, a donor\n     * @param bankAccountToken - String bank account token\n     * @param username - Username of the user\n     */\n    async attachBankToCustomer(username, bankAccountToken) {\n        const data = new FormData();\n        data.append(\"username\", username);\n        data.append(\"btok\", bankAccountToken);\n\n        var json = await this.client.attachBankToCustomer(data, false);\n        return json.bankAccount;\n        // try {\n        // const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL + \"/stripe/attachBankToCustomer\", {\n        //     method: \"POST\",\n        //     body: data\n        // });\n        // if (!response.ok) {\n        //     throw Error(response.statusText);\n        // }\n        // const json = await response.json();\n        // console.log(json);\n        \n        // } catch (error) {\n        // console.log(error);\n        // }\n    }\n\n\n    /**\n     * Function takes the tokens and id generated from Plaid to exchange\n     * for a bank account token\n     * @param public_token\n     * @param account_id\n     */\n    async exchangeTokens(public_token, account_id) {\n        // this.debug('Exchanging tokens...')\n        var username = JSON.parse(sessionStorage.getItem('userInfo')).username;\n        var json = this.client.exchangeTokens(public_token,account_id, username);\n        var token = json.btok;\n        console.log(\"Sucess: Bank Token Received\\n\" + token);\n        return token;\n            // const response = await fetch(process.env.REACT_APP_AF_BACKEND_URL +'/stripe/exchangeTokens', {\n            //      method: 'POST',\n            //      headers: {\n            //          'Content-Type': 'application/json',\n            //      },\n            //      body: JSON.stringify({\n            //          public_token: public_token,\n            //          account_id: account_id,\n            //          username: JSON.parse(sessionStorage.getItem('userInfo')).username,\n            //      }),\n            //  })\n\n            //  if(!response.ok) {\n            //     throw Error(response.statusText);\n            //  }\n            //  const json = await response.json();\n            //  var token = json.btok;\n            //  console.log(\"Sucess: Bank Token Received\\n\" + token);\n            //  return token;\n     }\n\n    async successPlaid(public_token, metadata){\n        // console.log(public_token);\n        // console.log(metadata.account.name);\n        // console.log(metadata.institution.name);\n\n        // Exchange tokens\n        var btok = await this.exchangeTokens(public_token,metadata.account.id);\n        console.log(btok);\n        // calls fetch function to get usertype of the current session user\n        // NOTE: If there is a simpler way to get usertype, replace this annoying fetch function\n        const data1 = new FormData();\n        const username = JSON.parse(sessionStorage.getItem('userInfo')).username;\n        var usertype = null;\n        data1.append(\"username\", username);\n        await fetch(this.REACT_APP_AF_BACKEND_URL +\"/profile/get-user-type\", {\n            method: \"POST\",\n            body: data1\n            })\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            } else {\n                alert(\"Unable to get user type\");\n            }\n         })\n        .then(resData => {\n            usertype = resData.usertype;\n        });\n\n        // user is a recipient, create only Connect account\n        if(usertype == 0) {\n            this.attachBankAccountToCustomAccount(username, usertype, btok);\n        }\n        // user is a donor\n        else {\n            await this.attachBankToCustomer(username, btok);\n        }\n    }\n\n    exitPlaid(err, metadata){\n        console.error(err);\n        console.log(metadata);\n    }\n\n    render() {\n        return (\n            <PlaidLink\n                className=\"submit-button\"\n                clientName=\"Affordable\"\n                publicKey=  {process.env.REACT_APP_PLAID_PUBLIC_KEY || window.REACT_APP_PLAID_PUBLIC_KEY}\n                env=\"sandbox\"\n                product={['auth','transactions']}\n                selectAccount ={true}\n                onSuccess={this.successPlaid.bind(this)}\n                onExit = {this.exitPlaid.bind(this)}\n            >\n                Add Bank\n            </PlaidLink>\n        );\n    }\n}\n\n\nexport default ACHButton;\n"]},"metadata":{},"sourceType":"module"}