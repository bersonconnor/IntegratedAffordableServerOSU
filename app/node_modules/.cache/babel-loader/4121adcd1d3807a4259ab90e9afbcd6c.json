{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AffordableHttpError = exports.AffordableClient = void 0;\n\nvar axios_1 = __importDefault(require(\"axios\"));\n\nvar jsonwebtoken_1 = __importDefault(require(\"jsonwebtoken\"));\n\nvar universal_cookie_1 = __importDefault(require(\"universal-cookie\"));\n\nvar util_1 = require(\"./util\");\n\nvar AUTH_EP = util_1.AffordableClientConstants.AUTH_EP;\nvar PROFILE_EP = util_1.AffordableClientConstants.PROFILE_EP;\nvar SESSION_TOKEN_COOKIE_KEY = util_1.AffordableClientConstants.SESSION_TOKEN_COOKIE_KEY;\nvar GRANT_EP = util_1.AffordableClientConstants.GRANT_EP;\nvar ORGANIZATION_EP = util_1.AffordableClientConstants.ORGANIZATION_EP;\nvar TRANSACTION = util_1.AffordableClientConstants.TRANSACTION;\nvar APPLICATION = util_1.AffordableClientConstants.APPLICATION;\nvar STRIPE = util_1.AffordableClientConstants.STRIPE;\nvar FILE = util_1.AffordableClientConstants.FILE;\nvar ACTIVITY_EP = util_1.AffordableClientConstants.ACTIVITY_EP;\n\nvar dotenv_1 = require(\"dotenv\");\n\ndotenv_1.config();\naxios_1.default.defaults.withCredentials = true;\n\nclass BalanceResponse {}\n\n;\n\nclass AffordableClient {\n  constructor() {\n    this.cookies = new universal_cookie_1.default();\n  } //For tlcoaesting purposes\n\n\n  getUserId() {\n    return this.myUserId;\n  }\n\n  getBaseURL() {\n    return this.baseURL ? this.baseURL : process.env.REACT_APP_AF_BACKEND_URL || window.REACT_APP_AF_BACKEND_URL;\n  }\n\n  setBaseURL(url) {\n    this.baseURL = url;\n  }\n\n  getSessionToken() {\n    return this.sessionToken ? this.sessionToken : this.cookies.get(SESSION_TOKEN_COOKIE_KEY);\n  }\n\n  setSessionToken(token) {\n    this.sessionToken = token;\n    this.cookies.set(SESSION_TOKEN_COOKIE_KEY, token, {\n      maxAge: 60 * 60 * 8\n    } // 8 hours\n    ); // Get the UserInfo out of the token\n\n    var decoded = jsonwebtoken_1.default.decode(token);\n    this.myUserId = JSON.parse(decoded.sub).id;\n  }\n\n  getHeaders() {\n    return this.getSessionToken() ? {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer \" + this.getSessionToken()\n    } : {\n      \"Content-Type\": \"application/json\"\n    };\n  }\n\n  doGet(endpoint, params) {\n    var _a;\n\n    return axios_1.default.get(endpoint, {\n      params: params,\n      headers: (_a = params === null || params === void 0 ? void 0 : params.headers) !== null && _a !== void 0 ? _a : this.getHeaders()\n    }).then(response => {\n      return response.data;\n    }).catch(error => {\n      return null; //throw new AffordableHttpError(error)\n    });\n  }\n\n  doDelete(endpoint, params) {\n    var _a;\n\n    return axios_1.default.delete(endpoint, {\n      params: params,\n      headers: (_a = params === null || params === void 0 ? void 0 : params.headers) !== null && _a !== void 0 ? _a : this.getHeaders()\n    }).then(response => {\n      return response.data;\n    }).catch(error => {\n      throw new AffordableHttpError(error);\n    });\n  }\n\n  doPost(endpoint, body, axiosParams) {\n    var _a;\n\n    return axios_1.default.post(endpoint, body, Object.assign(Object.assign({}, axiosParams), {\n      headers: (_a = axiosParams === null || axiosParams === void 0 ? void 0 : axiosParams.headers) !== null && _a !== void 0 ? _a : this.getHeaders()\n    })).then(response => {\n      return response.data;\n    }).catch(error => {\n      throw new AffordableHttpError(error);\n    });\n  }\n\n  doPut(endpoint, body, axiosParams) {\n    return axios_1.default.put(endpoint, body, Object.assign(Object.assign({}, axiosParams), {\n      headers: this.getHeaders()\n    })).then(response => {\n      return response.data;\n    }).catch(error => {\n      throw new AffordableHttpError(error);\n    });\n  }\n\n  getMyUserInfo() {\n    return this.getUserInfo(this.myUserId);\n  }\n  /**\n   * Create a user account in Affordable\n   * @param user\n   */\n\n\n  registerUser(user) {\n    return this.doPost(this.getBaseURL() + AUTH_EP, user, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      this.setSessionToken(response.token);\n      return response;\n    });\n  }\n\n  getEmails(user) {\n    return this.doPost(this.getBaseURL() + PROFILE_EP + \"/get-emails\", {\n      username: user\n    }).then(response => {\n      return response;\n    });\n  }\n\n  twoFactor(token, imageid, secret) {\n    return this.doPost(this.getBaseURL() + AUTH_EP + \"/two-factor\", {\n      token: token,\n      imageid: imageid,\n      secret: secret\n    }).then(response => {\n      return response;\n    });\n  }\n\n  addTwoFactor(deviceName, username, email, randomString, timeStamp, secret) {\n    return this.doPost(this.getBaseURL() + PROFILE_EP + \"/add-two-factor\", {\n      DeviceName: deviceName,\n      Username: username,\n      Email: email,\n      RandomString: randomString,\n      TimeStamp: timeStamp,\n      Secret: secret\n    }).then(response => {\n      return response;\n    });\n  }\n\n  removeTwoFactor(username, email) {\n    return this.doPost(this.getBaseURL() + PROFILE_EP + \"/remove-two-factor\", {\n      Username: username,\n      Email: email\n    }).then(response => {\n      return response;\n    });\n  }\n\n  checkTwoFactorByAgainstUsername(username, token, googleAuthOpt) {\n    console.log(\"GOOG: \", googleAuthOpt);\n    return this.doPost(this.getBaseURL() + AUTH_EP + \"/two-factor/username\", {\n      username: username,\n      token: token,\n      GoogleAuth: googleAuthOpt\n    }).then(response => {\n      return response;\n    });\n  }\n\n  getBalance(username, usertype) {\n    return this.doPost(this.getBaseURL() + TRANSACTION + '/balance', {\n      username: username,\n      usertype: usertype\n    }).then(response => {\n      return response;\n    });\n  }\n\n  exchangeTokens(token, account, username) {\n    return this.doPost(this.getBaseURL() + STRIPE + '/exchangeTokens', {\n      public_token: token,\n      account_id: account,\n      username: username\n    }).then(response => {\n      return response;\n    });\n  }\n\n  stripeSaveCard(username, tokenId, cardType, cardName) {\n    return this.doPost(this.getBaseURL() + STRIPE + '/saveCard', {\n      username: username,\n      tokenId: tokenId,\n      cardType: cardType,\n      cardName: cardName\n    }).then(response => {\n      return response;\n    });\n  }\n\n  stripeGetSavedPaymentMethod(username, paymentType) {\n    return this.doPost(this.getBaseURL() + STRIPE + '/getSavedPaymentMethod', {\n      username: username,\n      paymentType: paymentType\n    }).then(response => {\n      return response;\n    });\n  }\n\n  getApplications(status) {\n    return this.doPost(this.getBaseURL() + APPLICATION + '/getApps', {\n      status: status\n    }).then(response => {\n      return response;\n    });\n  }\n\n  fileUpload(data) {\n    return this.doPost(this.getBaseURL() + FILE + '/upload', data).then(response => {\n      return response;\n    });\n  }\n\n  fileDownload(data) {\n    return this.doPost(this.getBaseURL() + FILE + '/download', data, {\n      responseType: 'blob'\n    }).then(response => {\n      console.log(response);\n      return response;\n    });\n  }\n\n  getAdminAwarded() {\n    return this.doPost(this.getBaseURL() + TRANSACTION + '/adminAwarded', {}).then(response => {\n      return response;\n    });\n  }\n\n  addApplication(username, covid, monthly, amount, fullName, story, file1, file2, file3, share) {\n    var body = {\n      username: username,\n      covid: covid,\n      monthly: monthly,\n      amount: amount,\n      fullName: fullName,\n      story: story,\n      file0: file1,\n      file1: file2,\n      file2: file3,\n      share: share\n    };\n    return this.doPost(this.getBaseURL() + APPLICATION + '/addApp', body);\n  }\n\n  getDonations(username) {\n    return this.doPost(this.getBaseURL() + TRANSACTION + '/donations', {\n      username: username\n    }).then(response => {\n      return response;\n    });\n  }\n\n  getAwarded(username) {\n    return this.doPost(this.getBaseURL() + TRANSACTION + '/awarded', {\n      username: username\n    }).then(response => {\n      return response;\n    });\n  }\n\n  getDeposit(username, card) {\n    if (card) {\n      return this.doPost(this.getBaseURL() + TRANSACTION + '/depositCard', {\n        username: username\n      }).then(response => {\n        return response;\n      });\n    } else {\n      return this.doPost(this.getBaseURL() + TRANSACTION + '/depositBank', {\n        username: username\n      }).then(response => {\n        return response;\n      });\n    }\n  }\n\n  getWithdraw(username, usertype, card) {\n    if (card) {\n      return this.doPost(this.getBaseURL() + TRANSACTION + '/withdrawCard', {\n        username: username,\n        usertype: usertype\n      }).then(response => {\n        return response;\n      });\n    } else {\n      return this.doPost(this.getBaseURL() + TRANSACTION + '/withdrawBank', {\n        username: username,\n        usertype: usertype\n      }).then(response => {\n        return response;\n      });\n    }\n  }\n\n  getPaymentMethod(username, card, connected) {\n    if (card) {\n      return this.doPost(this.getBaseURL() + TRANSACTION + '/cards', {\n        username: username\n      }).then(response => {\n        return response;\n      });\n    } else if (connected) {\n      return this.doPost(this.getBaseURL() + TRANSACTION + '/connectedBanks', {\n        username: username\n      }).then(response => {\n        return response;\n      });\n    } else {\n      return this.doPost(this.getBaseURL() + TRANSACTION + '/banks', {\n        username: username\n      }).then(response => {\n        return response;\n      });\n    }\n  }\n\n  removePaymentMethod(username, type, name, usertype) {\n    if (type === 'Bank') {\n      return this.doPost(this.getBaseURL() + STRIPE + '/removeBank', {\n        username: username,\n        nickname: name,\n        usertype: usertype\n      }).then(response => {\n        return response;\n      });\n    } else {\n      return this.doPost(this.getBaseURL() + STRIPE + '/removeCard', {\n        username: username,\n        type: type,\n        name: name\n      }).then(response => {\n        return response;\n      });\n    }\n  }\n\n  awardHUG(HUGID, username, amount, email) {\n    return this.doPost(this.getBaseURL() + STRIPE + '/transferFundFromHUGToRecipient', {\n      HUGID: HUGID,\n      recipientID: username,\n      amount: amount,\n      email: email\n    }).then(response => {\n      return response;\n    });\n  }\n\n  rejectApplicant(HUGID, username, email) {\n    return this.doPost(this.getBaseURL() + STRIPE + '/rejectRecipient', {\n      HUGID: HUGID,\n      username: username,\n      email: email\n    }).then(response => {\n      return response;\n    }).catch(error => {\n      console.log(\"502 by Rejection\");\n      return {\n        sucess: \"Updated Awarded status\"\n      };\n    });\n  }\n\n  getStripeAccountID(username, usertype) {\n    return this.doPost(this.getBaseURL() + STRIPE + '/getCustomAccountID', {\n      username: username,\n      usertype: usertype\n    }).then(response => {\n      return response;\n    });\n  }\n\n  getConnectedRequirements(username, usertype, accountID) {\n    return this.doPost(this.getBaseURL() + STRIPE + '/checkConnectRequirements', {\n      username: username,\n      usertype: usertype,\n      accountID: accountID\n    }).then(response => {\n      return response;\n    });\n  }\n\n  getStripeAccountBalance(username, usertype, accountID) {\n    return this.doPost(this.getBaseURL() + STRIPE + '/getAccountBalance', {\n      username: username,\n      usertype: usertype,\n      accountID: accountID\n    }).then(response => {\n      return response;\n    });\n  }\n\n  onboardingInfoReq(username, usertype, accountID, url) {\n    return this.doPost(this.getBaseURL() + STRIPE + '/onboardingInfoRequest', {\n      username: username,\n      usertype: usertype,\n      accountID: accountID,\n      successURL: url,\n      failureURL: url\n    }).then(response => {\n      return response;\n    });\n  }\n\n  donateToHug(username, HUGName, amount) {\n    return this.doPost(this.getBaseURL() + STRIPE + '/transferFundFromDonorToHUG', {\n      username: username,\n      HUGName: HUGName,\n      amount: amount\n    }).then(response => {\n      return response;\n    });\n  }\n\n  stripeDeposit(username, type, method, beforetax, afterTax, stripeFee, fee) {\n    return this.doPost(this.getBaseURL() + STRIPE + '/deposit', {\n      username: username,\n      paymentType: type,\n      paymentMethod: method,\n      amountToCharge: beforetax,\n      amountToDeposit: afterTax,\n      stripeFee: stripeFee,\n      managementFee: fee\n    }).then(response => {\n      return response;\n    });\n  }\n\n  getTransactionStatus(username, chargeID, type) {\n    return this.doPost(this.getBaseURL() + TRANSACTION + '/depositStatus', {\n      username: username,\n      chargeID: chargeID\n    }).then(response => {\n      return response;\n    });\n  }\n\n  getCustomBank(data) {\n    return this.doPost(this.getBaseURL() + STRIPE + '/getCustomBank', data).then(response => {\n      return response;\n    });\n  }\n\n  stripeTransfer(data) {\n    return this.doPost(this.getBaseURL() + STRIPE + '/transfer', data).then(response => {\n      return response;\n    });\n  }\n\n  stripePayout(data, update) {\n    if (update) {\n      return this.doPost(this.getBaseURL() + STRIPE + '/payoutUpdateTable', data).then(response => {\n        return response;\n      });\n    } else {\n      return this.doPost(this.getBaseURL() + STRIPE + '/payout', data).then(response => {\n        return response;\n      });\n    }\n  }\n\n  attachBankToCustomer(data, account) {\n    if (account === true) {\n      return this.doPost(this.getBaseURL() + STRIPE + '/attachBankToCustomAccount', data).then(response => {\n        return response;\n      });\n    } else {\n      return this.doPost(this.getBaseURL() + STRIPE + '/attachBankToCustomer', data).then(response => {\n        return response;\n      });\n    }\n  }\n\n  addBankToCustomTable(data) {\n    return this.doPost(this.getBaseURL() + STRIPE + '/addBankToCustomTable', data).then(response => {\n      return response;\n    });\n  }\n\n  login(username, password) {\n    return this.doPost(this.getBaseURL() + AUTH_EP + \"/login\", {\n      username: username,\n      password: password\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      console.log(response);\n\n      if (typeof response.userInfo !== \"undefined\") {\n        // Check if return type is LoginResponse\n        this.setSessionToken(response.token);\n        return response;\n      } else {\n        return response;\n      }\n    });\n  }\n  /**\n   * Retrieve a user's UserInfo\n   * @param userId: the user's unique id\n   */\n\n\n  getUserInfo(userId) {\n    return this.doGet(this.getBaseURL() + PROFILE_EP + \"/\".concat(userId, \"/userInfo\"));\n  }\n  /**\n   * Changes a user's password in Affordable\n   * @param oldPassword\n   * @param newPassword\n   */\n\n\n  changePassword(oldPassword, newPassword) {\n    return this.doPost(this.getBaseURL() + AUTH_EP + \"/change-password\", {\n      oldPassword: oldPassword,\n      newPassword: newPassword\n    });\n  }\n  /**\n   * Sends an email to the user providing their username and\n   * gives a link allowing them to change their password\n   * @param email\n   */\n\n\n  forgotUserNameOrPassword(email) {\n    return this.doPost(this.getBaseURL() + AUTH_EP + \"/forgot-password\", {\n      email: email\n    });\n  }\n  /**\n   * Resets the user's password from the email sent to them\n   * @param email\n   */\n\n\n  resetPassword(password, code) {\n    return this.doPost(this.getBaseURL() + AUTH_EP + \"/reset-password\", {\n      password: password,\n      code: code\n    });\n  }\n  /**\n   * Creates a user profile in Affordable\n   * @param profile\n   */\n\n\n  createProfile(profile) {\n    return this.doPost(this.getBaseURL() + PROFILE_EP, {\n      profile: profile\n    });\n  }\n  /**\n   * Gets whether a user has verified their email in Affordable\n   * @param userId\n   */\n\n\n  getEmailVer() {\n    return this.doGet(this.getBaseURL() + AUTH_EP + \"/get-verification\");\n  }\n  /**\n   * Gets a user profile in Affordable\n   * @param userId\n   */\n\n\n  getProfile(userId) {\n    return this.doGet(this.getBaseURL() + PROFILE_EP, {\n      userId: userId\n    });\n  }\n  /**\n   * Deletes a user profile in Affordable\n   * @param profile\n   */\n\n\n  deleteProfile(userId) {\n    return this.doDelete(this.getBaseURL() + PROFILE_EP, {\n      userId: userId\n    });\n  }\n  /**\n   * Gets the primary email address of a user in Affordable\n   * @param profile\n   */\n\n\n  getPrimaryEmail(username) {\n    return axios_1.default.get(this.getBaseURL() + PROFILE_EP + \"/get-primary-email\", {\n      params: {\n        username: username\n      },\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.data).catch(error => {\n      throw new AffordableHttpError(error);\n    });\n  }\n  /**\n   * Updates the primary email address of a user in Affordable\n   * @param\n   */\n\n\n  updatePrimaryEmail(newEmail) {\n    return this.doPost(this.getBaseURL() + AUTH_EP + \"/email/update\", {\n      email: newEmail\n    });\n  }\n  /**\n   * Create an organization\n   * @param organization\n   * @returns the organization\n   */\n\n\n  createOrganization(organization) {\n    return this.doPost(this.getBaseURL() + ORGANIZATION_EP, organization);\n  }\n  /**\n   * Update an organization\n   * @param organization\n   * @returns the organization\n   */\n\n\n  updateOrganization(organization) {\n    return this.doPost(this.getBaseURL() + ORGANIZATION_EP + \"/\".concat(organization.id), organization);\n  }\n  /**\n   * Get an organization in Affordable\n   * @param organizationId\n   */\n\n\n  getOrganization(organizationId) {\n    return this.doGet(this.getBaseURL() + ORGANIZATION_EP + \"/\".concat(organizationId));\n  }\n  /**\n   * Get the API key for an organization in Affordable\n   * @param organizationId\n   */\n\n\n  getApiKey(organizationId) {\n    return this.doGet(this.getBaseURL() + ORGANIZATION_EP + \"/\".concat(organizationId, \"/apiKey\"));\n  }\n  /**\n   * Get the API key for an organization in Affordable\n   * @param profile\n   */\n\n\n  getOrganizationsForUser(userId) {\n    return this.doGet(this.getBaseURL() + PROFILE_EP + \"/\".concat(userId, \"/organizations\"));\n  }\n  /**\n   * Add a user to an organization\n   * @param request\n   */\n\n\n  addUserToOrganization(request) {\n    return this.doPost(this.getBaseURL() + ORGANIZATION_EP + \"/\".concat(request.organizationId, \"/members\"), request);\n  }\n  /**\n   * Remove a user from an organization\n   * @param organizationId\n   * @param userId\n   */\n\n\n  removeMemberFromOrganization(organizationId, userId) {\n    return this.doDelete(this.getBaseURL() + ORGANIZATION_EP + \"/\".concat(organizationId, \"/members/\").concat(userId));\n  }\n  /**\n   * Create a Health Utilizing Grant\n   * @param grant\n   */\n\n\n  createGrant(grant) {\n    return this.doPost(this.getBaseURL() + GRANT_EP, grant);\n  }\n  /**\n   * Update a Health Utilizing Grant\n   * @param grant\n   */\n\n\n  updateGrant(grant) {\n    return this.doPut(this.getBaseURL() + GRANT_EP + \"/\".concat(grant.id), grant);\n  }\n  /**\n   * Get a Health Utilizing Grant\n   * @param id\n   */\n\n\n  getGrant(id) {\n    return this.doGet(this.getBaseURL() + GRANT_EP + \"/\".concat(id));\n  }\n  /**\n   * Delete a Health Utilizing Grant\n   * @param id\n   */\n\n\n  deleteGrant(id) {\n    return this.doDelete(this.getBaseURL() + GRANT_EP + \"/\".concat(id));\n  }\n  /**\n   * Get the list of grants that the user is eligible for\n   */\n\n\n  getEligibleGrants() {\n    return this.doGet(this.getBaseURL() + GRANT_EP);\n  }\n  /**\n   * Get the list of applicants for a grant that the user has permission to manage\n   */\n\n\n  getGrantApplicants(id) {\n    return this.doGet(this.getBaseURL() + GRANT_EP + \"/\".concat(id, \"/applicants\"));\n  }\n  /**\n   * Apply to a grant, if you are an eligible recipient.\n   */\n\n\n  applyToGrant(id) {\n    return this.doPut(this.getBaseURL() + GRANT_EP + \"/\".concat(id, \"/apply\"), {});\n  }\n  /**\n   * Award a grant to a user that has applied for a grant, if you belong to the organization that manages the grant.\n   * @param userId\n   * @param grantId\n   */\n\n\n  awardGrantToUser(userId, grantId) {\n    return this.doPut(this.getBaseURL() + GRANT_EP + \"/\".concat(grantId, \"/award/\").concat(userId), {});\n  }\n\n  addActivity(request) {\n    return this.doPost(this.getBaseURL() + ACTIVITY_EP + \"/add-activity\", request).then(response => {\n      return response;\n    });\n  }\n\n  deleteEmail(request) {\n    return this.doPost(this.getBaseURL() + PROFILE_EP + \"/delete-email\", request).then(response => {\n      return response;\n    });\n  }\n\n  checkEmail(request) {\n    return this.doPost(this.getBaseURL() + AUTH_EP + \"/email\", request).then(response => {\n      return response;\n    });\n  }\n  /**\n   *\n   * rest of this class is newly created API routes for AUTUMN 2020\n   *\n   */\n\n\n  stripeCustomer(id, name, email) {\n    return this.doPost(this.getBaseURL() + STRIPE + '/customer', {\n      id: id,\n      name: name,\n      email: email\n    }).then(response => {\n      return response;\n    });\n  }\n\n  stripeAddBank(id) {\n    return this.doPost(this.getBaseURL() + STRIPE + '/addBank', {\n      id: id\n    }).then(response => {\n      console.log(\"ENTERING ADD BANK\");\n      return response;\n    });\n  }\n\n}\n\nexports.AffordableClient = AffordableClient;\n\nclass AffordableHttpError extends Error {\n  constructor(error) {\n    super(error.message + \": \" + error.response.data.error);\n    this.responseStatus = error.response.status; // Set the prototype explicitly.\n\n    Object.setPrototypeOf(this, AffordableHttpError.prototype);\n  }\n\n}\n\nexports.AffordableHttpError = AffordableHttpError;","map":{"version":3,"sources":["/home/ubuntu/Connor/WorkOSU/client/dist/AffordableClient.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","AffordableHttpError","AffordableClient","axios_1","require","jsonwebtoken_1","universal_cookie_1","util_1","AUTH_EP","AffordableClientConstants","PROFILE_EP","SESSION_TOKEN_COOKIE_KEY","GRANT_EP","ORGANIZATION_EP","TRANSACTION","APPLICATION","STRIPE","FILE","ACTIVITY_EP","dotenv_1","config","default","defaults","withCredentials","BalanceResponse","constructor","cookies","getUserId","myUserId","getBaseURL","baseURL","process","env","REACT_APP_AF_BACKEND_URL","window","setBaseURL","url","getSessionToken","sessionToken","get","setSessionToken","token","set","maxAge","decoded","decode","JSON","parse","sub","id","getHeaders","doGet","endpoint","params","_a","headers","then","response","data","catch","error","doDelete","delete","doPost","body","axiosParams","post","assign","doPut","put","getMyUserInfo","getUserInfo","registerUser","user","getEmails","username","twoFactor","imageid","secret","addTwoFactor","deviceName","email","randomString","timeStamp","DeviceName","Username","Email","RandomString","TimeStamp","Secret","removeTwoFactor","checkTwoFactorByAgainstUsername","googleAuthOpt","console","log","GoogleAuth","getBalance","usertype","exchangeTokens","account","public_token","account_id","stripeSaveCard","tokenId","cardType","cardName","stripeGetSavedPaymentMethod","paymentType","getApplications","status","fileUpload","fileDownload","responseType","getAdminAwarded","addApplication","covid","monthly","amount","fullName","story","file1","file2","file3","share","file0","getDonations","getAwarded","getDeposit","card","getWithdraw","getPaymentMethod","connected","removePaymentMethod","type","name","nickname","awardHUG","HUGID","recipientID","rejectApplicant","sucess","getStripeAccountID","getConnectedRequirements","accountID","getStripeAccountBalance","onboardingInfoReq","successURL","failureURL","donateToHug","HUGName","stripeDeposit","method","beforetax","afterTax","stripeFee","fee","paymentMethod","amountToCharge","amountToDeposit","managementFee","getTransactionStatus","chargeID","getCustomBank","stripeTransfer","stripePayout","update","attachBankToCustomer","addBankToCustomTable","login","password","userInfo","userId","changePassword","oldPassword","newPassword","forgotUserNameOrPassword","resetPassword","code","createProfile","profile","getEmailVer","getProfile","deleteProfile","getPrimaryEmail","updatePrimaryEmail","newEmail","createOrganization","organization","updateOrganization","getOrganization","organizationId","getApiKey","getOrganizationsForUser","addUserToOrganization","request","removeMemberFromOrganization","createGrant","grant","updateGrant","getGrant","deleteGrant","getEligibleGrants","getGrantApplicants","applyToGrant","awardGrantToUser","grantId","addActivity","deleteEmail","checkEmail","stripeCustomer","stripeAddBank","Error","message","responseStatus","setPrototypeOf","prototype"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AffordableHttpError = exports.AffordableClient = void 0;\nconst axios_1 = __importDefault(require(\"axios\"));\nconst jsonwebtoken_1 = __importDefault(require(\"jsonwebtoken\"));\nconst universal_cookie_1 = __importDefault(require(\"universal-cookie\"));\nconst util_1 = require(\"./util\");\nvar AUTH_EP = util_1.AffordableClientConstants.AUTH_EP;\nvar PROFILE_EP = util_1.AffordableClientConstants.PROFILE_EP;\nvar SESSION_TOKEN_COOKIE_KEY = util_1.AffordableClientConstants.SESSION_TOKEN_COOKIE_KEY;\nvar GRANT_EP = util_1.AffordableClientConstants.GRANT_EP;\nvar ORGANIZATION_EP = util_1.AffordableClientConstants.ORGANIZATION_EP;\nvar TRANSACTION = util_1.AffordableClientConstants.TRANSACTION;\nvar APPLICATION = util_1.AffordableClientConstants.APPLICATION;\nvar STRIPE = util_1.AffordableClientConstants.STRIPE;\nvar FILE = util_1.AffordableClientConstants.FILE;\nvar ACTIVITY_EP = util_1.AffordableClientConstants.ACTIVITY_EP;\nconst dotenv_1 = require(\"dotenv\");\ndotenv_1.config();\naxios_1.default.defaults.withCredentials = true;\nclass BalanceResponse {\n}\n;\nclass AffordableClient {\n    constructor() {\n        this.cookies = new universal_cookie_1.default;\n    }\n    //For tlcoaesting purposes\n    getUserId() {\n        return this.myUserId;\n    }\n    getBaseURL() {\n        return this.baseURL ? this.baseURL : process.env.REACT_APP_AF_BACKEND_URL || window.REACT_APP_AF_BACKEND_URL;\n    }\n    setBaseURL(url) {\n        this.baseURL = url;\n    }\n    getSessionToken() {\n        return this.sessionToken ? this.sessionToken : this.cookies.get(SESSION_TOKEN_COOKIE_KEY);\n    }\n    setSessionToken(token) {\n        this.sessionToken = token;\n        this.cookies.set(SESSION_TOKEN_COOKIE_KEY, token, { maxAge: 60 * 60 * 8 } // 8 hours\n        );\n        // Get the UserInfo out of the token\n        const decoded = jsonwebtoken_1.default.decode(token);\n        this.myUserId = JSON.parse(decoded.sub).id;\n    }\n    getHeaders() {\n        return this.getSessionToken() ? {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": \"Bearer \" + this.getSessionToken()\n        } : {\n            \"Content-Type\": \"application/json\"\n        };\n    }\n    doGet(endpoint, params) {\n        var _a;\n        return axios_1.default.get(endpoint, {\n            params: params,\n            headers: (_a = params === null || params === void 0 ? void 0 : params.headers) !== null && _a !== void 0 ? _a : this.getHeaders()\n        }).then((response) => {\n            return response.data;\n        }).catch((error) => {\n            return null;\n            //throw new AffordableHttpError(error)\n        });\n    }\n    doDelete(endpoint, params) {\n        var _a;\n        return axios_1.default.delete(endpoint, {\n            params: params,\n            headers: (_a = params === null || params === void 0 ? void 0 : params.headers) !== null && _a !== void 0 ? _a : this.getHeaders()\n        }).then((response) => {\n            return response.data;\n        }).catch((error) => {\n            throw new AffordableHttpError(error);\n        });\n    }\n    doPost(endpoint, body, axiosParams) {\n        var _a;\n        return axios_1.default.post(endpoint, body, Object.assign(Object.assign({}, axiosParams), { headers: (_a = axiosParams === null || axiosParams === void 0 ? void 0 : axiosParams.headers) !== null && _a !== void 0 ? _a : this.getHeaders() })).then((response) => {\n            return response.data;\n        }).catch((error) => {\n            throw new AffordableHttpError(error);\n        });\n    }\n    doPut(endpoint, body, axiosParams) {\n        return axios_1.default.put(endpoint, body, Object.assign(Object.assign({}, axiosParams), { headers: this.getHeaders() })).then((response) => {\n            return response.data;\n        }).catch((error) => {\n            throw new AffordableHttpError(error);\n        });\n    }\n    getMyUserInfo() {\n        return this.getUserInfo(this.myUserId);\n    }\n    /**\n     * Create a user account in Affordable\n     * @param user\n     */\n    registerUser(user) {\n        return this.doPost(this.getBaseURL() + AUTH_EP, user, {\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n            .then((response) => {\n            this.setSessionToken(response.token);\n            return response;\n        });\n    }\n    getEmails(user) {\n        return this.doPost(this.getBaseURL() + PROFILE_EP + \"/get-emails\", { username: user }).then((response) => {\n            return response;\n        });\n    }\n    twoFactor(token, imageid, secret) {\n        return this.doPost(this.getBaseURL() + AUTH_EP + \"/two-factor\", {\n            token: token,\n            imageid: imageid,\n            secret: secret\n        }).then((response) => {\n            return response;\n        });\n    }\n    addTwoFactor(deviceName, username, email, randomString, timeStamp, secret) {\n        return this.doPost(this.getBaseURL() + PROFILE_EP + \"/add-two-factor\", {\n            DeviceName: deviceName,\n            Username: username,\n            Email: email,\n            RandomString: randomString,\n            TimeStamp: timeStamp,\n            Secret: secret\n        }).then((response) => {\n            return response;\n        });\n    }\n    removeTwoFactor(username, email) {\n        return this.doPost(this.getBaseURL() + PROFILE_EP + \"/remove-two-factor\", {\n            Username: username,\n            Email: email\n        }).then((response) => {\n            return response;\n        });\n    }\n    checkTwoFactorByAgainstUsername(username, token, googleAuthOpt) {\n        console.log(\"GOOG: \", googleAuthOpt);\n        return this.doPost(this.getBaseURL() + AUTH_EP + \"/two-factor/username\", {\n            username: username,\n            token: token,\n            GoogleAuth: googleAuthOpt\n        }).then((response) => {\n            return response;\n        });\n    }\n    getBalance(username, usertype) {\n        return this.doPost(this.getBaseURL() + TRANSACTION + '/balance', {\n            username: username,\n            usertype: usertype\n        }).then((response) => {\n            return response;\n        });\n    }\n    exchangeTokens(token, account, username) {\n        return this.doPost(this.getBaseURL() + STRIPE + '/exchangeTokens', {\n            public_token: token,\n            account_id: account,\n            username: username\n        }).then((response) => {\n            return response;\n        });\n    }\n    stripeSaveCard(username, tokenId, cardType, cardName) {\n        return this.doPost(this.getBaseURL() + STRIPE + '/saveCard', {\n            username: username,\n            tokenId: tokenId,\n            cardType: cardType,\n            cardName: cardName\n        }).then((response) => {\n            return response;\n        });\n    }\n    stripeGetSavedPaymentMethod(username, paymentType) {\n        return this.doPost(this.getBaseURL() + STRIPE + '/getSavedPaymentMethod', {\n            username: username,\n            paymentType: paymentType\n        }).then((response) => {\n            return response;\n        });\n    }\n    getApplications(status) {\n        return this.doPost(this.getBaseURL() + APPLICATION + '/getApps', { status: status\n        }).then((response) => {\n            return response;\n        });\n    }\n    fileUpload(data) {\n        return this.doPost(this.getBaseURL() + FILE + '/upload', data).then((response) => {\n            return response;\n        });\n    }\n    fileDownload(data) {\n        return this.doPost(this.getBaseURL() + FILE + '/download', data, { responseType: 'blob' }).then((response) => {\n            console.log(response);\n            return response;\n        });\n    }\n    getAdminAwarded() {\n        return this.doPost(this.getBaseURL() + TRANSACTION + '/adminAwarded', {}).then((response) => {\n            return response;\n        });\n    }\n    addApplication(username, covid, monthly, amount, fullName, story, file1, file2, file3, share) {\n        let body = {\n            username: username,\n            covid: covid,\n            monthly: monthly,\n            amount: amount,\n            fullName: fullName,\n            story: story,\n            file0: file1,\n            file1: file2,\n            file2: file3,\n            share: share\n        };\n        return this.doPost(this.getBaseURL() + APPLICATION + '/addApp', body);\n    }\n    getDonations(username) {\n        return this.doPost(this.getBaseURL() + TRANSACTION + '/donations', { username: username\n        }).then((response) => {\n            return response;\n        });\n    }\n    getAwarded(username) {\n        return this.doPost(this.getBaseURL() + TRANSACTION + '/awarded', { username: username\n        }).then((response) => {\n            return response;\n        });\n    }\n    getDeposit(username, card) {\n        if (card) {\n            return this.doPost(this.getBaseURL() + TRANSACTION + '/depositCard', { username: username\n            }).then((response) => {\n                return response;\n            });\n        }\n        else {\n            return this.doPost(this.getBaseURL() + TRANSACTION + '/depositBank', { username: username\n            }).then((response) => {\n                return response;\n            });\n        }\n    }\n    getWithdraw(username, usertype, card) {\n        if (card) {\n            return this.doPost(this.getBaseURL() + TRANSACTION + '/withdrawCard', { username: username, usertype: usertype\n            }).then((response) => {\n                return response;\n            });\n        }\n        else {\n            return this.doPost(this.getBaseURL() + TRANSACTION + '/withdrawBank', { username: username, usertype: usertype\n            }).then((response) => {\n                return response;\n            });\n        }\n    }\n    getPaymentMethod(username, card, connected) {\n        if (card) {\n            return this.doPost(this.getBaseURL() + TRANSACTION + '/cards', { username: username\n            }).then((response) => {\n                return response;\n            });\n        }\n        else if (connected) {\n            return this.doPost(this.getBaseURL() + TRANSACTION + '/connectedBanks', { username: username\n            }).then((response) => {\n                return response;\n            });\n        }\n        else {\n            return this.doPost(this.getBaseURL() + TRANSACTION + '/banks', { username: username\n            }).then((response) => {\n                return response;\n            });\n        }\n    }\n    removePaymentMethod(username, type, name, usertype) {\n        if (type === 'Bank') {\n            return this.doPost(this.getBaseURL() + STRIPE + '/removeBank', { username: username, nickname: name, usertype: usertype\n            }).then((response) => {\n                return response;\n            });\n        }\n        else {\n            return this.doPost(this.getBaseURL() + STRIPE + '/removeCard', { username: username, type: type, name: name\n            }).then((response) => {\n                return response;\n            });\n        }\n    }\n    awardHUG(HUGID, username, amount, email) {\n        return this.doPost(this.getBaseURL() + STRIPE + '/transferFundFromHUGToRecipient', {\n            HUGID: HUGID,\n            recipientID: username,\n            amount: amount,\n            email: email\n        }).then((response) => {\n            return response;\n        });\n    }\n    rejectApplicant(HUGID, username, email) {\n        return this.doPost(this.getBaseURL() + STRIPE + '/rejectRecipient', {\n            HUGID: HUGID,\n            username: username,\n            email: email\n        }).then((response) => {\n            return response;\n        }).catch((error) => {\n            console.log(\"502 by Rejection\");\n            return { sucess: \"Updated Awarded status\" };\n        });\n    }\n    getStripeAccountID(username, usertype) {\n        return this.doPost(this.getBaseURL() + STRIPE + '/getCustomAccountID', { username: username, usertype: usertype\n        }).then((response) => {\n            return response;\n        });\n    }\n    getConnectedRequirements(username, usertype, accountID) {\n        return this.doPost(this.getBaseURL() + STRIPE + '/checkConnectRequirements', { username: username, usertype: usertype, accountID: accountID\n        }).then((response) => {\n            return response;\n        });\n    }\n    getStripeAccountBalance(username, usertype, accountID) {\n        return this.doPost(this.getBaseURL() + STRIPE + '/getAccountBalance', { username: username, usertype: usertype, accountID: accountID\n        }).then((response) => {\n            return response;\n        });\n    }\n    onboardingInfoReq(username, usertype, accountID, url) {\n        return this.doPost(this.getBaseURL() + STRIPE + '/onboardingInfoRequest', { username: username, usertype: usertype, accountID: accountID,\n            successURL: url, failureURL: url\n        }).then((response) => {\n            return response;\n        });\n    }\n    donateToHug(username, HUGName, amount) {\n        return this.doPost(this.getBaseURL() + STRIPE + '/transferFundFromDonorToHUG', { username: username, HUGName: HUGName, amount: amount\n        }).then((response) => {\n            return response;\n        });\n    }\n    stripeDeposit(username, type, method, beforetax, afterTax, stripeFee, fee) {\n        return this.doPost(this.getBaseURL() + STRIPE + '/deposit', {\n            username: username,\n            paymentType: type,\n            paymentMethod: method,\n            amountToCharge: beforetax,\n            amountToDeposit: afterTax,\n            stripeFee: stripeFee,\n            managementFee: fee\n        }).then((response) => {\n            return response;\n        });\n    }\n    getTransactionStatus(username, chargeID, type) {\n        return this.doPost(this.getBaseURL() + TRANSACTION + '/depositStatus', { username: username, chargeID: chargeID\n        }).then((response) => {\n            return response;\n        });\n    }\n    getCustomBank(data) {\n        return this.doPost(this.getBaseURL() + STRIPE + '/getCustomBank', data).then((response) => {\n            return response;\n        });\n    }\n    stripeTransfer(data) {\n        return this.doPost(this.getBaseURL() + STRIPE + '/transfer', data).then((response) => {\n            return response;\n        });\n    }\n    stripePayout(data, update) {\n        if (update) {\n            return this.doPost(this.getBaseURL() + STRIPE + '/payoutUpdateTable', data).then((response) => {\n                return response;\n            });\n        }\n        else {\n            return this.doPost(this.getBaseURL() + STRIPE + '/payout', data).then((response) => {\n                return response;\n            });\n        }\n    }\n    attachBankToCustomer(data, account) {\n        if (account === true) {\n            return this.doPost(this.getBaseURL() + STRIPE + '/attachBankToCustomAccount', data).then((response) => {\n                return response;\n            });\n        }\n        else {\n            return this.doPost(this.getBaseURL() + STRIPE + '/attachBankToCustomer', data).then((response) => {\n                return response;\n            });\n        }\n    }\n    addBankToCustomTable(data) {\n        return this.doPost(this.getBaseURL() + STRIPE + '/addBankToCustomTable', data).then((response) => {\n            return response;\n        });\n    }\n    login(username, password) {\n        return this.doPost(this.getBaseURL() + AUTH_EP + \"/login\", {\n            username: username,\n            password: password\n        }, {\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n            .then((response) => {\n            console.log(response);\n            if (typeof response.userInfo !== \"undefined\") { // Check if return type is LoginResponse\n                this.setSessionToken(response.token);\n                return response;\n            }\n            else {\n                return response;\n            }\n        });\n    }\n    /**\n     * Retrieve a user's UserInfo\n     * @param userId: the user's unique id\n     */\n    getUserInfo(userId) {\n        return this.doGet(this.getBaseURL() + PROFILE_EP + `/${userId}/userInfo`);\n    }\n    /**\n     * Changes a user's password in Affordable\n     * @param oldPassword\n     * @param newPassword\n     */\n    changePassword(oldPassword, newPassword) {\n        return this.doPost(this.getBaseURL() + AUTH_EP + \"/change-password\", {\n            oldPassword: oldPassword,\n            newPassword: newPassword\n        });\n    }\n    /**\n     * Sends an email to the user providing their username and\n     * gives a link allowing them to change their password\n     * @param email\n     */\n    forgotUserNameOrPassword(email) {\n        return this.doPost(this.getBaseURL() + AUTH_EP + \"/forgot-password\", {\n            email: email\n        });\n    }\n    /**\n     * Resets the user's password from the email sent to them\n     * @param email\n     */\n    resetPassword(password, code) {\n        return this.doPost(this.getBaseURL() + AUTH_EP + \"/reset-password\", {\n            password: password,\n            code: code\n        });\n    }\n    /**\n     * Creates a user profile in Affordable\n     * @param profile\n     */\n    createProfile(profile) {\n        return this.doPost(this.getBaseURL() + PROFILE_EP, { profile: profile });\n    }\n    /**\n     * Gets whether a user has verified their email in Affordable\n     * @param userId\n     */\n    getEmailVer() {\n        return this.doGet(this.getBaseURL() + AUTH_EP + \"/get-verification\");\n    }\n    /**\n     * Gets a user profile in Affordable\n     * @param userId\n     */\n    getProfile(userId) {\n        return this.doGet(this.getBaseURL() + PROFILE_EP, { userId: userId });\n    }\n    /**\n     * Deletes a user profile in Affordable\n     * @param profile\n     */\n    deleteProfile(userId) {\n        return this.doDelete(this.getBaseURL() + PROFILE_EP, { userId: userId });\n    }\n    /**\n     * Gets the primary email address of a user in Affordable\n     * @param profile\n     */\n    getPrimaryEmail(username) {\n        return axios_1.default.get(this.getBaseURL() + PROFILE_EP + \"/get-primary-email\", {\n            params: { username: username },\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n            .then((response) => response.data)\n            .catch((error) => {\n            throw new AffordableHttpError(error);\n        });\n    }\n    /**\n     * Updates the primary email address of a user in Affordable\n     * @param\n     */\n    updatePrimaryEmail(newEmail) {\n        return this.doPost(this.getBaseURL() + AUTH_EP + \"/email/update\", {\n            email: newEmail\n        });\n    }\n    /**\n     * Create an organization\n     * @param organization\n     * @returns the organization\n     */\n    createOrganization(organization) {\n        return this.doPost(this.getBaseURL() + ORGANIZATION_EP, organization);\n    }\n    /**\n     * Update an organization\n     * @param organization\n     * @returns the organization\n     */\n    updateOrganization(organization) {\n        return this.doPost(this.getBaseURL() + ORGANIZATION_EP + `/${organization.id}`, organization);\n    }\n    /**\n     * Get an organization in Affordable\n     * @param organizationId\n     */\n    getOrganization(organizationId) {\n        return this.doGet(this.getBaseURL() + ORGANIZATION_EP + `/${organizationId}`);\n    }\n    /**\n     * Get the API key for an organization in Affordable\n     * @param organizationId\n     */\n    getApiKey(organizationId) {\n        return this.doGet(this.getBaseURL() + ORGANIZATION_EP + `/${organizationId}/apiKey`);\n    }\n    /**\n     * Get the API key for an organization in Affordable\n     * @param profile\n     */\n    getOrganizationsForUser(userId) {\n        return this.doGet(this.getBaseURL() + PROFILE_EP + `/${userId}/organizations`);\n    }\n    /**\n     * Add a user to an organization\n     * @param request\n     */\n    addUserToOrganization(request) {\n        return this.doPost(this.getBaseURL() + ORGANIZATION_EP + `/${request.organizationId}/members`, request);\n    }\n    /**\n     * Remove a user from an organization\n     * @param organizationId\n     * @param userId\n     */\n    removeMemberFromOrganization(organizationId, userId) {\n        return this.doDelete(this.getBaseURL() + ORGANIZATION_EP + `/${organizationId}/members/${userId}`);\n    }\n    /**\n     * Create a Health Utilizing Grant\n     * @param grant\n     */\n    createGrant(grant) {\n        return this.doPost(this.getBaseURL() + GRANT_EP, grant);\n    }\n    /**\n     * Update a Health Utilizing Grant\n     * @param grant\n     */\n    updateGrant(grant) {\n        return this.doPut(this.getBaseURL() + GRANT_EP + `/${grant.id}`, grant);\n    }\n    /**\n     * Get a Health Utilizing Grant\n     * @param id\n     */\n    getGrant(id) {\n        return this.doGet(this.getBaseURL() + GRANT_EP + `/${id}`);\n    }\n    /**\n     * Delete a Health Utilizing Grant\n     * @param id\n     */\n    deleteGrant(id) {\n        return this.doDelete(this.getBaseURL() + GRANT_EP + `/${id}`);\n    }\n    /**\n     * Get the list of grants that the user is eligible for\n     */\n    getEligibleGrants() {\n        return this.doGet(this.getBaseURL() + GRANT_EP);\n    }\n    /**\n     * Get the list of applicants for a grant that the user has permission to manage\n     */\n    getGrantApplicants(id) {\n        return this.doGet(this.getBaseURL() + GRANT_EP + `/${id}/applicants`);\n    }\n    /**\n     * Apply to a grant, if you are an eligible recipient.\n     */\n    applyToGrant(id) {\n        return this.doPut(this.getBaseURL() + GRANT_EP + `/${id}/apply`, {});\n    }\n    /**\n     * Award a grant to a user that has applied for a grant, if you belong to the organization that manages the grant.\n     * @param userId\n     * @param grantId\n     */\n    awardGrantToUser(userId, grantId) {\n        return this.doPut(this.getBaseURL() + GRANT_EP + `/${grantId}/award/${userId}`, {});\n    }\n    addActivity(request) {\n        return this.doPost(this.getBaseURL() + ACTIVITY_EP + \"/add-activity\", request).then((response) => {\n            return response;\n        });\n    }\n    deleteEmail(request) {\n        return this.doPost(this.getBaseURL() + PROFILE_EP + \"/delete-email\", request).then((response) => {\n            return response;\n        });\n    }\n    checkEmail(request) {\n        return this.doPost(this.getBaseURL() + AUTH_EP + \"/email\", request).then((response) => {\n            return response;\n        });\n    }\n    /**\n     *\n     * rest of this class is newly created API routes for AUTUMN 2020\n     *\n     */\n    stripeCustomer(id, name, email) {\n        return this.doPost(this.getBaseURL() + STRIPE + '/customer', {\n            id: id,\n            name: name,\n            email: email,\n        }).then((response) => {\n            return response;\n        });\n    }\n    stripeAddBank(id) {\n        return this.doPost(this.getBaseURL() + STRIPE + '/addBank', {\n            id: id\n        }).then((response) => {\n            console.log(\"ENTERING ADD BANK\");\n            return response;\n        });\n    }\n}\nexports.AffordableClient = AffordableClient;\nclass AffordableHttpError extends Error {\n    constructor(error) {\n        super(error.message + \": \" + error.response.data.error);\n        this.responseStatus = error.response.status;\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, AffordableHttpError.prototype);\n    }\n}\nexports.AffordableHttpError = AffordableHttpError;\n"]},"metadata":{},"sourceType":"script"}