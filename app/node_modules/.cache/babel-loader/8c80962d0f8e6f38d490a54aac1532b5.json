{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Connor/WorkOSU/app/src/pages/MainPages/ProfileForm/FormComponents.tsx\";\nimport React, { Component } from \"react\";\nvar ValidStatus;\n\n(function (ValidStatus) {\n  ValidStatus[ValidStatus[\"VALID\"] = 0] = \"VALID\";\n  ValidStatus[ValidStatus[\"INVALID\"] = 1] = \"INVALID\";\n  ValidStatus[ValidStatus[\"UNCHECKED\"] = 2] = \"UNCHECKED\";\n})(ValidStatus || (ValidStatus = {}));\n\nexport class Input extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isValid: ValidStatus.UNCHECKED,\n      value: this.props.value,\n      hasBeenModified: false\n    };\n    this.onChange = this.onChange.bind(this);\n    this.getClassName = this.getClassName.bind(this);\n  }\n\n  getClassName() {\n    var className = \"form-control\";\n\n    if (this.props.optional) {\n      className += \" optional\";\n    }\n\n    if (this.state.hasBeenModified) {\n      switch (this.state.isValid) {\n        case ValidStatus.VALID:\n          className += \" is-valid\";\n          break;\n\n        case ValidStatus.INVALID:\n          className += \" is-invalid\";\n          break;\n\n        case ValidStatus.UNCHECKED:\n          break;\n      }\n    }\n\n    return className;\n  }\n\n  onChange(event) {\n    console.log(event.target.value);\n    var validStatus;\n\n    if (this.props.validationFunction !== undefined) {\n      validStatus = this.props.validationFunction(event.target.value) ? ValidStatus.VALID : ValidStatus.INVALID;\n    } else {\n      validStatus = ValidStatus.UNCHECKED;\n    }\n\n    this.setState({\n      value: event.target.value,\n      isValid: validStatus,\n      hasBeenModified: true\n    });\n\n    if (this.props.onChange) {\n      this.props.onChange(event);\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.value !== this.state.value) {\n      return true;\n    }\n\n    return this.state.value !== nextState.value || this.state.isValid !== nextState.isValid;\n  }\n\n  componentDidUpdate(prevProps) {\n    this.onChange({\n      target: {\n        value: this.props.value\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: this.props.name,\n      className: \"form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, this.props.title + (this.props.optional ? \" (Optional)\" : \"\")), /*#__PURE__*/React.createElement(\"input\", {\n      className: this.getClassName(),\n      id: this.props.name,\n      name: this.props.name,\n      type: this.props.inputType,\n      placeholder: this.props.placeholder // defaultValue={this.props.value}\n      ,\n      value: this.state.value,\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }, \"REQUIRED: \".concat(this.props.placeholder)));\n  }\n\n}\nInput.defaultProps = {\n  optional: false\n};\nexport class Select extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isValid: ValidStatus.UNCHECKED,\n      value: this.props.value,\n      hasBeenModified: false\n    };\n    this.onChange = this.onChange.bind(this);\n    this.getClassName = this.getClassName.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.value !== this.state.value) {\n      return true;\n    }\n\n    return this.state.value !== nextState.value || this.state.isValid !== nextState.isValid;\n  }\n\n  componentDidUpdate() {\n    this.onChange({\n      target: {\n        value: this.props.value\n      }\n    });\n  }\n\n  getClassName() {\n    var className = \"form-control\";\n\n    if (this.props.optional) {\n      className += \" optional\";\n    }\n\n    switch (this.state.isValid) {\n      case ValidStatus.VALID:\n        className += \" is-valid\";\n        break;\n\n      case ValidStatus.INVALID:\n        className += \" is-invalid\";\n        break;\n\n      case ValidStatus.UNCHECKED:\n        break;\n    }\n\n    return className;\n  }\n\n  onChange(event) {\n    console.log(\"onChange\");\n    this.setState({\n      value: event.target.value,\n      isValid: this.state.value !== this.props.placeholder ? ValidStatus.VALID : ValidStatus.INVALID,\n      hasBeenModified: true\n    });\n\n    if (this.props.onChange) {\n      this.props.onChange(event);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: this.props.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }\n    }, this.props.title + (this.props.optional ? \" (Optional)\" : \"\")), /*#__PURE__*/React.createElement(\"select\", {\n      id: this.props.name,\n      name: this.props.name,\n      value: this.state.value,\n      onChange: this.onChange,\n      className: this.getClassName(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }\n    }, this.props.placeholder), this.props.choices.map(choice => {\n      /**\n       * If it's an object, look at the value and text fields.\n       * If it's a primitive, then both the value and text/label are the primitive\n       */\n      if (typeof choice === \"object\") {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: choice.value,\n          label: choice.text,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 17\n          }\n        }, choice.text);\n      } else {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: choice,\n          label: choice,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 17\n          }\n        }, choice);\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }\n    }, \"REQUIRED: \".concat(this.props.placeholder)));\n  }\n\n}\nSelect.defaultProps = {\n  optional: false\n};","map":{"version":3,"sources":["/home/ubuntu/Connor/WorkOSU/app/src/pages/MainPages/ProfileForm/FormComponents.tsx"],"names":["React","Component","ValidStatus","Input","constructor","props","state","isValid","UNCHECKED","value","hasBeenModified","onChange","bind","getClassName","className","optional","VALID","INVALID","event","console","log","target","validStatus","validationFunction","undefined","setState","shouldComponentUpdate","nextProps","nextState","componentDidUpdate","prevProps","render","name","title","inputType","placeholder","defaultProps","Select","choices","map","choice","text"],"mappings":"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","sourcesContent":["import React, { Component, ChangeEvent, ChangeEventHandler } from \"react\";\n\nenum ValidStatus {\n  VALID, // e.g. this field is valid\n  INVALID, // e.g. this field is invalid\n  UNCHECKED // e.g. this field has not been checked and will not be checked until input is provided\n}\n\nexport interface InputProps {\n  name: string;\n  title: string;\n  inputType: string;\n  placeholder: string;\n  value: string;\n  onChange: ChangeEventHandler<HTMLInputElement>;\n  optional: boolean;\n  validationFunction?: (value) => boolean;\n}\n\ninterface InputState {\n  value: string;\n  isValid: ValidStatus;\n  hasBeenModified: boolean;\n}\n\nexport class Input extends Component<InputProps, InputState> {\n  constructor(props: InputProps) {\n    super(props);\n\n    this.state = {\n      isValid: ValidStatus.UNCHECKED,\n      value: this.props.value,\n      hasBeenModified: false\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.getClassName = this.getClassName.bind(this);\n  }\n\n  public static defaultProps: Partial<InputProps> = {\n    optional: false\n  };\n\n  getClassName(): string {\n    let className = \"form-control\";\n    if (this.props.optional) {\n      className += \" optional\";\n    }\n    if (this.state.hasBeenModified) {\n      switch (this.state.isValid) {\n        case ValidStatus.VALID:\n          className += \" is-valid\";\n          break;\n        case ValidStatus.INVALID:\n          className += \" is-invalid\";\n          break;\n        case ValidStatus.UNCHECKED:\n          break;\n      }\n    }\n    return className;\n  }\n\n  onChange(event: ChangeEvent<HTMLInputElement>): void {\n    console.log(event.target.value);\n    let validStatus: ValidStatus;\n    if (this.props.validationFunction !== undefined) {\n      validStatus = this.props.validationFunction(event.target.value)\n        ? ValidStatus.VALID\n        : ValidStatus.INVALID;\n    } else {\n      validStatus = ValidStatus.UNCHECKED;\n    }\n    this.setState({\n      value: event.target.value,\n      isValid: validStatus,\n      hasBeenModified: true\n    });\n    if (this.props.onChange) {\n      this.props.onChange(event);\n    }\n  }\n\n  shouldComponentUpdate(\n    nextProps: Readonly<InputProps>,\n    nextState: Readonly<InputState>\n  ): boolean {\n    if (nextProps.value !== this.state.value) {\n      return true;\n    }\n    return (\n      this.state.value !== nextState.value ||\n      this.state.isValid !== nextState.isValid\n    );\n  }\n\n  componentDidUpdate(prevProps: Readonly<InputProps>): void {\n    this.onChange({ target: { value: this.props.value } } as Pick<\n      ChangeEvent<HTMLInputElement>,\n      keyof ChangeEvent<HTMLInputElement>\n    >);\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div className=\"form-group\">\n        <label htmlFor={this.props.name} className=\"form-label\">\n          {this.props.title + (this.props.optional ? \" (Optional)\" : \"\")}\n        </label>\n        <input\n          className={this.getClassName()}\n          id={this.props.name}\n          name={this.props.name}\n          type={this.props.inputType}\n          placeholder={this.props.placeholder}\n          // defaultValue={this.props.value}\n          value={this.state.value}\n          onChange={this.onChange}\n        />\n        <div className=\"invalid-feedback\">{`REQUIRED: ${this.props.placeholder}`}</div>\n      </div>\n    );\n  }\n}\n\ninterface SelectState {\n  value: string;\n  isValid: ValidStatus;\n  hasBeenModified: boolean;\n}\n\nexport interface SelectOption {\n  value: string | undefined;\n  text: string;\n}\n\nexport interface SelectProps {\n  name: string;\n  title: string;\n  placeholder: string;\n  value: string;\n  onChange: ChangeEventHandler<HTMLSelectElement>;\n  optional: boolean;\n  choices: Array<string | SelectOption>;\n}\n\nexport class Select extends Component<SelectProps, SelectState> {\n  constructor(props: SelectProps) {\n    super(props);\n\n    this.state = {\n      isValid: ValidStatus.UNCHECKED,\n      value: this.props.value,\n      hasBeenModified: false\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.getClassName = this.getClassName.bind(this);\n  }\n\n  public static defaultProps: Partial<SelectProps> = {\n    optional: false\n  };\n\n  shouldComponentUpdate(\n    nextProps: Readonly<SelectProps>,\n    nextState: Readonly<SelectState>\n  ): boolean {\n    if (nextProps.value !== this.state.value) {\n      return true;\n    }\n    return (\n      this.state.value !== nextState.value ||\n      this.state.isValid !== nextState.isValid\n    );\n  }\n\n  componentDidUpdate(): void {\n    this.onChange({ target: { value: this.props.value } } as Pick<\n      ChangeEvent<HTMLSelectElement>,\n      keyof ChangeEvent<HTMLSelectElement>\n    >);\n  }\n\n  getClassName(): string {\n    let className = \"form-control\";\n    if (this.props.optional) {\n      className += \" optional\";\n    }\n    switch (this.state.isValid) {\n      case ValidStatus.VALID:\n        className += \" is-valid\";\n        break;\n      case ValidStatus.INVALID:\n        className += \" is-invalid\";\n        break;\n      case ValidStatus.UNCHECKED:\n        break;\n    }\n    return className;\n  }\n\n  onChange(event: ChangeEvent<HTMLSelectElement>): void {\n    console.log(\"onChange\");\n    this.setState({\n      value: event.target.value,\n      isValid:\n        this.state.value !== this.props.placeholder\n          ? ValidStatus.VALID\n          : ValidStatus.INVALID,\n      hasBeenModified: true\n    });\n    if (this.props.onChange) {\n      this.props.onChange(event);\n    }\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div className=\"form-group\">\n        <label htmlFor={this.props.name}>\n          {this.props.title + (this.props.optional ? \" (Optional)\" : \"\")}\n        </label>\n        <select\n          id={this.props.name}\n          name={this.props.name}\n          value={this.state.value}\n          onChange={this.onChange}\n          className={this.getClassName()}\n        >\n          <option value=\"\" disabled>\n            {this.props.placeholder}\n          </option>\n          {this.props.choices.map(choice => {\n            /**\n             * If it's an object, look at the value and text fields.\n             * If it's a primitive, then both the value and text/label are the primitive\n             */\n            if (typeof choice === \"object\") {\n              return (\n                <option value={choice.value} label={choice.text}>\n                  {choice.text}\n                </option>\n              );\n            } else {\n              return (\n                <option value={choice} label={choice}>\n                  {choice}\n                </option>\n              );\n            }\n          })}\n        </select>\n        <div className=\"invalid-feedback\">{`REQUIRED: ${this.props.placeholder}`}</div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}