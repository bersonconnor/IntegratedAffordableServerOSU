{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\n\nvar _require = require('./Error'),\n    StripeError = _require.StripeError;\n\nclass StreamProcessingError extends StripeError {} // Method for formatting HTTP body for the multipart/form-data specification\n// Mostly taken from Fermata.js\n// https://github.com/natevw/fermata/blob/5d9732a33d776ce925013a265935facd1626cc88/fermata.js#L315-L343\n\n\nvar multipartDataGenerator = (method, data, headers) => {\n  var segno = (Math.round(Math.random() * 1e16) + Math.round(Math.random() * 1e16)).toString();\n  headers['Content-Type'] = \"multipart/form-data; boundary=\".concat(segno);\n  var buffer = Buffer.alloc(0);\n\n  function push(l) {\n    var prevBuffer = buffer;\n    var newBuffer = l instanceof Buffer ? l : Buffer.from(l);\n    buffer = Buffer.alloc(prevBuffer.length + newBuffer.length + 2);\n    prevBuffer.copy(buffer);\n    newBuffer.copy(buffer, prevBuffer.length);\n    buffer.write('\\r\\n', buffer.length - 2);\n  }\n\n  function q(s) {\n    return \"\\\"\".concat(s.replace(/\"|\"/g, '%22').replace(/\\r\\n|\\r|\\n/g, ' '), \"\\\"\");\n  }\n\n  var flattenedData = utils.flattenAndStringify(data);\n\n  for (var k in flattenedData) {\n    var v = flattenedData[k];\n    push(\"--\".concat(segno));\n\n    if (v.hasOwnProperty('data')) {\n      push(\"Content-Disposition: form-data; name=\".concat(q(k), \"; filename=\").concat(q(v.name || 'blob')));\n      push(\"Content-Type: \".concat(v.type || 'application/octet-stream'));\n      push('');\n      push(v.data);\n    } else {\n      push(\"Content-Disposition: form-data; name=\".concat(q(k)));\n      push('');\n      push(v);\n    }\n  }\n\n  push(\"--\".concat(segno, \"--\"));\n  return buffer;\n};\n\nvar streamProcessor = (method, data, headers, callback) => {\n  var bufferArray = [];\n  data.file.data.on('data', line => {\n    bufferArray.push(line);\n  }).once('end', () => {\n    var bufferData = Object.assign({}, data);\n    bufferData.file.data = Buffer.concat(bufferArray);\n    var buffer = multipartDataGenerator(method, bufferData, headers);\n    callback(null, buffer);\n  }).on('error', err => {\n    callback(new StreamProcessingError({\n      message: 'An error occurred while attempting to process the file for upload.',\n      detail: err\n    }), null);\n  });\n};\n\nvar multipartRequestDataProcessor = (method, data, headers, callback) => {\n  data = data || {};\n\n  if (method !== 'POST') {\n    return callback(null, utils.stringifyRequestData(data));\n  }\n\n  var isStream = utils.checkForStream(data);\n\n  if (isStream) {\n    return streamProcessor(method, data, headers, callback);\n  }\n\n  var buffer = multipartDataGenerator(method, data, headers);\n  return callback(null, buffer);\n};\n\nmodule.exports.multipartRequestDataProcessor = multipartRequestDataProcessor;","map":{"version":3,"sources":["/home/ubuntu/Connor/Demo_OSU_Filemanager/node_modules/stripe/lib/multipart.js"],"names":["utils","require","StripeError","StreamProcessingError","multipartDataGenerator","method","data","headers","segno","Math","round","random","toString","buffer","Buffer","alloc","push","l","prevBuffer","newBuffer","from","length","copy","write","q","s","replace","flattenedData","flattenAndStringify","k","v","hasOwnProperty","name","type","streamProcessor","callback","bufferArray","file","on","line","once","bufferData","Object","assign","concat","err","message","detail","multipartRequestDataProcessor","stringifyRequestData","isStream","checkForStream","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst utils = require('./utils');\nconst {StripeError} = require('./Error');\n\nclass StreamProcessingError extends StripeError {}\n\n// Method for formatting HTTP body for the multipart/form-data specification\n// Mostly taken from Fermata.js\n// https://github.com/natevw/fermata/blob/5d9732a33d776ce925013a265935facd1626cc88/fermata.js#L315-L343\nconst multipartDataGenerator = (method, data, headers) => {\n  const segno = (\n    Math.round(Math.random() * 1e16) + Math.round(Math.random() * 1e16)\n  ).toString();\n  headers['Content-Type'] = `multipart/form-data; boundary=${segno}`;\n  let buffer = Buffer.alloc(0);\n\n  function push(l) {\n    const prevBuffer = buffer;\n    const newBuffer = l instanceof Buffer ? l : Buffer.from(l);\n    buffer = Buffer.alloc(prevBuffer.length + newBuffer.length + 2);\n    prevBuffer.copy(buffer);\n    newBuffer.copy(buffer, prevBuffer.length);\n    buffer.write('\\r\\n', buffer.length - 2);\n  }\n\n  function q(s) {\n    return `\"${s.replace(/\"|\"/g, '%22').replace(/\\r\\n|\\r|\\n/g, ' ')}\"`;\n  }\n\n  const flattenedData = utils.flattenAndStringify(data);\n\n  for (const k in flattenedData) {\n    const v = flattenedData[k];\n    push(`--${segno}`);\n    if (v.hasOwnProperty('data')) {\n      push(\n        `Content-Disposition: form-data; name=${q(k)}; filename=${q(\n          v.name || 'blob'\n        )}`\n      );\n      push(`Content-Type: ${v.type || 'application/octet-stream'}`);\n      push('');\n      push(v.data);\n    } else {\n      push(`Content-Disposition: form-data; name=${q(k)}`);\n      push('');\n      push(v);\n    }\n  }\n  push(`--${segno}--`);\n\n  return buffer;\n};\n\nconst streamProcessor = (method, data, headers, callback) => {\n  const bufferArray = [];\n  data.file.data\n    .on('data', (line) => {\n      bufferArray.push(line);\n    })\n    .once('end', () => {\n      const bufferData = Object.assign({}, data);\n      bufferData.file.data = Buffer.concat(bufferArray);\n      const buffer = multipartDataGenerator(method, bufferData, headers);\n      callback(null, buffer);\n    })\n    .on('error', (err) => {\n      callback(\n        new StreamProcessingError({\n          message:\n            'An error occurred while attempting to process the file for upload.',\n          detail: err,\n        }),\n        null\n      );\n    });\n};\n\nconst multipartRequestDataProcessor = (method, data, headers, callback) => {\n  data = data || {};\n\n  if (method !== 'POST') {\n    return callback(null, utils.stringifyRequestData(data));\n  }\n\n  const isStream = utils.checkForStream(data);\n  if (isStream) {\n    return streamProcessor(method, data, headers, callback);\n  }\n\n  const buffer = multipartDataGenerator(method, data, headers);\n  return callback(null, buffer);\n};\n\nmodule.exports.multipartRequestDataProcessor = multipartRequestDataProcessor;\n"]},"metadata":{},"sourceType":"script"}