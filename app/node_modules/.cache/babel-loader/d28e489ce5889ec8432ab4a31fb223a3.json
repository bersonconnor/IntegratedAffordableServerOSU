{"ast":null,"code":"import _regeneratorRuntime from \"/home/ubuntu/Connor/WorkOSU/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ubuntu/Connor/WorkOSU/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/ubuntu/Connor/WorkOSU/app/src/pages/MainPages/HUGPages/HUGPagesRoutingContainer/HugCreation.tsx\";\nimport React, { Component } from \"react\";\nimport \"../../../../styles/buttons.css\";\nimport swal from \"sweetalert\";\nimport Purpose from \"./purpose\";\nimport Information from \"./information\";\nimport Eligibility from \"./eligibility\";\nimport Fundraising from \"./fundraising\";\nimport { RepresentingOrgIDContext, UserEmailContext } from \"../../MainPagesRoutingContainer\";\nimport { Grant } from \"affordable-shared-models\";\nvar orgID = 0;\nvar userEmail = \"\"; // get the organization that the user is representing who is filling out the form\n\nvar OrgIDVal = orgId => {\n  orgID = orgId.id;\n  return null;\n}; //UserEmailContext - get the email for the user filling out the form\n\n\nvar UserEmailVal = ID => {\n  userEmail = ID.Email;\n  return null;\n};\n\nclass HugCreation extends Component {\n  constructor(props) {\n    super(props); // Set the initial input values\n\n    this.REACT_APP_AF_BACKEND_URL = process.env.REACT_APP_AF_BACKEND_URL || window.REACT_APP_AF_BACKEND_URL;\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      var currentStep = this.state.currentStep;\n    };\n\n    this.state = {\n      eligibility: undefined,\n      eligibilityFields: {\n        addressLine1: \"Address Line 1\",\n        age: \"Age\",\n        citizenship: \"Citizenship\",\n        city: \"City\",\n        dependents: \"Dependents\",\n        employment: \"Employment\",\n        firstLanguage: \"First Language\",\n        income: \"Income\",\n        insurance: \"Insurance\",\n        location: \"Location\",\n        marriageStatus: \"Marriage Status\",\n        militaryService: \"Military Service\",\n        sex: \"Sex\",\n        state: \"State\",\n        zip: \"Zip\"\n      },\n      fundraising: undefined,\n      fundraisingFields: {\n        dateEnd: \"Date End\",\n        dateStart: \"Date Start\",\n        fundingPerPerson: \"Funding Per Person\",\n        fundraisingOptions: \"Fundraising Options\",\n        hugDistribution: \"HUG Distribution\",\n        hugDistributionTwo: \"HUG Distribution\",\n        numberSupported: \"Number Supported\",\n        paymentMethod: \"Payment Method\",\n        totalHugBudget: \"Total HUG Budget\"\n      },\n      information: undefined,\n      informationFields: {\n        candidateSelection: \"Candidate Selection Preference\",\n        documentationNeeded: \"Documentation Needed\",\n        medicalInfoNeeded: \"Medical Info Needed\"\n      },\n      newVal: \"\",\n      purpose: undefined,\n      purposeFields: {\n        hasDiagnosis: \"Diagnosis Required\",\n        hasPrescriptions: \"Prescription Required\",\n        hugCat: \"HUG Category\",\n        hugName: \"HUG Name\",\n        medCat: \"Medical Category\",\n        purpose: \"Purpose\"\n      },\n      titles: [\"HUG Purpose\", \"HUG Eligibility\", \"HUG Information\", \"HUG Fundraising\"],\n      currentStep: 1,\n      orgID: 0\n    }; // Bind the submission to handleChange()\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUploadHugRegistrationForm = this.handleUploadHugRegistrationForm.bind(this); // Bind the functions next and previous\n\n    this.next = this.next.bind(this);\n    this.prev = this.prev.bind(this);\n  } // to handle going to the next page of the form\n\n\n  next() {\n    var currentStep = this.state.currentStep; // If the current step is 1 or 2, then add one on \"next\" button click\n\n    currentStep = currentStep >= 3 ? 4 : currentStep + 1;\n    this.props.changeHeader(this.state.titles[currentStep - 1]);\n    this.setState({\n      currentStep: currentStep\n    });\n  } // to handle going to the past page of the form\n\n\n  prev() {\n    var currentStep = this.state.currentStep; // If the current step is 2 or 3, then subtract one on \"previous\" button click\n\n    currentStep = currentStep <= 1 ? 1 : currentStep - 1;\n    this.props.changeHeader(this.state.titles[currentStep - 1]);\n    this.setState({\n      currentStep: currentStep\n    });\n  } // when next is pressed on the purpose page\n  // this is a callback function that is passed to the purpose component\n\n\n  handlePurposeDataNext(hugPurpose) {\n    console.log(hugPurpose);\n    this.setState({\n      purpose: hugPurpose\n    });\n    this.next();\n  } // when next is pressed on the eligibility page\n  // this is a callback function that is passed to the eligibility component\n\n\n  handleEligibilityDataNext(hugEligibility) {\n    console.log(hugEligibility);\n    this.setState({\n      eligibility: hugEligibility\n    }); // set the purpose info equal to the values from the purpose page\n\n    this.next();\n  } // when next is pressed on the information page\n  // this is a callback function that is passed to the information component\n\n\n  handleInformationDataNext(hugInformation) {\n    console.log(\"Before Next\", hugInformation);\n    this.setState({\n      information: hugInformation\n    });\n    console.log(\"Assignment\", this.state.information);\n    this.next();\n  } // Use the submitted data to set the state\n\n\n  handleChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    this.setState({\n      [name]: value\n    });\n  } // Trigger an alert on form submission\n\n\n  //Transfer Org records to Backend server, this is a callback function on the fundraising page\n  handleUploadHugRegistrationForm(hugFundraising) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var grantData, grantEligibilityData, diagnosisData, prescriptionData, documentationData, medicalInfoData, locationInfoData, validData, attributeVal, foundAttribute, errorTitle, day, month, year, date, name, hugCat, medCat, specialtyCare, purpose, hasPrescriptions, hasDiagnosis, diagnosis, prescription, age, sex, location, distance, addressLine1, addressLine2, city, state, zip, ethnicity, firstLanguage, citizenship, employment, militaryService, insurance, marraigeStatus, income, dependents, candidateSelection, documentationNeeded, medicalInfoNeeded, documents, medicalInfo, dateStart, dateEnd, fundraisingOptions, hugDistribution, fundraisingLocation, hugDistributionTwo, fundingPerPerson, numberSupported, grantBudget, grantID, grant;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // fundraising data that is passed back needs to be saved to the state\n              _this.setState({\n                fundraising: hugFundraising\n              }); // Create a separate object for each backend call that will be made\n\n\n              grantData = new FormData(); // updating the Grants table\n\n              grantEligibilityData = new FormData(); // updating the GrantEligibility table\n\n              diagnosisData = new FormData(); // updating the GrantDiagnosis table\n\n              prescriptionData = new FormData(); // updating the GrantsPrescription table\n\n              documentationData = new FormData(); // updating the GrantRequiredDocumentation table\n\n              medicalInfoData = new FormData(); // updating the GrantRequiredMedicalInfo table\n\n              locationInfoData = new FormData(); // updating the GrantLocations table\n\n              validData = true; // was the data in the form valid\n\n              //check that all the fields on the purpose page have been filled out\n              for (attributeVal in _this.state.purpose) {\n                if (attributeVal != \"specialtyCare\" && _this.state.purpose[attributeVal] === \"\" && validData) {\n                  validData = false;\n                  foundAttribute = \"Purpose Page: \" + _this.state.purposeFields[attributeVal] + \" is empty\";\n                  errorTitle = _this.state.purposeFields[attributeVal] + \" Error\";\n                }\n              } // if the purpose page was filled out correctly\n\n\n              if (validData) {\n                //check that all the fields on the eligibility page have been filled out\n                for (attributeVal in _this.state.eligibility) {\n                  if (_this.state.eligibility[attributeVal] === \"\" && validData && attributeVal != \"ageLow\" && attributeVal != \"ageHigh\" && attributeVal != \"addressLine2\" && attributeVal != \"ethnicityOther\" && attributeVal != \"languageOther\" && attributeVal != \"incomeLow\" && attributeVal != \"incomeHigh\" && attributeVal != \"distance\" && attributeVal != \"dependentsLow\" && attributeVal != \"dependentsHigh\") {\n                    validData = false;\n                    foundAttribute = \"Eligibility Page: \" + _this.state.eligibilityFields[attributeVal] + \" is empty\";\n                    errorTitle = _this.state.eligibilityFields[attributeVal] + \" Error\";\n                  }\n                }\n              } // if the purpose page and eligibility page was filled out correctly\n\n\n              if (validData) {\n                //check that all the fields on the information page have been filled out\n                for (attributeVal in _this.state.information) {\n                  if (_this.state.information[attributeVal] === \"\" && validData) {\n                    validData = false;\n                    foundAttribute = \"Information Page: \" + _this.state.informationFields[attributeVal] + \" is empty\";\n                    errorTitle = _this.state.informationFields[attributeVal] + \" Error\";\n                  }\n                }\n              } // if the purpose page, eligibility and information pages were filled out correctly\n\n\n              if (validData) {\n                //check that all the fields on the fundraising page have been filled out\n                for (attributeVal in _this.state.fundraising) {\n                  if (_this.state.fundraising[attributeVal] === \"\" && validData) {\n                    validData = false;\n                    foundAttribute = \"Fundraising Page: \" + _this.state.fundraisingFields[attributeVal] + \" is empty\";\n                    errorTitle = _this.state.fundraisingFields[attributeVal] + \" Error\";\n                  }\n                }\n              } // If we found a field filled out incorrectly, alert the user\n\n\n              if (!validData) {\n                swal(errorTitle, foundAttribute, \"warning\");\n              } // Only make the backend calls if all pages were valid\n\n\n              if (!validData) {\n                _context.next = 127;\n                break;\n              }\n\n              day = new Date().getDate();\n              month = new Date().getMonth() + 1;\n\n              if (month < 10) {\n                month = \"0\" + month;\n              }\n\n              year = new Date().getFullYear();\n              date = year + \"-\" + month + \"-\" + day; //add all the data from the purpose page\n\n              name = _this.state.purpose.hugName;\n              hugCat = _this.state.purpose.hugCat;\n              medCat = _this.state.purpose.medCat;\n              specialtyCare = _this.state.purpose.specialtyCare;\n              purpose = _this.state.purpose.purpose;\n              hasPrescriptions = _this.state.purpose.hasPrescriptions;\n              hasDiagnosis = _this.state.purpose.hasDiagnosis; //Only append diagnosis fields if they are filled out\n\n              if (_this.state.purpose.hasDiagnosis === \"1\") {\n                diagnosis = _this.state.purpose.diagnosisNeeded;\n                console.log(\"Diagnosis\");\n                console.log(diagnosis);\n                diagnosisData.append(\"diagnosis\", JSON.stringify(diagnosis));\n              } //Only append prescription fields if they are filled out\n\n\n              if (_this.state.purpose.hasPrescriptions === \"1\") {\n                prescription = _this.state.purpose.prescriptionNeeded;\n                prescriptionData.append(\"prescription\", JSON.stringify(prescription));\n              } //add all the data from the eligibility page\n\n\n              console.log(\"Age Value\");\n              age = _this.state.eligibility.ageLow;\n              console.log(age);\n              sex = _this.state.eligibility.sex;\n              location = _this.state.eligibility.location;\n              distance = _this.state.eligibility.distance;\n              addressLine1 = _this.state.eligibility.addressLine1;\n              addressLine2 = _this.state.eligibility.addressLine2;\n              city = _this.state.eligibility.city;\n              state = _this.state.eligibility.state;\n              zip = _this.state.eligibility.zip;\n              ethnicity = _this.state.eligibility.ethnicity;\n              firstLanguage = _this.state.eligibility.firstLanguage;\n              citizenship = _this.state.eligibility.citizenship;\n              employment = _this.state.eligibility.employment;\n              militaryService = _this.state.eligibility.militaryService;\n              insurance = _this.state.eligibility.insurance;\n              marraigeStatus = _this.state.eligibility.marraigeStatus;\n              income = _this.state.eligibility.income;\n              dependents = _this.state.eligibility.dependents; //check for other fields\n\n              if (ethnicity == \"Other\") {\n                ethnicity = _this.state.eligibility.ethnicityOther;\n              }\n\n              if (firstLanguage == \"Other\") {\n                firstLanguage = _this.state.eligibility.languageOther;\n              } //add all the data from the information page\n\n\n              candidateSelection = _this.state.information.candidateSelection;\n              documentationNeeded = _this.state.information.documentationNeeded;\n              medicalInfoNeeded = _this.state.information.medicalInfoNeeded; //Only append document fields if they are filled out\n\n              if (_this.state.information.documentationNeeded === \"1\") {\n                documents = _this.state.information.documentsNeeded;\n                console.log(\"Documentation\");\n                console.log(documents);\n                documentationData.append(\"documentation\", JSON.stringify(documents));\n              } //Only append medical info fields if they are filled out\n\n\n              if (_this.state.information.medicalInfoNeeded === \"1\") {\n                medicalInfo = _this.state.information.informationNeeded;\n                medicalInfoData.append(\"medicalInfo\", JSON.stringify(medicalInfo));\n              } // add all info from the fundraising page\n\n\n              dateStart = _this.state.fundraising.dateStart;\n              dateEnd = _this.state.fundraising.dateEnd;\n              fundraisingOptions = _this.state.fundraising.fundraisingOptions;\n              hugDistribution = _this.state.fundraising.hugDistribution;\n              fundraisingLocation = _this.state.fundraising.location;\n              hugDistributionTwo = _this.state.fundraising.hugDistributionTwo;\n              fundingPerPerson = _this.state.fundraising.fundingPerPerson;\n              numberSupported = _this.state.fundraising.numberSupported;\n              grantBudget = _this.state.fundraising.totalHugBudget; // Put the data in the object passed to the Grant Data Object\n\n              grantData.append(\"hugName\", name);\n              grantData.append(\"hugCat\", hugCat);\n              grantData.append(\"medCat\", medCat);\n              grantData.append(\"specialtyCare\", specialtyCare);\n              grantData.append(\"purpose\", purpose);\n              grantData.append(\"hasPrescriptions\", hasPrescriptions);\n              grantData.append(\"hasDiagnosis\", hasDiagnosis);\n              grantData.append(\"dateStart\", dateStart);\n              grantData.append(\"dateEnd\", dateStart);\n              grantData.append(\"grantDistribution\", hugDistribution);\n              grantData.append(\"fundingPerPerson\", fundingPerPerson);\n              grantData.append(\"grantBudget\", grantBudget);\n              grantData.append(\"numberSupported\", numberSupported);\n              grantData.append(\"orgID\", _this.state.orgID.toString()); // Put the data in the objet passed to the GrantEligibility Data Object\n\n              grantEligibilityData.append(\"age\", age);\n              grantEligibilityData.append(\"sex\", sex);\n              grantEligibilityData.append(\"location\", location);\n              grantEligibilityData.append(\"distance\", distance); //Put the data in the object passed to the Location Info Data Object\n\n              locationInfoData.append(\"locationFilter\", location);\n              locationInfoData.append(\"distanceFromLocation\", distance);\n              locationInfoData.append(\"addressLine1\", addressLine1);\n              locationInfoData.append(\"addressLine2\", addressLine2);\n              locationInfoData.append(\"city\", city);\n              locationInfoData.append(\"state\", state);\n              locationInfoData.append(\"zip\", zip);\n              console.log(\"Hug name\");\n              console.log(name);\n              console.log(\"Inserting HUG\");\n              console.log(name);\n              grantID = \"\"; //Add the grant\n\n              grant = new Grant();\n              grant.grantName = name;\n              grant.category = hugCat;\n              grant.description = purpose;\n              _context.next = 101;\n              return _this.props.client.createGrant(grant).catch(error => {\n                console.log(error);\n                swal(\"Step 1: There was an issue registering your hug. Please check fields and resubmit.\", \"warning\");\n              });\n\n            case 101:\n              _context.next = 103;\n              return fetch(_this.REACT_APP_AF_BACKEND_URL + \"/info/grantID\", {\n                method: \"POST\",\n                body: grantData\n              }).then(response => response.json()).then(response => {\n                if (response.status === \"OK\") {\n                  grantID = response.grantID;\n                } else {\n                  swal(\"Step 2: Sorry There was an issue registering your hug. Please check fields and resubmit.\", \"warning\");\n                }\n              });\n\n            case 103:\n              grantEligibilityData.append(\"grantID\", grantID);\n              diagnosisData.append(\"grantID\", grantID);\n              prescriptionData.append(\"grantID\", grantID);\n              documentationData.append(\"grantID\", grantID);\n              medicalInfoData.append(\"grantID\", grantID);\n              locationInfoData.append(\"grantID\", grantID);\n\n              if (!(_this.state.purpose.hasDiagnosis === \"1\")) {\n                _context.next = 113;\n                break;\n              }\n\n              console.log(\"In diagnosis\");\n              _context.next = 113;\n              return fetch(_this.REACT_APP_AF_BACKEND_URL + \"/addHug/addDiagnosis/\", {\n                method: \"POST\",\n                body: diagnosisData\n              }).then(response => response.json()).then(response => {\n                if (response.status != \"OK\") {\n                  swal(\"Adding Diagnosis: Sorry There was an issue registering your hug. Please check diagnosis fields and resubmit.\", \"warning\");\n                }\n              });\n\n            case 113:\n              // console.log(\"Entering Prescription\")\n              //\n              // if (this.state.purpose.hasPrescriptions === \"1\")\n              // {\n              //   console.log(\"in precription\")\n              //   await fetch(\"http://localhost:4000/addHug/addPrescription/\", {\n              //       method: \"POST\",\n              //       body: prescriptionData\n              //   }).then(response => response.json())\n              //   .then ((response) => {\n              //       if (response.status != 'OK') {\n              //           swal(\n              //               \"Adding Prescription: Sorry There was an issue registering your hug. Please check prescription fields and resubmit.\",\n              //               \"warning\"\n              //           );\n              //       }\n              //   });\n              // }\n              console.log(\"Entering Documentation\");\n\n              if (!(_this.state.information.documentationNeeded === \"1\")) {\n                _context.next = 118;\n                break;\n              }\n\n              console.log(\"in documentation\");\n              _context.next = 118;\n              return fetch(_this.REACT_APP_AF_BACKEND_URL + \"/addHug/addDocumentation/\", {\n                method: \"POST\",\n                body: documentationData\n              }).then(response => response.json()).then(response => {\n                if (response.status != \"OK\") {\n                  swal(\"Adding Documentation: Sorry There was an issue registering your hug. Please check information documentation fields and resubmit.\", \"warning\");\n                }\n              });\n\n            case 118:\n              console.log(\"Entering Medical Info\");\n\n              if (!(_this.state.information.medicalInfoNeeded === \"1\")) {\n                _context.next = 123;\n                break;\n              }\n\n              console.log(\"in medical info\");\n              _context.next = 123;\n              return fetch(_this.REACT_APP_AF_BACKEND_URL + \"/addHug/addMedicalInfo/\", {\n                method: \"POST\",\n                body: medicalInfoData\n              }).then(response => response.json()).then(response => {\n                if (response.status != \"OK\") {\n                  swal(\"Adding Medical Info: Sorry There was an issue registering your hug. Please check information medical info fields and resubmit.\", \"warning\");\n                }\n              });\n\n            case 123:\n              _context.next = 125;\n              return fetch(_this.REACT_APP_AF_BACKEND_URL + \"/addHug/addLocationInfo/\", {\n                method: \"POST\",\n                body: locationInfoData\n              }).then(response => response.json()).then(response => {\n                if (response.status != \"OK\") {\n                  swal(\"Adding Location: Sorry There was an issue registering your hug. Please check location fields and resubmit.\", \"warning\");\n                }\n              });\n\n            case 125:\n              _context.next = 127;\n              return fetch(_this.REACT_APP_AF_BACKEND_URL + \"/addHug/addEligibility/\", {\n                method: \"POST\",\n                body: grantEligibilityData\n              }).then(response => {\n                if (response.ok) {\n                  swal(\"Thank you for creating your HUG with Affordable!\", \"Welcome\", \"success\");\n\n                  _this.sendHUGCreationEmail();\n                } else {\n                  swal(\"Eligibility: There was an issue creating your HUG. Please check fields and resubmit.\", \"warning\");\n                }\n              });\n\n            case 127:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  } // gets called if all backend calls were successful for hug creation\n\n\n  sendHUGCreationEmail() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var data, name;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              data = new FormData();\n              data.append(\"email\", userEmail);\n              name = _this2.state.purpose.hugName;\n              data.append(\"grantName\", name);\n              _context2.next = 6;\n              return fetch(_this2.REACT_APP_AF_BACKEND_URL + \"/addHug/email/notifyHugCreation/\", {\n                method: \"POST\",\n                body: data\n              }).then(response => {\n                if (response.ok) return response.json();\n              });\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Purpose, {\n      currentStep: this.state.currentStep,\n      nextFunction: this.handlePurposeDataNext.bind(this),\n      handleChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Eligibility, {\n      currentStep: this.state.currentStep,\n      nextFunction: this.handleEligibilityDataNext.bind(this),\n      previousFunction: this.prev,\n      handleChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Fundraising, {\n      currentStep: this.state.currentStep,\n      previousFunction: this.prev,\n      submitFunction: this.handleUploadHugRegistrationForm,\n      handleChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Information, {\n      currentStep: this.state.currentStep,\n      nextFunction: this.handleInformationDataNext.bind(this),\n      previousFunction: this.prev,\n      handleChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(RepresentingOrgIDContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 9\n      }\n    }, value => /*#__PURE__*/React.createElement(OrgIDVal, {\n      id: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(UserEmailContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 9\n      }\n    }, value => /*#__PURE__*/React.createElement(UserEmailVal, {\n      Email: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default HugCreation;","map":{"version":3,"sources":["/home/ubuntu/Connor/WorkOSU/app/src/pages/MainPages/HUGPages/HUGPagesRoutingContainer/HugCreation.tsx"],"names":["React","Component","swal","Purpose","Information","Eligibility","Fundraising","RepresentingOrgIDContext","UserEmailContext","Grant","orgID","userEmail","OrgIDVal","orgId","id","UserEmailVal","ID","Email","HugCreation","constructor","props","REACT_APP_AF_BACKEND_URL","process","env","window","handleSubmit","event","preventDefault","currentStep","state","eligibility","undefined","eligibilityFields","addressLine1","age","citizenship","city","dependents","employment","firstLanguage","income","insurance","location","marriageStatus","militaryService","sex","zip","fundraising","fundraisingFields","dateEnd","dateStart","fundingPerPerson","fundraisingOptions","hugDistribution","hugDistributionTwo","numberSupported","paymentMethod","totalHugBudget","information","informationFields","candidateSelection","documentationNeeded","medicalInfoNeeded","newVal","purpose","purposeFields","hasDiagnosis","hasPrescriptions","hugCat","hugName","medCat","titles","handleChange","bind","handleUploadHugRegistrationForm","next","prev","changeHeader","setState","handlePurposeDataNext","hugPurpose","console","log","handleEligibilityDataNext","hugEligibility","handleInformationDataNext","hugInformation","target","name","value","hugFundraising","grantData","FormData","grantEligibilityData","diagnosisData","prescriptionData","documentationData","medicalInfoData","locationInfoData","validData","attributeVal","foundAttribute","errorTitle","day","Date","getDate","month","getMonth","year","getFullYear","date","specialtyCare","diagnosis","diagnosisNeeded","append","JSON","stringify","prescription","prescriptionNeeded","ageLow","distance","addressLine2","ethnicity","marraigeStatus","ethnicityOther","languageOther","documents","documentsNeeded","medicalInfo","informationNeeded","fundraisingLocation","grantBudget","toString","grantID","grant","grantName","category","description","client","createGrant","catch","error","fetch","method","body","then","response","json","status","ok","sendHUGCreationEmail","data","render"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport \"../../../../styles/buttons.css\";\nimport swal from \"sweetalert\";\nimport Purpose from \"./purpose\";\nimport Information from \"./information\";\nimport Eligibility from \"./eligibility\";\nimport Fundraising from \"./fundraising\";\nimport {RepresentingOrgIDContext, UserEmailContext} from \"../../MainPagesRoutingContainer\";\nimport {AffordableClient} from \"affordable-client\";\nimport {Grant} from \"affordable-shared-models\";\n\nlet orgID = 0;\nlet userEmail = \"\";\n\n// get the organization that the user is representing who is filling out the form\nconst OrgIDVal = orgId => {\n  orgID = orgId.id;\n  return null;\n};\n\n//UserEmailContext - get the email for the user filling out the form\nconst UserEmailVal = ID => {\n  userEmail = ID.Email;\n  return null;\n};\n\ninterface HugCreationProps {\n  changeHeader: any;\n  client: AffordableClient;\n}\n\ninterface HugCreationState {\n  purpose: any; // hold all the data for the purpose page\n  eligibility: any; // hold all the data for the eligibility page\n  information: any; // hold all the data for the information page\n  fundraising: any; // hold all the data for the fundraising page\n  titles: [\n    \"HUG Purpose\",\n    \"HUG Eligibility\",\n    \"HUG Information\",\n    \"HUG Fundraising\"\n  ];\n  purposeFields: {\n    hugName: \"HUG Name\";\n    hugCat: \"HUG Category\";\n    medCat: \"Medical Category\";\n    purpose: \"Purpose\";\n    hasPrescriptions: \"Prescription Required\";\n    hasDiagnosis: \"Diagnosis Required\";\n  };\n  eligibilityFields: {\n    age: \"Age\";\n    sex: \"Sex\";\n    location: \"Location\";\n    addressLine1: \"Address Line 1\";\n    city: \"City\";\n    state: \"State\";\n    zip: \"Zip\";\n    firstLanguage: \"First Language\";\n    citizenship: \"Citizenship\";\n    employment: \"Employment\";\n    militaryService: \"Military Service\";\n    insurance: \"Insurance\";\n    marriageStatus: \"Marriage Status\";\n    income: \"Income\";\n    dependents: \"Dependents\";\n  };\n  informationFields: {\n    documentationNeeded: \"Documentation Needed\";\n    medicalInfoNeeded: \"Medical Info Needed\";\n    candidateSelection: \"Candidate Selection Preference\";\n  };\n  fundraisingFields: {\n    dateStart: \"Date Start\";\n    dateEnd: \"Date End\";\n    fundraisingOptions: \"Fundraising Options\";\n    hugDistribution: \"HUG Distribution\";\n    numberSupported: \"Number Supported\";\n    fundingPerPerson: \"Funding Per Person\";\n    hugDistributionTwo: \"HUG Distribution\";\n    totalHugBudget: \"Total HUG Budget\";\n    paymentMethod: \"Payment Method\";\n  };\n  currentStep: number; // what page the user is currently on\n  newVal: \"\";\n  orgID: number; //what organization the user is representng\n}\n\nclass HugCreation extends Component<HugCreationProps, HugCreationState> {\n  REACT_APP_AF_BACKEND_URL = process.env.REACT_APP_AF_BACKEND_URL || (window as any).REACT_APP_AF_BACKEND_URL;\n  constructor(props) {\n    super(props);\n    // Set the initial input values\n    this.state = {\n      eligibility: undefined,\n      eligibilityFields: {\n        addressLine1: \"Address Line 1\",\n        age: \"Age\",\n        citizenship: \"Citizenship\",\n        city: \"City\",\n        dependents: \"Dependents\",\n        employment: \"Employment\",\n        firstLanguage: \"First Language\",\n        income: \"Income\",\n        insurance: \"Insurance\",\n        location: \"Location\",\n        marriageStatus: \"Marriage Status\",\n        militaryService: \"Military Service\",\n        sex: \"Sex\",\n        state: \"State\",\n        zip: \"Zip\"\n      },\n      fundraising: undefined,\n      fundraisingFields: {\n        dateEnd: \"Date End\",\n        dateStart: \"Date Start\",\n        fundingPerPerson: \"Funding Per Person\",\n        fundraisingOptions: \"Fundraising Options\",\n        hugDistribution: \"HUG Distribution\",\n        hugDistributionTwo: \"HUG Distribution\",\n        numberSupported: \"Number Supported\",\n        paymentMethod: \"Payment Method\",\n        totalHugBudget: \"Total HUG Budget\"\n      },\n      information: undefined,\n      informationFields: {\n        candidateSelection: \"Candidate Selection Preference\",\n        documentationNeeded: \"Documentation Needed\",\n        medicalInfoNeeded: \"Medical Info Needed\"\n      },\n      newVal: \"\",\n      purpose: undefined,\n      purposeFields: {\n        hasDiagnosis: \"Diagnosis Required\",\n        hasPrescriptions: \"Prescription Required\",\n        hugCat: \"HUG Category\",\n        hugName: \"HUG Name\",\n        medCat: \"Medical Category\",\n        purpose: \"Purpose\"\n      },\n      titles: [\n        \"HUG Purpose\",\n        \"HUG Eligibility\",\n        \"HUG Information\",\n        \"HUG Fundraising\"\n      ],\n      currentStep: 1,\n      orgID: 0\n    };\n    // Bind the submission to handleChange()\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUploadHugRegistrationForm = this.handleUploadHugRegistrationForm.bind(\n      this\n    );\n    // Bind the functions next and previous\n    this.next = this.next.bind(this);\n    this.prev = this.prev.bind(this);\n  }\n\n  // to handle going to the next page of the form\n  next() {\n    let currentStep = this.state.currentStep;\n    // If the current step is 1 or 2, then add one on \"next\" button click\n    currentStep = currentStep >= 3 ? 4 : currentStep + 1;\n    this.props.changeHeader(this.state.titles[currentStep - 1]);\n    this.setState({\n      currentStep: currentStep\n    });\n  }\n  // to handle going to the past page of the form\n  prev() {\n    let currentStep = this.state.currentStep;\n    // If the current step is 2 or 3, then subtract one on \"previous\" button click\n    currentStep = currentStep <= 1 ? 1 : currentStep - 1;\n    this.props.changeHeader(this.state.titles[currentStep - 1]);\n    this.setState({\n      currentStep: currentStep\n    });\n  }\n\n  // when next is pressed on the purpose page\n  // this is a callback function that is passed to the purpose component\n  handlePurposeDataNext(hugPurpose) {\n    console.log(hugPurpose);\n    this.setState({ purpose: hugPurpose });\n    this.next();\n  }\n\n  // when next is pressed on the eligibility page\n  // this is a callback function that is passed to the eligibility component\n  handleEligibilityDataNext(hugEligibility) {\n    console.log(hugEligibility);\n    this.setState({ eligibility: hugEligibility }); // set the purpose info equal to the values from the purpose page\n    this.next();\n  }\n\n  // when next is pressed on the information page\n  // this is a callback function that is passed to the information component\n  handleInformationDataNext(hugInformation) {\n    console.log(\"Before Next\", hugInformation);\n    this.setState({ information: hugInformation });\n    console.log(\"Assignment\", this.state.information);\n    this.next();\n  }\n\n  // Use the submitted data to set the state\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    } as Pick<HugCreationState, keyof HugCreationState>);\n  }\n\n  // Trigger an alert on form submission\n  handleSubmit = event => {\n    event.preventDefault();\n    const { currentStep } = this.state;\n  };\n\n  //Transfer Org records to Backend server, this is a callback function on the fundraising page\n  async handleUploadHugRegistrationForm(hugFundraising) {\n    // fundraising data that is passed back needs to be saved to the state\n    this.setState({ fundraising: hugFundraising });\n\n    // Create a separate object for each backend call that will be made\n    const grantData = new FormData(); // updating the Grants table\n    const grantEligibilityData = new FormData(); // updating the GrantEligibility table\n    const diagnosisData = new FormData(); // updating the GrantDiagnosis table\n    const prescriptionData = new FormData(); // updating the GrantsPrescription table\n    const documentationData = new FormData(); // updating the GrantRequiredDocumentation table\n    const medicalInfoData = new FormData(); // updating the GrantRequiredMedicalInfo table\n    const locationInfoData = new FormData(); // updating the GrantLocations table\n\n    let validData = true; // was the data in the form valid\n    let attributeVal;\n    let foundAttribute;\n    let errorTitle;\n\n    //check that all the fields on the purpose page have been filled out\n    for (attributeVal in this.state.purpose) {\n      if (\n        attributeVal != \"specialtyCare\" &&\n        this.state.purpose[attributeVal] === \"\" &&\n        validData\n      ) {\n        validData = false;\n        foundAttribute =\n          \"Purpose Page: \" +\n          this.state.purposeFields[attributeVal] +\n          \" is empty\";\n        errorTitle = this.state.purposeFields[attributeVal] + \" Error\";\n      }\n    }\n    // if the purpose page was filled out correctly\n    if (validData) {\n      //check that all the fields on the eligibility page have been filled out\n      for (attributeVal in this.state.eligibility) {\n        if (\n          this.state.eligibility[attributeVal] === \"\" &&\n          validData &&\n          attributeVal != \"ageLow\" &&\n          attributeVal != \"ageHigh\" &&\n          attributeVal != \"addressLine2\" &&\n          attributeVal != \"ethnicityOther\" &&\n          attributeVal != \"languageOther\" &&\n          attributeVal != \"incomeLow\" &&\n          attributeVal != \"incomeHigh\" &&\n          attributeVal != \"distance\" &&\n          attributeVal != \"dependentsLow\" &&\n          attributeVal != \"dependentsHigh\"\n        ) {\n          validData = false;\n          foundAttribute =\n            \"Eligibility Page: \" +\n            this.state.eligibilityFields[attributeVal] +\n            \" is empty\";\n          errorTitle = this.state.eligibilityFields[attributeVal] + \" Error\";\n        }\n      }\n    }\n    // if the purpose page and eligibility page was filled out correctly\n    if (validData) {\n      //check that all the fields on the information page have been filled out\n      for (attributeVal in this.state.information) {\n        if (this.state.information[attributeVal] === \"\" && validData) {\n          validData = false;\n          foundAttribute =\n            \"Information Page: \" +\n            this.state.informationFields[attributeVal] +\n            \" is empty\";\n          errorTitle = this.state.informationFields[attributeVal] + \" Error\";\n        }\n      }\n    }\n    // if the purpose page, eligibility and information pages were filled out correctly\n    if (validData) {\n      //check that all the fields on the fundraising page have been filled out\n      for (attributeVal in this.state.fundraising) {\n        if (this.state.fundraising[attributeVal] === \"\" && validData) {\n          validData = false;\n          foundAttribute =\n            \"Fundraising Page: \" +\n            this.state.fundraisingFields[attributeVal] +\n            \" is empty\";\n          errorTitle = this.state.fundraisingFields[attributeVal] + \" Error\";\n        }\n      }\n    }\n    // If we found a field filled out incorrectly, alert the user\n    if (!validData) {\n      swal(errorTitle, foundAttribute, \"warning\");\n    }\n    // Only make the backend calls if all pages were valid\n    if (validData) {\n      const day = new Date().getDate();\n      let month: string | number = new Date().getMonth() + 1;\n      if (month < 10) {\n        month = \"0\" + month;\n      }\n      const year = new Date().getFullYear();\n      const date = year + \"-\" + month + \"-\" + day;\n\n      //add all the data from the purpose page\n      const name = this.state.purpose.hugName;\n      const hugCat = this.state.purpose.hugCat;\n      const medCat = this.state.purpose.medCat;\n      const specialtyCare = this.state.purpose.specialtyCare;\n      const purpose = this.state.purpose.purpose;\n      const hasPrescriptions = this.state.purpose.hasPrescriptions;\n      const hasDiagnosis = this.state.purpose.hasDiagnosis;\n\n      //Only append diagnosis fields if they are filled out\n      if (this.state.purpose.hasDiagnosis === \"1\") {\n        const diagnosis = this.state.purpose.diagnosisNeeded;\n        console.log(\"Diagnosis\");\n        console.log(diagnosis);\n        diagnosisData.append(\"diagnosis\", JSON.stringify(diagnosis));\n      }\n\n      //Only append prescription fields if they are filled out\n      if (this.state.purpose.hasPrescriptions === \"1\") {\n        const prescription = this.state.purpose.prescriptionNeeded;\n        prescriptionData.append(\"prescription\", JSON.stringify(prescription));\n      }\n\n      //add all the data from the eligibility page\n      console.log(\"Age Value\");\n      const age = this.state.eligibility.ageLow;\n      console.log(age);\n      const sex = this.state.eligibility.sex;\n      const location = this.state.eligibility.location;\n      const distance = this.state.eligibility.distance;\n      const addressLine1 = this.state.eligibility.addressLine1;\n      const addressLine2 = this.state.eligibility.addressLine2;\n      const city = this.state.eligibility.city;\n      const state = this.state.eligibility.state;\n      const zip = this.state.eligibility.zip;\n      let ethnicity = this.state.eligibility.ethnicity;\n      let firstLanguage = this.state.eligibility.firstLanguage;\n      const citizenship = this.state.eligibility.citizenship;\n      const employment = this.state.eligibility.employment;\n      const militaryService = this.state.eligibility.militaryService;\n      const insurance = this.state.eligibility.insurance;\n      const marraigeStatus = this.state.eligibility.marraigeStatus;\n      const income = this.state.eligibility.income;\n      const dependents = this.state.eligibility.dependents;\n\n      //check for other fields\n      if (ethnicity == \"Other\") {\n        ethnicity = this.state.eligibility.ethnicityOther;\n      }\n\n      if (firstLanguage == \"Other\") {\n        firstLanguage = this.state.eligibility.languageOther;\n      }\n\n      //add all the data from the information page\n      const candidateSelection = this.state.information.candidateSelection;\n      const documentationNeeded = this.state.information.documentationNeeded;\n      const medicalInfoNeeded = this.state.information.medicalInfoNeeded;\n\n      //Only append document fields if they are filled out\n      if (this.state.information.documentationNeeded === \"1\") {\n        const documents = this.state.information.documentsNeeded;\n        console.log(\"Documentation\");\n        console.log(documents);\n        documentationData.append(\"documentation\", JSON.stringify(documents));\n      }\n\n      //Only append medical info fields if they are filled out\n      if (this.state.information.medicalInfoNeeded === \"1\") {\n        const medicalInfo = this.state.information.informationNeeded;\n        medicalInfoData.append(\"medicalInfo\", JSON.stringify(medicalInfo));\n      }\n\n      // add all info from the fundraising page\n      const dateStart = this.state.fundraising.dateStart;\n      const dateEnd = this.state.fundraising.dateEnd;\n      const fundraisingOptions = this.state.fundraising.fundraisingOptions;\n      const hugDistribution = this.state.fundraising.hugDistribution;\n      const fundraisingLocation = this.state.fundraising.location;\n      const hugDistributionTwo = this.state.fundraising.hugDistributionTwo;\n      const fundingPerPerson = this.state.fundraising.fundingPerPerson;\n      const numberSupported = this.state.fundraising.numberSupported;\n      const grantBudget = this.state.fundraising.totalHugBudget;\n\n      // Put the data in the object passed to the Grant Data Object\n      grantData.append(\"hugName\", name);\n      grantData.append(\"hugCat\", hugCat);\n      grantData.append(\"medCat\", medCat);\n      grantData.append(\"specialtyCare\", specialtyCare);\n      grantData.append(\"purpose\", purpose);\n      grantData.append(\"hasPrescriptions\", hasPrescriptions);\n      grantData.append(\"hasDiagnosis\", hasDiagnosis);\n      grantData.append(\"dateStart\", dateStart);\n      grantData.append(\"dateEnd\", dateStart);\n      grantData.append(\"grantDistribution\", hugDistribution);\n      grantData.append(\"fundingPerPerson\", fundingPerPerson);\n      grantData.append(\"grantBudget\", grantBudget);\n      grantData.append(\"numberSupported\", numberSupported);\n      grantData.append(\"orgID\", this.state.orgID.toString());\n\n      // Put the data in the objet passed to the GrantEligibility Data Object\n      grantEligibilityData.append(\"age\", age);\n      grantEligibilityData.append(\"sex\", sex);\n      grantEligibilityData.append(\"location\", location);\n      grantEligibilityData.append(\"distance\", distance);\n\n      //Put the data in the object passed to the Location Info Data Object\n      locationInfoData.append(\"locationFilter\", location);\n      locationInfoData.append(\"distanceFromLocation\", distance);\n      locationInfoData.append(\"addressLine1\", addressLine1);\n      locationInfoData.append(\"addressLine2\", addressLine2);\n      locationInfoData.append(\"city\", city);\n      locationInfoData.append(\"state\", state);\n      locationInfoData.append(\"zip\", zip);\n\n      console.log(\"Hug name\");\n      console.log(name);\n\n      console.log(\"Inserting HUG\");\n      console.log(name);\n      let grantID = \"\";\n\n      //Add the grant\n\n      const grant = new Grant();\n      grant.grantName = name;\n      grant.category = hugCat;\n      grant.description = purpose;\n\n      await this.props.client.createGrant(grant).catch(error => {\n        console.log(error);\n        swal(\n          \"Step 1: There was an issue registering your hug. Please check fields and resubmit.\",\n          \"warning\"\n        );\n      });\n\n      //Get the orgID\n      await fetch(this.REACT_APP_AF_BACKEND_URL + \"/info/grantID\", {\n        method: \"POST\",\n        body: grantData\n      })\n        .then(response => response.json())\n        .then(response => {\n          if (response.status === \"OK\") {\n            grantID = response.grantID;\n          } else {\n            swal(\n              \"Step 2: Sorry There was an issue registering your hug. Please check fields and resubmit.\",\n              \"warning\"\n            );\n          }\n        });\n      grantEligibilityData.append(\"grantID\", grantID);\n      diagnosisData.append(\"grantID\", grantID);\n      prescriptionData.append(\"grantID\", grantID);\n      documentationData.append(\"grantID\", grantID);\n      medicalInfoData.append(\"grantID\", grantID);\n      locationInfoData.append(\"grantID\", grantID);\n\n      if (this.state.purpose.hasDiagnosis === \"1\") {\n        console.log(\"In diagnosis\");\n        await fetch(this.REACT_APP_AF_BACKEND_URL + \"/addHug/addDiagnosis/\", {\n          method: \"POST\",\n          body: diagnosisData\n        })\n          .then(response => response.json())\n          .then(response => {\n            if (response.status != \"OK\") {\n              swal(\n                \"Adding Diagnosis: Sorry There was an issue registering your hug. Please check diagnosis fields and resubmit.\",\n                \"warning\"\n              );\n            }\n          });\n      }\n\n      // console.log(\"Entering Prescription\")\n      //\n      // if (this.state.purpose.hasPrescriptions === \"1\")\n      // {\n      //   console.log(\"in precription\")\n      //   await fetch(\"http://localhost:4000/addHug/addPrescription/\", {\n      //       method: \"POST\",\n      //       body: prescriptionData\n      //   }).then(response => response.json())\n      //   .then ((response) => {\n      //       if (response.status != 'OK') {\n      //           swal(\n      //               \"Adding Prescription: Sorry There was an issue registering your hug. Please check prescription fields and resubmit.\",\n      //               \"warning\"\n      //           );\n      //       }\n      //   });\n      // }\n\n      console.log(\"Entering Documentation\");\n\n      if (this.state.information.documentationNeeded === \"1\") {\n        console.log(\"in documentation\");\n        await fetch(this.REACT_APP_AF_BACKEND_URL + \"/addHug/addDocumentation/\", {\n          method: \"POST\",\n          body: documentationData\n        })\n          .then(response => response.json())\n          .then(response => {\n            if (response.status != \"OK\") {\n              swal(\n                \"Adding Documentation: Sorry There was an issue registering your hug. Please check information documentation fields and resubmit.\",\n                \"warning\"\n              );\n            }\n          });\n      }\n\n      console.log(\"Entering Medical Info\");\n\n      if (this.state.information.medicalInfoNeeded === \"1\") {\n        console.log(\"in medical info\");\n        await fetch(this.REACT_APP_AF_BACKEND_URL + \"/addHug/addMedicalInfo/\", {\n          method: \"POST\",\n          body: medicalInfoData\n        })\n          .then(response => response.json())\n          .then(response => {\n            if (response.status != \"OK\") {\n              swal(\n                \"Adding Medical Info: Sorry There was an issue registering your hug. Please check information medical info fields and resubmit.\",\n                \"warning\"\n              );\n            }\n          });\n      }\n\n      await fetch(this.REACT_APP_AF_BACKEND_URL + \"/addHug/addLocationInfo/\", {\n        method: \"POST\",\n        body: locationInfoData\n      })\n        .then(response => response.json())\n        .then(response => {\n          if (response.status != \"OK\") {\n            swal(\n              \"Adding Location: Sorry There was an issue registering your hug. Please check location fields and resubmit.\",\n              \"warning\"\n            );\n          }\n        });\n\n      await fetch(this.REACT_APP_AF_BACKEND_URL + \"/addHug/addEligibility/\", {\n        method: \"POST\",\n        body: grantEligibilityData\n      }).then(response => {\n        if (response.ok) {\n          swal(\n            \"Thank you for creating your HUG with Affordable!\",\n            \"Welcome\",\n            \"success\"\n          );\n          this.sendHUGCreationEmail();\n        } else {\n          swal(\n            \"Eligibility: There was an issue creating your HUG. Please check fields and resubmit.\",\n            \"warning\"\n          );\n        }\n      });\n    }\n  }\n  // gets called if all backend calls were successful for hug creation\n  async sendHUGCreationEmail() {\n    const data = new FormData();\n    data.append(\"email\", userEmail);\n    const name = this.state.purpose.hugName;\n    data.append(\"grantName\", name);\n\n    await fetch(this.REACT_APP_AF_BACKEND_URL + \"/addHug/email/notifyHugCreation/\", {\n      method: \"POST\",\n      body: data\n    }).then(response => {\n      if (response.ok) return response.json();\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"col\">\n        <form onSubmit={this.handleSubmit}>\n          <Purpose\n            currentStep={this.state.currentStep}\n            nextFunction={this.handlePurposeDataNext.bind(this)}\n            handleChange={this.handleChange}\n          />\n          <Eligibility\n            currentStep={this.state.currentStep}\n            nextFunction={this.handleEligibilityDataNext.bind(this)}\n            previousFunction={this.prev}\n            handleChange={this.handleChange}\n          />\n          <Fundraising\n            currentStep={this.state.currentStep}\n            previousFunction={this.prev}\n            submitFunction={this.handleUploadHugRegistrationForm}\n            handleChange={this.handleChange}\n          />\n          <Information\n            currentStep={this.state.currentStep}\n            nextFunction={this.handleInformationDataNext.bind(this)}\n            previousFunction={this.prev}\n            handleChange={this.handleChange}\n          />\n        </form>\n        <RepresentingOrgIDContext.Consumer>\n          {value => <OrgIDVal id={value} />}\n        </RepresentingOrgIDContext.Consumer>\n        <UserEmailContext.Consumer>\n          {value => <UserEmailVal Email={value} />}\n        </UserEmailContext.Consumer>\n      </div>\n    );\n  }\n}\nexport default HugCreation;\n"]},"metadata":{},"sourceType":"module"}