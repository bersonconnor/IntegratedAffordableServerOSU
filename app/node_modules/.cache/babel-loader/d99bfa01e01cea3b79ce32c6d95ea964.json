{"ast":null,"code":"/*jshint node:true*/\n'use strict';\n/**\n * Replaces characters in strings that are illegal/unsafe for filenames.\n * Unsafe characters are either removed or replaced by a substitute set\n * in the optional `options` object.\n *\n * Illegal Characters on Various Operating Systems\n * / ? < > \\ : * | \"\n * https://kb.acronis.com/content/39790\n *\n * Unicode Control codes\n * C0 0x00-0x1f & C1 (0x80-0x9f)\n * http://en.wikipedia.org/wiki/C0_and_C1_control_codes\n *\n * Reserved filenames on Unix-based systems (\".\", \"..\")\n * Reserved filenames in Windows (\"CON\", \"PRN\", \"AUX\", \"NUL\", \"COM1\",\n * \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\",\n * \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", and\n * \"LPT9\") case-insesitively and with or without filename extensions.\n *\n * Capped at 255 characters in length.\n * http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs\n *\n * @param  {String} input   Original filename\n * @param  {Object} options {replacement: String}\n * @return {String}         Sanitized filename\n */\n\nvar truncate = require(\"truncate-utf8-bytes\");\n\nvar illegalRe = /[\\/\\?<>\\\\:\\*\\|\":]/g;\nvar controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\nvar reservedRe = /^\\.+$/;\nvar windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\nvar windowsTrailingRe = /[\\. ]+$/;\n\nfunction sanitize(input, replacement) {\n  var sanitized = input.replace(illegalRe, replacement).replace(controlRe, replacement).replace(reservedRe, replacement).replace(windowsReservedRe, replacement).replace(windowsTrailingRe, replacement);\n  return truncate(sanitized, 255);\n}\n\nmodule.exports = function (input, options) {\n  var replacement = options && options.replacement || '';\n  var output = sanitize(input, replacement);\n\n  if (replacement === '') {\n    return output;\n  }\n\n  return sanitize(output, '');\n};","map":{"version":3,"sources":["/home/ubuntu/Connor/Demo_OSU_Filemanager/node_modules/sanitize-filename/index.js"],"names":["truncate","require","illegalRe","controlRe","reservedRe","windowsReservedRe","windowsTrailingRe","sanitize","input","replacement","sanitized","replace","module","exports","options","output"],"mappings":"AAAA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB;;AAEA,IAAIC,SAAS,GAAG,oBAAhB;AACA,IAAIC,SAAS,GAAG,uBAAhB;AACA,IAAIC,UAAU,GAAG,OAAjB;AACA,IAAIC,iBAAiB,GAAG,+CAAxB;AACA,IAAIC,iBAAiB,GAAG,SAAxB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,WAAzB,EAAsC;AACpC,MAAIC,SAAS,GAAGF,KAAK,CAClBG,OADa,CACLT,SADK,EACMO,WADN,EAEbE,OAFa,CAELR,SAFK,EAEMM,WAFN,EAGbE,OAHa,CAGLP,UAHK,EAGOK,WAHP,EAIbE,OAJa,CAILN,iBAJK,EAIcI,WAJd,EAKbE,OALa,CAKLL,iBALK,EAKcG,WALd,CAAhB;AAMA,SAAOT,QAAQ,CAACU,SAAD,EAAY,GAAZ,CAAf;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiB,UAAUL,KAAV,EAAiBM,OAAjB,EAA0B;AACzC,MAAIL,WAAW,GAAIK,OAAO,IAAIA,OAAO,CAACL,WAApB,IAAoC,EAAtD;AACA,MAAIM,MAAM,GAAGR,QAAQ,CAACC,KAAD,EAAQC,WAAR,CAArB;;AACA,MAAIA,WAAW,KAAK,EAApB,EAAwB;AACtB,WAAOM,MAAP;AACD;;AACD,SAAOR,QAAQ,CAACQ,MAAD,EAAS,EAAT,CAAf;AACD,CAPD","sourcesContent":["/*jshint node:true*/\n'use strict';\n\n/**\n * Replaces characters in strings that are illegal/unsafe for filenames.\n * Unsafe characters are either removed or replaced by a substitute set\n * in the optional `options` object.\n *\n * Illegal Characters on Various Operating Systems\n * / ? < > \\ : * | \"\n * https://kb.acronis.com/content/39790\n *\n * Unicode Control codes\n * C0 0x00-0x1f & C1 (0x80-0x9f)\n * http://en.wikipedia.org/wiki/C0_and_C1_control_codes\n *\n * Reserved filenames on Unix-based systems (\".\", \"..\")\n * Reserved filenames in Windows (\"CON\", \"PRN\", \"AUX\", \"NUL\", \"COM1\",\n * \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\",\n * \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", and\n * \"LPT9\") case-insesitively and with or without filename extensions.\n *\n * Capped at 255 characters in length.\n * http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs\n *\n * @param  {String} input   Original filename\n * @param  {Object} options {replacement: String}\n * @return {String}         Sanitized filename\n */\n\nvar truncate = require(\"truncate-utf8-bytes\");\n\nvar illegalRe = /[\\/\\?<>\\\\:\\*\\|\":]/g;\nvar controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\nvar reservedRe = /^\\.+$/;\nvar windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\nvar windowsTrailingRe = /[\\. ]+$/;\n\nfunction sanitize(input, replacement) {\n  var sanitized = input\n    .replace(illegalRe, replacement)\n    .replace(controlRe, replacement)\n    .replace(reservedRe, replacement)\n    .replace(windowsReservedRe, replacement)\n    .replace(windowsTrailingRe, replacement);\n  return truncate(sanitized, 255);\n}\n\nmodule.exports = function (input, options) {\n  var replacement = (options && options.replacement) || '';\n  var output = sanitize(input, replacement);\n  if (replacement === '') {\n    return output;\n  }\n  return sanitize(output, '');\n};\n"]},"metadata":{},"sourceType":"script"}