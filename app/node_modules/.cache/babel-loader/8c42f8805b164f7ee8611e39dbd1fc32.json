{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Connor/Demo_OSU_Filemanager/app/src/App.tsx\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport AuthPagesRoutingContainer from \"./pages/AuthPages/AuthPagesRoutingContainer\";\nimport MainPagesRoutingContainer from \"./pages/MainPages/MainPagesRoutingContainer\";\nimport \"./app.scss\";\nimport { UserInfo } from \"affordable-shared-models\";\nimport { AffordableClient, AffordableAdminClient } from \"affordable-client\";\nvar IS_AUTHENTICATED_SESSION_STORAGE_KEY = \"isAuthenticated\";\nvar USER_INFO_SESSION_STORAGE_KEY = \"userInfo\";\n\nclass AppState {\n  constructor() {\n    this.isAuthenticated = false;\n    this.userInfo = new UserInfo();\n  }\n\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.client = void 0;\n    this.adminClient = void 0;\n\n    this.userHasAuthenticated = authenticated => {\n      if (authenticated) {\n        sessionStorage.setItem(\"isAuthenticated\", authenticated.toString());\n      } else {\n        sessionStorage.removeItem(\"isAuthenticated\");\n      }\n\n      this.setState({\n        isAuthenticated: authenticated\n      });\n    };\n\n    this.setUsername = username => {\n      var userInfo = this.state.userInfo;\n      userInfo.username = username;\n      this.setUserInfo(userInfo);\n    };\n\n    this.setUserInfo = userInfo => {\n      console.log(\"Set user info called\");\n      console.log(userInfo);\n      this.setState({\n        userInfo: userInfo\n      });\n      sessionStorage.setItem(\"userInfo\", JSON.stringify(userInfo));\n    };\n\n    this.client = new AffordableClient();\n    this.adminClient = new AffordableAdminClient();\n    this.state = new AppState();\n  }\n\n  componentDidMount() {\n    if (sessionStorage.getItem(IS_AUTHENTICATED_SESSION_STORAGE_KEY)) {\n      this.setState({\n        isAuthenticated: true\n      });\n    }\n\n    if (sessionStorage.getItem(USER_INFO_SESSION_STORAGE_KEY)) {\n      var _sessionStorage$getIt;\n\n      var _userInfo = JSON.parse((_sessionStorage$getIt = sessionStorage.getItem(USER_INFO_SESSION_STORAGE_KEY)) !== null && _sessionStorage$getIt !== void 0 ? _sessionStorage$getIt : \"{}\");\n\n      this.setState({\n        userInfo: _userInfo\n      });\n    }\n  }\n\n  render() {\n    var childProps = {\n      userHasAuthenticated: this.userHasAuthenticated,\n      setUsername: this.setUsername,\n      getUserInfo: this.state.userInfo,\n      setUserInfo: this.setUserInfo,\n      client: this.client,\n      adminClient: this.adminClient\n    };\n    return /*#__PURE__*/React.createElement(BrowserRouter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, this.state.isAuthenticated ? /*#__PURE__*/React.createElement(MainPagesRoutingContainer, {\n      childProps: childProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }) : /*#__PURE__*/React.createElement(AuthPagesRoutingContainer, {\n      childProps: childProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ubuntu/Connor/Demo_OSU_Filemanager/app/src/App.tsx"],"names":["React","Component","BrowserRouter","AuthPagesRoutingContainer","MainPagesRoutingContainer","UserInfo","AffordableClient","AffordableAdminClient","IS_AUTHENTICATED_SESSION_STORAGE_KEY","USER_INFO_SESSION_STORAGE_KEY","AppState","isAuthenticated","userInfo","App","constructor","props","client","adminClient","userHasAuthenticated","authenticated","sessionStorage","setItem","toString","removeItem","setState","setUsername","username","state","setUserInfo","console","log","JSON","stringify","componentDidMount","getItem","parse","render","childProps","getUserInfo"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport AuthPagesRoutingContainer from \"./pages/AuthPages/AuthPagesRoutingContainer\";\nimport MainPagesRoutingContainer from \"./pages/MainPages/MainPagesRoutingContainer\";\nimport \"./app.scss\";\nimport {UserInfo} from \"affordable-shared-models\";\nimport { AffordableClient, AffordableAdminClient } from \"affordable-client\";\n\nconst IS_AUTHENTICATED_SESSION_STORAGE_KEY = \"isAuthenticated\";\nconst USER_INFO_SESSION_STORAGE_KEY = \"userInfo\";\n\nclass AppState {\n  isAuthenticated = false;\n  userInfo = new UserInfo();\n}\n\nexport interface UserInfoProps {\n  // These are being used in AuthPagesRoutingContainer, so we will refrain from altering them now\n  userHasAuthenticated: (authenticated: boolean) => void;\n  setUsername: (username: string) => void;\n  // User information can be stored in an object, which will be retrieved from the server at once\n  getUserInfo: UserInfo;\n  setUserInfo: (userInfo: UserInfo) => void;\n  client: AffordableClient;\n  adminClient: AffordableAdminClient;\n}\n\nclass App extends Component<{}, AppState> {\n  private client: AffordableClient;\n  private adminClient: AffordableAdminClient;\n\n  constructor(props) {\n    super(props);\n    this.client = new AffordableClient();\n    this.adminClient = new AffordableAdminClient();\n    this.state = new AppState();\n  }\n\n  componentDidMount(): void {\n    if (sessionStorage.getItem(IS_AUTHENTICATED_SESSION_STORAGE_KEY)) {\n      this.setState({ isAuthenticated: true });\n    }\n\n    if (sessionStorage.getItem(USER_INFO_SESSION_STORAGE_KEY)) {\n      const userInfo = JSON.parse(\n        sessionStorage.getItem(USER_INFO_SESSION_STORAGE_KEY) ?? \"{}\"\n      ) as UserInfo;\n      this.setState({ userInfo: userInfo });\n    }\n  }\n\n  userHasAuthenticated = (authenticated: boolean) => {\n    if (authenticated) {\n      sessionStorage.setItem(\"isAuthenticated\", authenticated.toString());\n    } else {\n      sessionStorage.removeItem(\"isAuthenticated\");\n    }\n    this.setState({ isAuthenticated: authenticated });\n  };\n\n  setUsername = (username: string): void => {\n    const userInfo = this.state.userInfo;\n    userInfo.username = username;\n    this.setUserInfo(userInfo);\n  };\n\n  setUserInfo = (userInfo: UserInfo): void => {\n    console.log(\"Set user info called\");\n    console.log(userInfo);\n    this.setState({ userInfo: userInfo });\n    sessionStorage.setItem(\"userInfo\", JSON.stringify(userInfo));\n  };\n\n  render(): React.ReactNode {\n    const childProps: UserInfoProps = {\n      userHasAuthenticated: this.userHasAuthenticated,\n      setUsername: this.setUsername,\n      getUserInfo: this.state.userInfo,\n      setUserInfo: this.setUserInfo,\n      client: this.client,\n      adminClient: this.adminClient\n    };\n\n    return (\n      <BrowserRouter>\n        {this.state.isAuthenticated ? (\n          <MainPagesRoutingContainer childProps={childProps} />\n        ) : (\n          <AuthPagesRoutingContainer childProps={childProps} />\n        )}\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}